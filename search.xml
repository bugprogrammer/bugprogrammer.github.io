<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于macOS Big Sur Hackintosh简要说明</title>
    <url>/2020/07/09/about-BigSur.html</url>
    <content><![CDATA[<blockquote>
<p>博主很忙，昨晚才详细测试macOS Big Sur Hackintosh相关情况(全新直接安装)，本文会一直更新到正式版本发布。<a id="more"></a></p>
</blockquote>
<h1 id="OpenCore配置"><a href="#OpenCore配置" class="headerlink" title="OpenCore配置"></a>OpenCore配置</h1><blockquote>
<p>在这里，博主只讲解和Catalina不同的地方</p>
</blockquote>
<ul>
<li>OpenCore以及Lilu及其插件更新到最新版本(源码编译)，请自行编译(每个人需要的kext不同，博主提供无意义)。可以使用以下工具编译<br><a href="https://github.com/bugprogrammer/HackintoshBuild/releases/tag/2.1">https://github.com/bugprogrammer/HackintoshBuild/releases/tag/2.1</a></li>
<li>boot-args加入vsmcgen=1参数<br><img src= "/images/loading.gif" data-lazy-src="/images/bigsur-1.png"></li>
<li>csr-active-config设置为E70B0000<br><img src= "/images/loading.gif" data-lazy-src="/images/bigsur-2.png"></li>
<li>booter-fileset-basesystem以及booter-fileset-kernel相关项目全部删除</li>
<li>禁用核显或者id设置0x12345678</li>
</ul>
<blockquote>
<p>至此,您已经可以愉快的安装Big Sur，但是安装完成后Recovery无法进入，博主暂未解决。。。</p>
</blockquote>
<h1 id="删除快照，重获权限"><a href="#删除快照，重获权限" class="headerlink" title="删除快照，重获权限"></a>删除快照，重获权限</h1><p>博主按照pcbeta网友licheng的思路编写了一个脚本，可以很简单的删除快照，请在USB安装环境中的终端执行。中途要输入分区名(如Macintosh HD)和挂载点(如disk0s2)<br><a href="https://downloads.bugprogrammer.me/shell/deletesnapshot.sh">deletesnapshot.sh</a><br><img src= "/images/loading.gif" data-lazy-src="/images/bigsur-3.png"></p>
<h1 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h1><h1 id="2020-07-09更新"><a href="#2020-07-09更新" class="headerlink" title="2020-07-09更新"></a>2020-07-09更新</h1><h2 id="Recovery进入"><a href="#Recovery进入" class="headerlink" title="Recovery进入"></a>Recovery进入</h2><ul>
<li>关闭核显或设置id为0x12345678</li>
<li>按照如图设置即可<br><img src= "/images/loading.gif" data-lazy-src="/images/bigsur-4.png"></li>
</ul>
<h1 id="2020-07-18更新"><a href="#2020-07-18更新" class="headerlink" title="2020-07-18更新"></a>2020-07-18更新</h1><h2 id="所有网卡罢工修复-免驱94360CD和RTL8125"><a href="#所有网卡罢工修复-免驱94360CD和RTL8125" class="headerlink" title="所有网卡罢工修复(免驱94360CD和RTL8125)"></a>所有网卡罢工修复(免驱94360CD和RTL8125)</h2><ul>
<li>按照如图设置即可<br><img src= "/images/loading.gif" data-lazy-src="/images/bigsur-5.png"></li>
</ul>
<h1 id="2020-08-10更新"><a href="#2020-08-10更新" class="headerlink" title="2020-08-10更新"></a>2020-08-10更新</h1><h2 id="关闭快照在线执行方案"><a href="#关闭快照在线执行方案" class="headerlink" title="关闭快照在线执行方案"></a>关闭快照在线执行方案</h2><ul>
<li>recovery中连接网络</li>
<li>执行如下命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://downloads.bugprogrammer.me/shell/deletesnapshot.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS下编译VoodooI2C教程(2019最新更新)</title>
    <url>/2018/12/01/Build_VoodooI2C.html</url>
    <content><![CDATA[<blockquote>
<p>自从macOS Mojave 10.14发布以来，VoodooI2C在博主的笔记本上就一直闹毛病。最新的release版本2.1.4在10.14下已经可用，睡眠唤醒后也正常，但是有一个bug很让博主头痛，那就是长时间使用笔记本可能会突然出现内核恐慌而死机或重启。查了下github上的issum，不止博主一人遇到。尝试编译新提交的VoodooI2C源码，测试了一天，成功解决博主笔记本的问题。由于VoodooI2C和其他kext(比如Lilu及其插件)相比，编译难度稍大，故而现在发布VoodooI2C编译教程，供朋友们参考。<a id="more"></a></p>
</blockquote>
<h3 id="安装相关环境"><a href="#安装相关环境" class="headerlink" title="安装相关环境"></a>安装相关环境</h3><h4 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h4><ul>
<li>Mac App Store商店安装Xcode。</li>
<li>终端下输入如下命令并按提示安装。<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4>macOS自带。</li>
</ul>
<h3 id="同步VoodooI2C源码"><a href="#同步VoodooI2C源码" class="headerlink" title="同步VoodooI2C源码"></a>同步VoodooI2C源码</h3><blockquote>
<p>由于VoodooI2C不同模块分属于不同仓库，所以我们用以下命令一次性克隆VoodooI2C及其所有子模块。</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">git clone --recursive https:<span class="regexp">//gi</span>thub.com<span class="regexp">/alexandred/</span>VoodooI2C</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/VoodooI2C.png"></p>
<h3 id="编译源码-这一节讲编译流程，相关错误解决方案在下一节"><a href="#编译源码-这一节讲编译流程，相关错误解决方案在下一节" class="headerlink" title="编译源码(这一节讲编译流程，相关错误解决方案在下一节)"></a>编译源码(这一节讲编译流程，相关错误解决方案在下一节)</h3><ul>
<li>用xcode打开桌面上的源码文件夹根目录的VoodooI2C.xcworkspace文件.</li>
<li>点击xcode左侧所有的Update to recommended settings警告，弹出框按提示操作，如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/f9e31b416d4e0e3aae2713e4179f96db06b06ccb.jpg"></li>
<li>点击Product-&gt;Archive，正常情况下会编译成功，弹框提示输出路径，选择并输出即可,如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/9cedcbc68b08583136ff1b3516e64da0d3ac853f.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/dcbee1d5a094c5c8b4d45f71e75665ea47162abc.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/6e92d382389ce86b6eb2970de040093a928ee566.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/f1c31149e6af98479134e71c7741de7069956ff0.jpg"></li>
</ul>
<p><font color=#A52A2A ><strong>（什么？出错了？往下看！！！）</strong></font></p>
<h3 id="常见错误解决方案-语言叙述有难度，请看视频"><a href="#常见错误解决方案-语言叙述有难度，请看视频" class="headerlink" title="常见错误解决方案(语言叙述有难度，请看视频)"></a>常见错误解决方案(语言叙述有难度，请看视频)</h3><h4 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h4><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"https://downloads.bugprogrammer.me/VoodooI2C.mkv"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>VoodooI2C</tag>
      </tags>
  </entry>
  <entry>
    <title>博主自编译的开源软件用于Apple Silicon Macs(长期更新)</title>
    <url>/2021/04/23/Compiling-Soft-for-AppleSilicons.html</url>
    <content><![CDATA[<blockquote>
<p>自从博主购入m1版本的Mac mini以来，体验惊艳。低发热，低功耗，高性能，特别是gpu性能，让我这个不需要独显的人不用为了启动台的流畅度而被迫购入独显，这些优点已经让博主把Hackintosh吃灰。由于Apple Silicon是基于ARM架构的，所以不可避免出现app生态问题。现在发布博主自编译的开源软件，以用于Apple Silicon Macs。此帖将长期更新<a id="more"></a></p>
</blockquote>
<h1 id="软件列表"><a href="#软件列表" class="headerlink" title="软件列表"></a>软件列表</h1><ul>
<li><p>FileZilla<br><a href="https://downloads.bugprogrammer.me/AppleSiliconApps/FileZilla自编译版本.zip">点击下载</a></p>
</li>
<li><p>Mos<br><a href="https://downloads.bugprogrammer.me/AppleSiliconApps/Mos自编译版本.zip">点击下载</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Macintosh</category>
        <category>Apple Silicon</category>
      </categories>
      <tags>
        <tag>Macintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>博主的Hackintosh Bootloader以及kexts编译程序GUI(Swift5)版本发布</title>
    <url>/2020/01/16/Hackintosh_Build_Swift.html</url>
    <content><![CDATA[<blockquote>
<p>之前博主开发的HackintoshBuild.sh脚本使用过程有些繁琐，故使用swift5重新开发GUI版本，部分代码(GUI)参考Pavo-IM大佬的ocbuilder项目，感谢Pavo-IM大佬。本项目可以看作HackintoshBuild.sh的进化版本。<a id="more"></a></p>
</blockquote>
<h1 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h1><p><a href="https://github.com/bugprogrammer/HackintoshBuild">https://github.com/bugprogrammer/HackintoshBuild</a></p>
<h1 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h1><ul>
<li>安装Xcode</li>
<li>安装命令行工具<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>
<h1 id="使用截图"><a href="#使用截图" class="headerlink" title="使用截图"></a>使用截图</h1><img src= "/images/loading.gif" data-lazy-src="/images/buildswift-1.png"></li>
</ul>
<h1 id="目前功能"><a href="#目前功能" class="headerlink" title="目前功能"></a>目前功能</h1><h2 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h2><ul>
<li>基础编译功能</li>
<li>选择存储路径</li>
</ul>
<h1 id="后续打算"><a href="#后续打算" class="headerlink" title="后续打算"></a>后续打算</h1><ul>
<li>发展成为Hackintosh综合工具</li>
</ul>
<h1 id="未来版本目前预计功能"><a href="#未来版本目前预计功能" class="headerlink" title="未来版本目前预计功能"></a>未来版本目前预计功能</h1><ul>
<li>GUI一键获取博主维护的Hackintosh EFI仓库</li>
<li>支持版本自动更新</li>
<li>支持过时设备驱动一键安装(比如HD3000,感谢@黑果小兵提供HD3000驱动方案)</li>
<li>支持DW1820A一键驱动(感谢@黑果小兵提供dw1820a驱动方法以及脚本)</li>
<li>一键导入@xjn的显卡优化数据(感谢@xjn提供优化数据)</li>
<li>一键解锁10.15 read-only以及重建缓存</li>
</ul>
<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><ul>
<li>本项目完全开源并且唯一托管平台为GitHub</li>
<li>博主很忙，更新不快，谢绝催更，感谢！！！</li>
<li>新功能需求请在评论区留言</li>
</ul>
<h1 id="2020-01-21更新"><a href="#2020-01-21更新" class="headerlink" title="2020-01-21更新"></a>2020-01-21更新</h1><h2 id="v1-1版本更新"><a href="#v1-1版本更新" class="headerlink" title="v1.1版本更新"></a>v1.1版本更新</h2><h3 id="此版本由Bugprogrammer以及Arabaku合作完成"><a href="#此版本由Bugprogrammer以及Arabaku合作完成" class="headerlink" title="此版本由Bugprogrammer以及Arabaku合作完成"></a>此版本由Bugprogrammer以及Arabaku合作完成</h3><ul>
<li>最低支持macOS版本为10.13</li>
<li>新增窗口管理</li>
<li>新增检查更新</li>
<li>新增HTTP代理设置</li>
<li>新增保存上次存储路径</li>
<li>新增bugprogrammer维护的常见机型EFI列表获取</li>
<li>新增解锁10.15.x read-only</li>
<li>新增重建缓存功能</li>
<li>新增开启未知来源安装软件</li>
</ul>
<h1 id="2020-02-04更新"><a href="#2020-02-04更新" class="headerlink" title="2020-02-04更新"></a>2020-02-04更新</h1><h2 id="v1-2版本更新"><a href="#v1-2版本更新" class="headerlink" title="v1.2版本更新"></a>v1.2版本更新</h2><h3 id="感谢Arabaku-群友某莔-帮助解决部分bug"><a href="#感谢Arabaku-群友某莔-帮助解决部分bug" class="headerlink" title="感谢Arabaku(群友某莔)帮助解决部分bug"></a>感谢Arabaku(群友某莔)帮助解决部分bug</h3><ul>
<li>新增EFI分区挂载功能并显示当前引导分区</li>
<li>新增NVRAM信息读取功能</li>
<li>新增更换登录壁纸功能(可用来解决系统更新后，自定义桌面壁纸和登录壁纸不同步问题)</li>
</ul>
<h1 id="2020-02-08更新"><a href="#2020-02-08更新" class="headerlink" title="2020-02-08更新"></a>2020-02-08更新</h1><h2 id="v1-3版本更新"><a href="#v1-3版本更新" class="headerlink" title="v1.3版本更新"></a>v1.3版本更新</h2><h3 id="感谢Arabaku的付出帮助"><a href="#感谢Arabaku的付出帮助" class="headerlink" title="感谢Arabaku的付出帮助"></a>感谢Arabaku的付出帮助</h3><ul>
<li>登录壁纸替换适配10.15.4 beta版本</li>
<li>新增http代理记忆</li>
<li>新增时光机器满速运行以及还原默认功能</li>
</ul>
<h1 id="2020-02-18更新"><a href="#2020-02-18更新" class="headerlink" title="2020-02-18更新"></a>2020-02-18更新</h1><h2 id="v1-4版本更新"><a href="#v1-4版本更新" class="headerlink" title="v1.4版本更新"></a>v1.4版本更新</h2><ul>
<li>编译模块以及EFI获取模块新增日志存储</li>
<li>EFI分区挂载模块新增磁盘名称显示以及刷新分区列表</li>
<li>nvram读取模块新增刷新keys</li>
<li>新增系统详情功能,获取kexts,aml,efi文件情况,读取详细信息,获取本地Clover,OC版本号</li>
<li>新增白苹果ioreg信息读取</li>
<li>1.4版本起，支持自动检测更新</li>
<li>UI适配(感谢Arabaku)</li>
<li>新增捐赠模块(全凭自愿)</li>
</ul>
<h1 id="2020-02-24更新"><a href="#2020-02-24更新" class="headerlink" title="2020-02-24更新"></a>2020-02-24更新</h1><h2 id="v1-5版本更新"><a href="#v1-5版本更新" class="headerlink" title="v1.5版本更新"></a>v1.5版本更新</h2><ul>
<li>UI继续优化，禁用全屏模式以及缩放</li>
<li>bug清理</li>
</ul>
<h1 id="2020-03-20更新"><a href="#2020-03-20更新" class="headerlink" title="2020-03-20更新"></a>2020-03-20更新</h1><h2 id="v1-6版本更新"><a href="#v1-6版本更新" class="headerlink" title="v1.6版本更新"></a>v1.6版本更新</h2><h3 id="编译模块"><a href="#编译模块" class="headerlink" title="编译模块"></a>编译模块</h3><blockquote>
<p>新增全选，新增初始环境判断，增强兼容性，修复低版本Xcode无法编译</p>
</blockquote>
<h3 id="EFI获取模块"><a href="#EFI获取模块" class="headerlink" title="EFI获取模块"></a>EFI获取模块</h3><blockquote>
<p>新增全选</p>
</blockquote>
<h3 id="EFI挂载"><a href="#EFI挂载" class="headerlink" title="EFI挂载"></a>EFI挂载</h3><blockquote>
<p>全功能重构，新增Clover环境下，判断当前引导分区</p>
</blockquote>
<h3 id="新增关于本机，获取本机信息"><a href="#新增关于本机，获取本机信息" class="headerlink" title="新增关于本机，获取本机信息"></a>新增关于本机，获取本机信息</h3><h3 id="新增Kexts下载"><a href="#新增Kexts下载" class="headerlink" title="新增Kexts下载"></a>新增Kexts下载</h3><h3 id="新增路径空格以及写权限判断"><a href="#新增路径空格以及写权限判断" class="headerlink" title="新增路径空格以及写权限判断"></a>新增路径空格以及写权限判断</h3><h3 id="修复部分Clover用户闪退"><a href="#修复部分Clover用户闪退" class="headerlink" title="修复部分Clover用户闪退"></a>修复部分Clover用户闪退</h3><p>注意：App一定要安装在应用程序文件夹</p>
<h1 id="2020-03-27更新"><a href="#2020-03-27更新" class="headerlink" title="2020-03-27更新"></a>2020-03-27更新</h1><h2 id="v1-7版本更新"><a href="#v1-7版本更新" class="headerlink" title="v1.7版本更新"></a>v1.7版本更新</h2><ul>
<li>修复nvram模块随机闪退</li>
<li>nvram模块重构，新增values高亮格式化</li>
<li>适配系统亮色/暗色切换(无需退出软件)</li>
</ul>
<h1 id="2020-04-11更新"><a href="#2020-04-11更新" class="headerlink" title="2020-04-11更新"></a>2020-04-11更新</h1><h2 id="v1-8版本更新"><a href="#v1-8版本更新" class="headerlink" title="v1.8版本更新"></a>v1.8版本更新</h2><ul>
<li>适配最新OC编译</li>
<li>提升nvram xml格式兼容性</li>
<li>新增PCI设备信息</li>
<li>新增显卡性能优化(感谢xjn提供数据)</li>
</ul>
<h1 id="2020-04-20更新"><a href="#2020-04-20更新" class="headerlink" title="2020-04-20更新"></a>2020-04-20更新</h1><h2 id="v1-9版本更新"><a href="#v1-9版本更新" class="headerlink" title="v1.9版本更新"></a>v1.9版本更新</h2><ul>
<li>更新mtoc版本以适配最新OpenCore</li>
<li>新增镜像下载模块(官方服务器)</li>
</ul>
<h1 id="2020-05-15更新"><a href="#2020-05-15更新" class="headerlink" title="2020-05-15更新"></a>2020-05-15更新</h1><h2 id="v2-0版本更新"><a href="#v2-0版本更新" class="headerlink" title="v2.0版本更新"></a>v2.0版本更新</h2><ul>
<li>重构PCI信息列表(基于pci.ids)</li>
<li>新增序列号生成</li>
<li>新增OpenCore版本一览(ChangeLog以及配置模板)</li>
<li>新增文件差异对比</li>
</ul>
<h1 id="2020-06-05更新"><a href="#2020-06-05更新" class="headerlink" title="2020-06-05更新"></a>2020-06-05更新</h1><h2 id="v2-1版本更新"><a href="#v2-1版本更新" class="headerlink" title="v2.1版本更新"></a>v2.1版本更新</h2><ul>
<li>适配最新OpenCore编译</li>
<li>添加Z490 ELITE EFI</li>
<li>更新pci.ids</li>
</ul>
<h1 id="2020-09-07更新"><a href="#2020-09-07更新" class="headerlink" title="2020-09-07更新"></a>2020-09-07更新</h1><h2 id="v3-0版本更新"><a href="#v3-0版本更新" class="headerlink" title="v3.0版本更新"></a>v3.0版本更新</h2><ul>
<li>支持 AMD CPUs</li>
<li>优化编译流程，修复找不到 xcodebuild 导致编译失败</li>
<li>修复 EFI 分区挂载在某些情况下显示错误</li>
<li>编译模块以及EFI获取模块新增log路径存储</li>
<li>编译模块新增环境详细校验</li>
<li>更换锁屏壁纸模块改用拖拽方案</li>
<li>镜像下载模块重构，显示下载进度，增强容错</li>
<li>文件对比模块重构(需要安装xcode)</li>
<li>新增Kexts下载模块</li>
<li>新增每日构建下载模块(利用azure pipeline每8小时自动编译Hackintosh全家桶)</li>
<li>新增快照检测</li>
<li>显卡优化更改为kext方案</li>
<li>Big Sur下禁用AppleIntelInfo功能</li>
<li>Kexts下载模块重构，新增进度显示</li>
<li>PCI信息模块新增应用内更新pci.ids数据库</li>
<li>序列号生成模块新增应用内更新SMBIOS数据库</li>
</ul>
<h1 id="2020-10-18更新"><a href="#2020-10-18更新" class="headerlink" title="2020-10-18更新"></a>2020-10-18更新</h1><h2 id="v3-1版本更新"><a href="#v3-1版本更新" class="headerlink" title="v3.1版本更新"></a>v3.1版本更新</h2><ul>
<li>适配MacKernelSDK，修复编译功能以及每日构建功能</li>
<li>编译模块新增VoodooI2C、VoodooPS2以及RTL8125</li>
</ul>
<h1 id="2020-11-11更新"><a href="#2020-11-11更新" class="headerlink" title="2020-11-11更新"></a>2020-11-11更新</h1><h2 id="v3-2版本更新"><a href="#v3-2版本更新" class="headerlink" title="v3.2版本更新"></a>v3.2版本更新</h2><ul>
<li>适配macOS Big Sur RC2镜像下载</li>
</ul>
<h1 id="2020-11-22更新"><a href="#2020-11-22更新" class="headerlink" title="2020-11-22更新"></a>2020-11-22更新</h1><h2 id="v3-3版本更新"><a href="#v3-3版本更新" class="headerlink" title="v3.3版本更新"></a>v3.3版本更新</h2><ul>
<li>适配macOS Big Sur 11.1 beta镜像下载</li>
<li>更换图标(感谢群友Cotton绘制图标)</li>
</ul>
<h1 id="2020-12-25更新"><a href="#2020-12-25更新" class="headerlink" title="2020-12-25更新"></a>2020-12-25更新</h1><h2 id="v4-0版本更新"><a href="#v4-0版本更新" class="headerlink" title="v4.0版本更新"></a>v4.0版本更新</h2><ul>
<li>适配Apple Silicon Macs</li>
<li>新增”本机app适配Apple Silicon情况”模块</li>
<li>按照硬件架构区分可用功能</li>
<li>UI适配Big Sur风格</li>
</ul>
<h1 id="2021-03-07更新"><a href="#2021-03-07更新" class="headerlink" title="2021-03-07更新"></a>2021-03-07更新</h1><h2 id="v4-1版本更新"><a href="#v4-1版本更新" class="headerlink" title="v4.1版本更新"></a>v4.1版本更新</h2><ul>
<li>参照开源方案 <a href="https://github.com/DigiDNA/Silicon">https://github.com/DigiDNA/Silicon</a> MIT License.重构”本机app适配Apple Silicon情况”模块</li>
<li>Apple Silicon Macs关于本机不显示Board id、drm仿冒id、核显id等条目</li>
</ul>
<h1 id="2021-03-28更新"><a href="#2021-03-28更新" class="headerlink" title="2021-03-28更新"></a>2021-03-28更新</h1><h2 id="v4-2版本更新"><a href="#v4-2版本更新" class="headerlink" title="v4.2版本更新"></a>v4.2版本更新</h2><ul>
<li>重构 OpenCore版本一览功能，自动获取原作者仓库信息，避免OpenCore更新数据滞后</li>
</ul>
<h1 id="2021-12-25更新"><a href="#2021-12-25更新" class="headerlink" title="2021-12-25更新"></a>2021-12-25更新</h1><h2 id="v5-0版本更新"><a href="#v5-0版本更新" class="headerlink" title="v5.0版本更新"></a>v5.0版本更新</h2><ul>
<li>适配macOS 12，支持下载macOS 12镜像</li>
<li>编译模块以及每日构建模块添加RestrictEvents.kext</li>
<li>主菜单汉化</li>
<li>开源以及QQ群信息移入关于HackintoshBuild菜单项，移除捐赠模块</li>
</ul>
<h2 id="v5-0已知bug"><a href="#v5-0已知bug" class="headerlink" title="v5.0已知bug"></a>v5.0已知bug</h2><ul>
<li>EFI分享模块条目显示不完整</li>
</ul>
<h1 id="2021-12-26更新"><a href="#2021-12-26更新" class="headerlink" title="2021-12-26更新"></a>2021-12-26更新</h1><h2 id="v5-1版本更新"><a href="#v5-1版本更新" class="headerlink" title="v5.1版本更新"></a>v5.1版本更新</h2><ul>
<li>修复macOS 12系统镜像下载搜索不全的问题</li>
</ul>
<h2 id="v5-1已知bug"><a href="#v5-1已知bug" class="headerlink" title="v5.1已知bug"></a>v5.1已知bug</h2><ul>
<li>同v5.0</li>
</ul>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS下编译Clover教程</title>
    <url>/2018/06/29/Build_Clover.html</url>
    <content><![CDATA[<blockquote>
<p>随着macOS 10.14公测版本的发布，黑苹果用户对Clover新版本的需求提高，想要最新版本的Clover最直接的方法就是源码编译，方便快捷，教程如下。<a id="more"></a></p>
</blockquote>
<h3 id="安装相关环境"><a href="#安装相关环境" class="headerlink" title="安装相关环境"></a>安装相关环境</h3><h4 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h4><ul>
<li>Mac App Store商店安装Xcode</li>
<li>终端下输入如下命令并按提示安装<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>
<h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4></li>
<li>官网下载安装即可 </li>
</ul>
<h4 id="准备编译脚本Build-Clover-command"><a href="#准备编译脚本Build-Clover-command" class="headerlink" title="准备编译脚本Build_Clover.command"></a>准备编译脚本Build_Clover.command</h4><ul>
<li>输入如下命令下载编译脚本并进入相应目录<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Micky1979/</span>Build_Clover.git &amp;&amp; cd Build_Clover</span><br></pre></td></tr></table></figure></li>
<li>给予执行权限<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">chmod u+x <span class="module-access"><span class="module"><span class="identifier">Build_Clover</span>.</span></span>command</span><br></pre></td></tr></table></figure></li>
<li>执行脚本，中途会自动下载Clover最新源码，请等待，下载源码过程以及成功进入菜单如图所示<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">./<span class="module-access"><span class="module"><span class="identifier">Build_Clover</span>.</span></span>command</span><br></pre></td></tr></table></figure>
  <img src= "/images/loading.gif" data-lazy-src="/images/132e7a9ff24c9d81c184e861e8572ba886888101.jpg"><br>  <img src= "/images/loading.gif" data-lazy-src="/images/2dcb06511dcffdf8ff0d64fdcc03012c50f12848.jpg"></li>
</ul>
<h4 id="Build-Clover-command菜单解释"><a href="#Build-Clover-command菜单解释" class="headerlink" title="Build_Clover.command菜单解释"></a>Build_Clover.command菜单解释</h4><ul>
<li>update Clover only (no building) 更新Clover源码不编译</li>
<li>update Clover + force edk2 update (no building) 更新Clover源码和Build_Clover脚本文件，不编译 </li>
<li>run my script on the source 执行自定义脚本</li>
<li>build existing revision (no update, for testing only) 编译已存在版本，仅供测试使用</li>
<li>build existing revision for release (no update, standard build) 编译已存在版本，不更新，常规编译</li>
<li>build existing revision with custom macros enabled 启用宏的模式下编译</li>
<li>enter Developers mode (only for devs) 进入开发模式</li>
<li>Try Clover Configurator Pro.app 尝试启动Clover Configurator</li>
<li>edit the configuration file 编辑配置文件</li>
<li>Exit 退出菜单</li>
</ul>
<h3 id="编译Clover"><a href="#编译Clover" class="headerlink" title="编译Clover"></a>编译Clover</h3><p>脚本菜单中选择**<em>build existing revision for release (no update, standard build)-&gt;Standard x64 only-&gt;Standard**</em>开始编译，过程请等待。编译结束后会自动打开clover的pkg安装包所在目录。安装此pkg包即可升级到最新版本的Clover。<br><img src= "/images/loading.gif" data-lazy-src="/images/e2b7cb1cda2263bc19eea7075aa49779ee181c63.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/22a2efa8dcb27fe042fb85af67fb328488a61c55.jpg"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Clover</tag>
      </tags>
  </entry>
  <entry>
    <title>博主的Hackintosh Bootloader以及kexts编译脚本分享</title>
    <url>/2019/12/21/Hackintosh_Build.html</url>
    <content><![CDATA[<blockquote>
<p>鉴于很多小伙伴问我如何编译Hackintosh Bootloader以及kexts，今奉上博主的编译脚本。<a id="more"></a></p>
</blockquote>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>App Store安装Xcode11</li>
<li>输入以下命令并按提示安装命令行工具<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>
<h2 id="脚本使用"><a href="#脚本使用" class="headerlink" title="脚本使用"></a>脚本使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/bugprogrammer/hackintosh/master/Hackintosh_build.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="使用截图"><a href="#使用截图" class="headerlink" title="使用截图"></a>使用截图</h1><img src= "/images/loading.gif" data-lazy-src="/images/build-1.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/build-2.png"></li>
</ul>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核简介及编译教程</title>
    <url>/2018/09/01/Linux_Kernel_Build.html</url>
    <content><![CDATA[<blockquote>
<p>博主去年双11购入AMD Vega显卡(为了黑苹果免驱以及硬解)，发现Linux下无法驱动Vega显卡，4K显示器分辨率被锁定为1920x2160的奇葩分辨率，无法接受。于是Google了一下发现当时的内核(Linux 4.12)并不支持AMD Vega显卡，于是打算编译内核升级到最新版本，毕竟Linux的舒适使用对博主十分重要。现在分享一下Linux Kernel的编译教程。<a id="more"></a><br><br /><b>注意：由于时间久远，博主的Linux已经升级Ubuntu 18.04，自带内核版本为Linux 4.15，所以演示平台为Ubuntu 18.04，编译的内核版本为Linux 4.18.5。另外，本文中部分图片来源网络。因为经典体系架构图现画比较麻烦。</b></p>
</blockquote>
<h3 id="Linux内核简介"><a href="#Linux内核简介" class="headerlink" title="Linux内核简介"></a>Linux内核简介</h3><h4 id="Linux-Kernel-Map"><a href="#Linux-Kernel-Map" class="headerlink" title="Linux Kernel Map"></a>Linux Kernel Map</h4><p><img src= "/images/loading.gif" data-lazy-src="/images/6b49439752bdd908e832187bbbfe555dcd56864e.jpg"></p>
<h4 id="Linux-系统体系结构"><a href="#Linux-系统体系结构" class="headerlink" title="Linux 系统体系结构"></a>Linux 系统体系结构</h4><p>如下图所示，Linux体系结构，从大的方面可以分为用户空间(User Space)和内核空间(Kernel Space)两部分。</p>
<p><img src= "/images/loading.gif" data-lazy-src="/images/299f340bcfb4ac1703fdb841e613bcaf57862165.jpg"></p>
<ul>
<li>用户空间中包含了C库，用户的应用程序。在某些体系结构图中还包含了shell，当然shell脚本也是Linux体系中不可缺少的一部分。</li>
<li>内核空间包括硬件平台、平台依赖代码、内核、系统调用接口。</li>
<li>在任何一个现代操作系统中，都是分层的。为什么需要分层呢？<blockquote>
<p>从程序员的角度分析，将linux底层和应用分开，做应用的做应用，做底层的做底层，各干各的。经济学的基本原理是，分工产生效率。<br /><br>从安全性的角度分析，是为了保护内核。现代CPU通常都实现了不同的工作模式。<br><br />以ARM为例：ARM实现了7种工作模式，不同模式下CPU可以执行的指令或者访问的寄存器不同：(1)用户模式 usr (2)系统模式 sys(3)管理模式 svc(4)快速中断 fiq(5)外部中断 irq(6)数据访问终止 abt(7)未定义指令异常。如果任何一个上层应用都可以调用寄存器，那样肯定是无法稳定执行的。而且因为出现了这个问题，出现了一个新的学科“现代操作系统”，如果大家感兴趣可以看一下“现代操作系统”相关文章或者书籍。<br /><br>以X86为例：X86实现了4个不同级别的权限，Ring0—Ring3 ;Ring0下可以执行特权指令，可以访问IO设备；Ring3则有很多的限制。如果分析一下Android的，这方面做的更加“丧心病狂”，Android所有的APK应用程序，都是在Java虚拟机上面运行，应用程序更加远离底层。<br /><br>另外，用户空间和内核空间是程序执行的两种不同状态，我们可以通过“系统调用”和“硬件中断”来完成用户空间到内核空间的转移。</p>
</blockquote>
</li>
</ul>
<h4 id="Linux-Kernel体系结构"><a href="#Linux-Kernel体系结构" class="headerlink" title="Linux Kernel体系结构"></a>Linux Kernel体系结构</h4><p>如下图所示，是Linux内核结构图。</p>
<p><img src= "/images/loading.gif" data-lazy-src="/images/97909a09aa119314a15a18235b9eb288ba7ad448.jpg"></p>
<h5 id="SCI层（System-Call-Interface）"><a href="#SCI层（System-Call-Interface）" class="headerlink" title="SCI层（System Call Interface）"></a>SCI层（System Call Interface）</h5><p>这一层是给应用用户空间提供一套标准的系统调用函数来访问Linux。前面分析Linux体系结构的时候，介绍过任何一类现代操作系统都不会允许上层应用直接访问底层，在Linux中，内核提供了一套标准接口，上层应用就可以通过这一套标准接口来访问底层。</p>
<h5 id="PM（Procees-Management）"><a href="#PM（Procees-Management）" class="headerlink" title="PM（Procees Management）"></a>PM（Procees Management）</h5><p>这一部分包括具体创建进程（fork、exec）,停止进程（kill、exit）,并控制他们之间的通信（signal等）。还包括进程调度，控制活动进程如何共享CPU。这一部分是Linux已经做好的，在写驱动的时候，只需要调用对应的函数即可实现这些功能，例如创建进程、进程通信等等。</p>
<h5 id="MM（Memory-Management）"><a href="#MM（Memory-Management）" class="headerlink" title="MM（Memory Management）"></a>MM（Memory Management）</h5><p>内存管理的主要作用是控制多个进程安全的共享内存区域。</p>
<h5 id="VFS（Virtual-File-Systems）"><a href="#VFS（Virtual-File-Systems）" class="headerlink" title="VFS（Virtual File Systems）"></a>VFS（Virtual File Systems）</h5><p>虚拟文件系统，隐藏各种文件系统的具体细节，为文件操作提供统一的接口。在Linux中“一切皆文件”，这些文件就是通过VFS来实现的。Linux提供了一个大的通用模型，使这个模型包含了所有文件系统功能的集合。如下图所示，是一个虚拟文件系统的结构图。</p>
<p><img src= "/images/loading.gif" data-lazy-src="/images/5a07b3a364feae45f4bd211f19d963e1977eff58.jpg"></p>
<h5 id="DD（Device-Drivers）"><a href="#DD（Device-Drivers）" class="headerlink" title="DD（Device Drivers）"></a>DD（Device Drivers）</h5><p>设备驱动，Linux驱动一般分为网络设备、块设备、字符设备、杂项设备，需要我们编写的只有字符设备，杂项设备是不容易归类的一种驱动，杂项设备和字符设备有很多重合的地方。</p>
<h5 id="PD（Physical-Devices）"><a href="#PD（Physical-Devices）" class="headerlink" title="PD（Physical Devices）"></a>PD（Physical Devices）</h5><p>这一部分提供丰富的网络协议支持。</p>
<h3 id="Linux-Kernel源码"><a href="#Linux-Kernel源码" class="headerlink" title="Linux Kernel源码"></a>Linux Kernel源码</h3><h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h4><p><b><a href="http://www.kernel.org/">www.kernel.org</a></b></p>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul>
<li>arch：根据cpu体系结构不同而分的代码</li>
<li>block：部分块设备驱动程序</li>
<li>crypto：加密，压缩，CRC校验算法</li>
<li>documentation：内核文档</li>
<li>drivers：设备驱动程序</li>
<li>fs(虚拟文件系统vfs):文件系统</li>
<li>include：内核所需的头文件，(与平台无关的头文件在include/linux中)</li>
<li>lib：库文件代码(与平台相关的)</li>
<li>mm：实现内存管理，与硬件体系结构无关的(与硬件体系结构相关的在arch中)</li>
<li>net：网络协议的代码</li>
<li>samples：一些内核编程的范例</li>
<li>scripts：配置内核的脚本</li>
<li>security：SElinux的模块</li>
<li>sound：音频设备的驱动程序</li>
<li>usr：cpio命令实现，用于制作根文件系统的命令(文件系统与内核放到一块的命令)</li>
<li>virt：内核虚拟机</li>
</ul>
<h3 id="Linux-Kernel编译"><a href="#Linux-Kernel编译" class="headerlink" title="Linux Kernel编译"></a>Linux Kernel编译</h3><h4 id="下载Linux-Kernel源码并拷贝到-usr-src目录"><a href="#下载Linux-Kernel源码并拷贝到-usr-src目录" class="headerlink" title="下载Linux Kernel源码并拷贝到/usr/src目录"></a>下载Linux Kernel源码并拷贝到/usr/src目录</h4><p>输入如下命令即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>cdn.kernel.org<span class="regexp">/pub/</span>linux<span class="regexp">/kernel/</span>v4.x<span class="regexp">/linux-4.18.5.tar.xz &amp;&amp; cp -f linux-4.18.5.tar.xz /u</span>sr/src</span><br></pre></td></tr></table></figure>
<h4 id="解压Linux-Kernel"><a href="#解压Linux-Kernel" class="headerlink" title="解压Linux Kernel"></a>解压Linux Kernel</h4><p>输入如下命令即可</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> /usr/src &amp;&amp; tar -xvf linux-<span class="number">4</span>.<span class="number">18</span>.<span class="number">5</span>.tar.xz &amp;&amp; cd linux-<span class="number">4</span>.<span class="number">18</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure>
<h4 id="Ubuntu-18-04下，要执行以下命令安装软件包"><a href="#Ubuntu-18-04下，要执行以下命令安装软件包" class="headerlink" title="Ubuntu 18.04下，要执行以下命令安装软件包"></a>Ubuntu 18.04下，要执行以下命令安装软件包</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> fortune</span><br></pre></td></tr></table></figure>
<h4 id="配置编译参数"><a href="#配置编译参数" class="headerlink" title="配置编译参数"></a>配置编译参数</h4><p>执行以下命令，会弹出一个带有GUI的配置界面，一般情况下默认参数就好，光标移动到Save保存即可，如图：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">make menuconfig</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/bc6c5ce369b72802e5c97d5a38ef3b2b50ad6455.jpg"></p>
<h4 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">make</span> -j<span class="number">12</span></span><br></pre></td></tr></table></figure>
<p><b>注意：-j参数后面加本机CPU线程数可以加快编译速度，博主的8700K是6核心12线程，所以-j12。</b></p>
<p><img src= "/images/loading.gif" data-lazy-src="/images/39a28f2943c8062679567b03687c28c54354b5c9.jpg"></p>
<h4 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h4><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span> modules_install</span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure>
<h4 id="更新grub引导"><a href="#更新grub引导" class="headerlink" title="更新grub引导"></a>更新grub引导</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">update</span>-grub<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>至此升级内核成功，重启电脑。</p>
<h4 id="确认升级是否成功"><a href="#确认升级是否成功" class="headerlink" title="确认升级是否成功"></a>确认升级是否成功</h4><p>重启后，执行如下命令查看内核版本，和编译版本相同即为成功</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">uname -r</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/7de8222416d47ef89b548125c35e3b5f3238508f.jpg"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux_Kernel</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>技嘉Z490 ELITE+i9 10900K+RX 5700 XT Hackintosh构建说明</title>
    <url>/2020/05/27/Hackintosh_for_Z490_10900K.html</url>
    <content><![CDATA[<blockquote>
<p>Z490主板以及10代桌面处理器(吐槽下14nm+++++++++++++++)正式解禁开卖，博主升级电脑，购入Z490 ELITE+10900K套装(原价哦)，简单测试了下Hackintosh运行情况，现简要说明。<a id="more"></a></p>
</blockquote>
<h1 id="运行情况以及完美程度"><a href="#运行情况以及完美程度" class="headerlink" title="运行情况以及完美程度"></a>运行情况以及完美程度</h1><h2 id="正常工作"><a href="#正常工作" class="headerlink" title="正常工作"></a>正常工作</h2><ul>
<li>核显</li>
<li>独显</li>
<li>声卡</li>
<li>WIFI</li>
<li>蓝牙</li>
<li>sidecar</li>
<li>电源节能5项</li>
<li>USB</li>
<li>睡眠唤醒</li>
<li>USBPower充电</li>
<li>DRM视频播放</li>
<li>原生NVRAM启动盘切换</li>
</ul>
<h2 id="无法工作"><a href="#无法工作" class="headerlink" title="无法工作"></a>无法工作</h2><ul>
<li>RTL8125 2.5G有线网卡</li>
</ul>
<h2 id="小瑕疵"><a href="#小瑕疵" class="headerlink" title="小瑕疵"></a>小瑕疵</h2><ul>
<li>关于本机处理器只显示频率</li>
</ul>
<h1 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h1><h2 id="下载镜像-略"><a href="#下载镜像-略" class="headerlink" title="下载镜像(略)"></a>下载镜像(略)</h2><h2 id="进系统"><a href="#进系统" class="headerlink" title="进系统"></a>进系统</h2><h3 id="系统版本低于10-15-5正式版"><a href="#系统版本低于10-15-5正式版" class="headerlink" title="系统版本低于10.15.5正式版"></a>系统版本低于10.15.5正式版</h3><ul>
<li><p>OC config.plist中作如下设置</p>
<blockquote>
<p>Kernel-&gt;Emulate-&gt;Cpuid1Data(Data)-&gt;EB060800 00000000 00000000 00000000<br>Kernel-&gt;Emulate-&gt;Cpuid1Mask(Data)-&gt;FFFFFFFF 00000000 00000000 00000000<br>Kernel-&gt;Quirks-&gt;AppleXcpmCfgLock(Boolean)-&gt;YES</p>
</blockquote>
</li>
<li><p>加入SSDT-AWAC.aml并在config.plist中启用(OC中自带)</p>
</li>
</ul>
<h3 id="系统版本已经是10-15-5正式版"><a href="#系统版本已经是10-15-5正式版" class="headerlink" title="系统版本已经是10.15.5正式版"></a>系统版本已经是10.15.5正式版</h3><ul>
<li><p>OC config.plist中作如下设置</p>
<blockquote>
<p>Kernel-&gt;Quirks-&gt;AppleXcpmCfgLock(Boolean)-&gt;YES</p>
</blockquote>
</li>
<li><p>加入SSDT-AWAC.aml并在config.plist中启用(OC中自带)</p>
</li>
</ul>
<h2 id="核显"><a href="#核显" class="headerlink" title="核显"></a>核显</h2><ul>
<li>BIOS下开启核显(重要)</li>
<li>OC config.plist中注入如下信息,注意IGPU路径要换成自己的<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-1.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-2.png"></li>
</ul>
<h2 id="独显"><a href="#独显" class="headerlink" title="独显"></a>独显</h2><h3 id="基础驱动"><a href="#基础驱动" class="headerlink" title="基础驱动"></a>基础驱动</h3><ul>
<li>加入WhateverGreen.kext</li>
<li>boot-args加入agdpmod=pikera<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-3.png"></li>
</ul>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul>
<li>OC config.plist中注入如下信息,注意GFX路径要换成自己的<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-4.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-5.png"></li>
</ul>
<h2 id="声卡"><a href="#声卡" class="headerlink" title="声卡"></a>声卡</h2><ul>
<li>加入AppleALC.kext，FakePCIID.kext，FakePCIID_Intel_HDMI_Audio.kext</li>
<li>OC config.plist中注入如下信息,注意HDEF路径要换成自己的<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-6.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-7.png"></li>
</ul>
<h2 id="WIFI以及蓝牙"><a href="#WIFI以及蓝牙" class="headerlink" title="WIFI以及蓝牙"></a>WIFI以及蓝牙</h2><ul>
<li>博主用的是BCM94352Z，和以前驱动方法完全相同，故不赘述。</li>
</ul>
<h2 id="sidecar"><a href="#sidecar" class="headerlink" title="sidecar"></a>sidecar</h2><ul>
<li>核显正常驱动即可，无线连接sidecar有问题的，请重新登录icloud以及清空NVRAM。</li>
</ul>
<h2 id="电源节能5项"><a href="#电源节能5项" class="headerlink" title="电源节能5项"></a>电源节能5项</h2><ul>
<li>加入以下SSDT并在config中启用即可(以下ssdt已经修复节能变成4项的问题)<br><a href="https://downloads.bugprogrammer.me/SSDT/SSDT-PLUG.aml">SSDT-PLUG.aml</a></li>
</ul>
<h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><blockquote>
<p>博主首先尝试了原始的USBPorts.kext方案，发现并不能解决睡眠即时唤醒的bug，所以博主使用了新方案。</p>
</blockquote>
<ul>
<li>OC config.plist中做如下配置<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-8.png"></li>
<li>定制USBPorts.kext(虽然不能解决睡眠即时唤醒，但是可以解决插入移动硬盘被识别为内置的bug)。</li>
<li>加入如下SSDT并在config.plist中启用<br><a href="https://downloads.bugprogrammer.me/SSDT/SSDT-GPRW.aml">SSDT-GPRW.aml</a></li>
<li>OC config.plist中做如下配置<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-9.png"></li>
</ul>
<h2 id="睡眠唤醒"><a href="#睡眠唤醒" class="headerlink" title="睡眠唤醒"></a>睡眠唤醒</h2><ul>
<li>USB以及电源节能5项搞定以后，睡眠唤醒即正常。</li>
</ul>
<h2 id="USBPower充电"><a href="#USBPower充电" class="headerlink" title="USBPower充电"></a>USBPower充电</h2><ul>
<li>在USBPorts.kext的info.plist注入如下信息即可<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-10.png"></li>
</ul>
<h2 id="DRM视频播放"><a href="#DRM视频播放" class="headerlink" title="DRM视频播放"></a>DRM视频播放</h2><ul>
<li>加入并启用Whatevergreen.kext</li>
<li>boot-args加入参数shikigva=80<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-11.png"></li>
</ul>
<h2 id="原生NVRAM启动盘切换"><a href="#原生NVRAM启动盘切换" class="headerlink" title="原生NVRAM启动盘切换"></a>原生NVRAM启动盘切换</h2><ul>
<li>与Z390完全一样，可以去掉SSDT-PMC。(原生NVRAM)</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>过程写的较为简洁，萌新小伙伴需要看一些其他基础，本文目标是梳理一下Z490 Hackintosh构建的基本情况和驱动完善方法，后续进展会继续更新。<br>EFI Github地址: <a href="https://github.com/bugprogrammer/hackintosh/tree/Z490-AORUS-ELETE+10900K+RX5700XT">https://github.com/bugprogrammer/hackintosh/tree/Z490-AORUS-ELETE+10900K+RX5700XT</a></p>
</blockquote>
<h1 id="2020-05-31更新"><a href="#2020-05-31更新" class="headerlink" title="2020-05-31更新"></a>2020-05-31更新</h1><h2 id="核显-1"><a href="#核显-1" class="headerlink" title="核显"></a>核显</h2><p>最新版本的macOS(10.15.5)以及Whatevergreen(1.4.0)已经支持Comet Lake新核显id。新id如下</p>
<ul>
<li>0x9BC80003 =&gt; i5-10500及以下CPU所附带的UHD 630核显</li>
<li>0x9BC50003 =&gt; i5-10600K及以上CPU所附带的UHD 630核显</li>
</ul>
<p>博主的i9-10900K正好适用0x9BC50003，故核显部分更新如下<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-12.png"></p>
<h1 id="2020-06-02更新"><a href="#2020-06-02更新" class="headerlink" title="2020-06-02更新"></a>2020-06-02更新</h1><h2 id="解锁msr-lock-cfg-lock"><a href="#解锁msr-lock-cfg-lock" class="headerlink" title="解锁msr lock(cfg lock)"></a>解锁msr lock(cfg lock)</h2><blockquote>
<p>博主之前测试发现传统的msr解锁方案(setup_var)不起作用，因为手头没有编程器，不敢硬刷BIOS，故暂时搁置。偶然在tonymacx86上看到了一个解锁工具，测试成功，教程如下。</p>
</blockquote>
<ul>
<li><p>下载CFGLock.efi工具<br><a href="https://downloads.bugprogrammer.me/tools/CFGLock.efi">CFGLock.efi</a></p>
</li>
<li><p>放入OC文件夹下的tools目录中并在config.plist中启用<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-13.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-14.png"></p>
</li>
<li><p>重启，OC启动菜单选择CFGLock，并按提示操作即可(按y)，工具使用中出现如下交互提示</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Brumbaers</span> CFG Unlock</span><br><span class="line"><span class="attribute">1</span>. <span class="number">05</span> <span class="number">003</span>E <span class="number">0011</span> /CFG Lock/ VarStore Name: CpuSetup</span><br><span class="line"></span><br><span class="line"><span class="attribute">Exactly</span> <span class="number">1</span> CFG Variable found: CFG Lock</span><br><span class="line"><span class="attribute">In</span> VarStore <span class="string">&quot;CpuSetup&quot;</span> GUID: B<span class="number">08</span>F<span class="number">97</span>FF-E<span class="number">6</span>E<span class="number">8</span>-<span class="number">4193</span> - A<span class="number">9</span>-<span class="number">97</span>-<span class="number">5</span>E-<span class="number">9</span>E-<span class="number">98</span>-<span class="number">0</span>A-DB-<span class="number">32</span> Offset: <span class="number">003</span>E Size: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Variable</span> read: value <span class="number">1</span></span><br><span class="line"><span class="attribute">Do</span> you want to toggle the value y/n ?</span><br></pre></td></tr></table></figure></li>
<li><p>用HackintoshBuild检测cfg lock情况，成功解锁如下图<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-15.png"></p>
</li>
<li><p>config.plist中关闭cfg补丁<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-16.png"></p>
</li>
</ul>
<h2 id="定制CPU名称-博主电脑只显示频率"><a href="#定制CPU名称-博主电脑只显示频率" class="headerlink" title="定制CPU名称(博主电脑只显示频率)"></a>定制CPU名称(博主电脑只显示频率)</h2><ul>
<li><p>下载cpu-name.sh脚本(来自tonymacx86)<br><a href="https://downloads.bugprogrammer.me/tools/cpu_name.sh">cpu-name.sh</a></p>
</li>
<li><p>使用方法</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> xxx(脚本所在目录)</span><br><span class="line">chmod +x cpu-name.<span class="keyword">sh</span></span><br><span class="line">./cpu-name.<span class="keyword">sh</span> <span class="string">&quot;cpu名称&quot;</span>(例如：./cpu-name.<span class="keyword">sh</span> <span class="string">&quot;十核 Intel Core i9&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/Z490-17.png"></p>
</li>
</ul>
<h1 id="2020-06-04更新"><a href="#2020-06-04更新" class="headerlink" title="2020-06-04更新"></a>2020-06-04更新</h1><h2 id="ACPI-error-TZ-TZ10-STA"><a href="#ACPI-error-TZ-TZ10-STA" class="headerlink" title="ACPI error(_TZ.TZ10._STA)"></a>ACPI error(_TZ.TZ10._STA)</h2><blockquote>
<p>这个是技嘉主板通病。TZ10是一个温控模块，_STA方法是操作系统检查，如果找不到匹配操作系统(Darwin)就会出错。SSDT中定义如下。</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Method</span> (_STA, <span class="number">0</span>, NotSerialized)  <span class="comment">// _STA: Status</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2001&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x04, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2001.1&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x05, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;FreeBSD&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x06, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;HP-UX&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x07, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;OpenVMS&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x08, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2001 SP1&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x09, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2001 SP2&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x0A, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2001 SP3&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x0B, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2006&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x0C, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2006 SP1&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x0D, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2009&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x0E, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2012&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x0F, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2013&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x10, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2015&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x11, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2016&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x12, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2017&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x13, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2017.2&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x14, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2018&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x15, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (\_OSI (<span class="string">&quot;Windows 2018.2&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (<span class="number">0</span>x16, Local0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">If</span> (LLessEqual (Local0, <span class="number">0</span>x0E))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="selector-tag">Store</span> (One, \GSA1.ZRD2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">Return</span> (<span class="number">0</span>x0B)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>OC config.plist中做如下配置<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-18.png"></li>
<li>加入如下SSDT并在config.plist中启用<br><a href="https://downloads.bugprogrammer.me/SSDT/SSDT-OC-XOSI.aml">SSDT-OC-XOSI.aml</a></li>
</ul>
<h1 id="2020-06-07更新"><a href="#2020-06-07更新" class="headerlink" title="2020-06-07更新"></a>2020-06-07更新</h1><h2 id="修复技嘉Hackintosh启动随机出现内存错误"><a href="#修复技嘉Hackintosh启动随机出现内存错误" class="headerlink" title="修复技嘉Hackintosh启动随机出现内存错误"></a>修复技嘉Hackintosh启动随机出现内存错误</h2><ul>
<li><p>config.plist中做以下修改</p>
<blockquote>
<p>Booter-&gt;Quirks-&gt;DevirtualiseMmio-&gt;YES<br>Booter-&gt;Quirks-&gt;ProtectUefiServices-&gt;NO<br>NVRAM-&gt;Add-&gt;7C436110-AB2A-4BBB-A880-FE41995C9F82-&gt;slide=1(添加)</p>
</blockquote>
</li>
<li><p>加入如下.efi文件并在config.plist中启用<br><a href="https://downloads.bugprogrammer.me/efidriver/MemoryAllocation.efi">MemoryAllocation.efi</a></p>
</li>
</ul>
<h1 id="2020-06-11更新"><a href="#2020-06-11更新" class="headerlink" title="2020-06-11更新"></a>2020-06-11更新</h1><p>更新10.15.6要把之前的CPUID仿冒加回来。。。</p>
<h1 id="2020-06-12更新"><a href="#2020-06-12更新" class="headerlink" title="2020-06-12更新"></a>2020-06-12更新</h1><h2 id="RTL8125-2-5G-10-15可用，10-14未测试"><a href="#RTL8125-2-5G-10-15可用，10-14未测试" class="headerlink" title="RTL8125 2.5G(10.15可用，10.14未测试)"></a>RTL8125 2.5G(10.15可用，10.14未测试)</h2><p>使用以下kext即可<br><a href="https://downloads.bugprogrammer.me/Kexts/LucyRTL8125Ethernet.kext.zip">LucyRTL8125Ethernet.kext</a><br>编译自 <a href="https://github.com/derBrumbaer/LucyRTL8125Ethernet%EF%BC%8C">https://github.com/derBrumbaer/LucyRTL8125Ethernet，</a> 感谢derBrumbaer以及Mieze。<br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-19.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/Z490-20.png"></p>
<h1 id="2020-07-14更新"><a href="#2020-07-14更新" class="headerlink" title="2020-07-14更新"></a>2020-07-14更新</h1><h2 id="声卡-1"><a href="#声卡-1" class="headerlink" title="声卡"></a>声卡</h2><blockquote>
<p>据博主测试，最新的AppleALC(1.5.1)已经支持400系列，故此可以删除FakePCIID.kext以及FakePCIID_Intel_HDMI_Audio.kext, config中删除声卡的device-id，直接使用最新的AppleALC即可。</p>
</blockquote>
<p><a href="https://downloads.bugprogrammer.me/Kexts/AppleALC.kext.zip">AppleALC.kext.zip</a></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>博主的Hackintosh全家桶定时编译上线GitHub</title>
    <url>/2020/09/07/HackintoshPlugins.html</url>
    <content><![CDATA[<blockquote>
<p>鉴于很多小伙伴编译困难，博主用azure pipelines建立了自动编译流水线，包括OC以及常用kexts，每8小时更新一次，欢迎食用</p>
</blockquote>
<h3 id="仓库链接"><a href="#仓库链接" class="headerlink" title="仓库链接"></a>仓库链接</h3><p><a href="https://github.com/bugprogrammer/HackinPlugins">https://github.com/bugprogrammer/HackinPlugins</a></p>
<h3 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h3><p>直接下载或者使用HackintoshBuild中的每日构建功能</p>
<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src= "/images/loading.gif" data-lazy-src="/images/pipelines-1.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/pipelines-2.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/pipelines-3.png"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPad S1 2017 Hackintosh记录+教程+完整EFI分享</title>
    <url>/2018/07/28/ThinkPad_Hackintosh.html</url>
    <content><![CDATA[<blockquote>
<p>朋友购买了ThinkPad S1 2017版本，配置为i5-7200U+hd620+8g ram+256g intel ssd(NVME)+1080P屏幕。安装黑苹果大体顺利，现将大概过程分享，供同机型的朋友借鉴。<a id="more"></a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>因ThinkPad S1 2017使用的是intel无线网卡，大家都知道intel无线网卡在黑苹果下目前无解，所以替换了Bcm94352z。虽然Bcm94360是免驱的，但是博主不建议笔记本用户选用，因为Bcm94360和普通的ngff无线网卡相比宽了一块，所以笔记本有概率无法安装。</li>
<li>完美程度：显卡+声卡+双网卡+蓝牙完美驱动，USB正常，睡眠唤醒正常，显示器内建正常，HDMI外接屏幕正常，变频7档，小太阳正常，电池正常(感谢黑果小兵和宪武以及其他大牛的帮助)。触摸屏以及电容笔可用，但只能单点触摸。触摸板和小红点可用，但是不支持手势。</li>
<li>因为电脑是朋友的，所以截图不方便，因此本教程尽量多使用命令行方式，各位可以直接复制粘贴。</li>
<li>本教程需要你有一个macOS环境，可以是虚拟机。虚拟机安装macOS百度教程很多，请自学。</li>
<li>安装前要在Windows下准备好安装macOS所需分区。</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="制作安装盘"><a href="#制作安装盘" class="headerlink" title="制作安装盘"></a>制作安装盘</h3><ul>
<li>下载macOS High Sierra 10.13.6镜像，博主建议在App Store下载，下载成功后会保存在Application下。</li>
<li>格式化U盘为Mac OS扩展日志式，U盘名称设置为mac，格式化后会生成两个分区，第一个是EFI分区，用来存放Clover引导，第二个用于写入镜像，格式化U盘如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/7eb9ec5bdd42a032dc9707bd8255427e82618323.jpg"></li>
<li>写入镜像:终端输入如下命令并输入密码即可。<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/Applications/</span>Install\ macOS\ High\ Sierra.app<span class="regexp">/Contents/</span>Resources<span class="regexp">/createinstallmedia --volume /</span>Volumes<span class="regexp">/mac --applicationpath /</span>Applications/Install\ macOS\ High\ Sierra.app</span><br></pre></td></tr></table></figure>
<h3 id="获取博主分享的Clover文件-保存在桌面"><a href="#获取博主分享的Clover文件-保存在桌面" class="headerlink" title="获取博主分享的Clover文件,保存在桌面"></a>获取博主分享的Clover文件,保存在桌面</h3></li>
<li>输入如下命令即可在桌面保存hackintosh文件夹，内含Clover文件夹<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/Desktop</span> &amp;&amp; git clone https:<span class="string">//github.com/bugprogrammer/hackintosh.git</span> &amp;&amp; <span class="keyword">cd</span> hackintosh &amp;&amp; git checkout ThinkPad-S1-2017 </span><br></pre></td></tr></table></figure>
<img src= "/images/loading.gif" data-lazy-src="/images/d36b4788d3a64bcc071322e9a8dd0668cd7d7b20.jpg"></li>
</ul>
<h3 id="挂载U盘EFI分区，放入Clover引导"><a href="#挂载U盘EFI分区，放入Clover引导" class="headerlink" title="挂载U盘EFI分区，放入Clover引导"></a>挂载U盘EFI分区，放入Clover引导</h3><p>使用Clover Configurator挂载EFI分区，将博主分享的EFI拷贝进去。<br>   <img src= "/images/loading.gif" data-lazy-src="/images/deb75b00e28a324d97692897f31013241d00124f.jpg"><br>   <img src= "/images/loading.gif" data-lazy-src="/images/49f17878784bf4892e1e2be3e4af61fc5c5d9117.jpg"></p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><ul>
<li>U盘启动，进入安装盘</li>
<li>选择语言为简体中文，磁盘工具下抹盘为APFS</li>
<li>点击安装macOS，选择刚才准备好的分区，安装系统</li>
<li>安装系统有两个阶段，中途会重启，属于正常现象</li>
</ul>
<h3 id="系统完善"><a href="#系统完善" class="headerlink" title="系统完善"></a>系统完善</h3><blockquote>
<p>因为有些操作是在系统内完成的，所以只有一个efi不可能安装完成就完美，所以进入系统后要完善系统。</p>
</blockquote>
<h4 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h4><p>挂载EFI分区，终端下输入如下命令重启即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/BrcmFirmwareData.kext /</span>Library/Extensions</span><br><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/BrcmPatchRAM2.kext /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure>
<h4 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h4><p>挂载EFI分区，终端下输入如下命令重启即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/ACPIBatteryManager.kext  /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure>
<h4 id="小太阳"><a href="#小太阳" class="headerlink" title="小太阳"></a>小太阳</h4><ul>
<li>挂载EFI分区，终端下输入如下命令重启<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/AppleBacklightInjector.kext  /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure></li>
<li>设置快捷键，将亮度调节快捷键修改成笔记本键盘相应键位，ThinkPad S1 2017为F5亮度增，F6亮度减。(需要外接键盘才能设置，设置完成后可以拔掉外接键盘)<br>  <img src= "/images/loading.gif" data-lazy-src="/images/a7883fe77213f7236c7b3677e631aadf5737a2ee.jpg"></li>
</ul>
<h4 id="显示器内建以及开启hidpi"><a href="#显示器内建以及开启hidpi" class="headerlink" title="显示器内建以及开启hidpi"></a>显示器内建以及开启hidpi</h4><p>终端输入如下命令执行一建Hidpi脚本并按下图选择即可(感谢xzhih大牛提供脚本)，重启之后，你会发现Hidpi和内建显示器成功完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/ee9bda948796e3d12b9ade6e3e82eab9a089a256.jpg"><br>  <img src= "/images/loading.gif" data-lazy-src="/images/d14a98efc2249b2ec0ddd1ad0215f3b8058d31e2.jpg"></p>
<h2 id="至此，ThinkPad-S1-2017-黑苹果95完美"><a href="#至此，ThinkPad-S1-2017-黑苹果95完美" class="headerlink" title="至此，ThinkPad S1 2017 黑苹果95完美"></a>至此，ThinkPad S1 2017 黑苹果95完美</h2>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>ThinkPad S1 2017</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPad S1 2018 Hackintosh记录+教程+完整EFI分享</title>
    <url>/2018/09/01/ThinkPad_Hackintosh_2018.html</url>
    <content><![CDATA[<blockquote>
<p>朋友购买了ThinkPad S1 2018版本，配置为i5-8250U+uhd620+8g ram+256g 联想定制ssd(NVME)+1080P屏幕。安装黑苹果大体顺利，现将大概过程分享，供同机型的朋友借鉴。<a id="more"></a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>因ThinkPad S1 2018使用的是intel无线网卡，大家都知道intel无线网卡在黑苹果下目前无解，所以替换了Bcm94352z。虽然Bcm94360是免驱的，但是博主不建议笔记本用户选用，因为Bcm94360和普通的ngff无线网卡相比宽了一块，所以笔记本有概率无法安装。</li>
<li>完美程度：显卡+声卡+双网卡+蓝牙完美驱动，USB正常，睡眠唤醒正常，显示器内建正常，HDMI外接屏幕正常，变频7档，小太阳正常，电池正常(感谢黑果小兵和宪武以及其他大牛的帮助)。触摸屏以及电容笔可用，但只能单点触摸。触摸板和小红点可用，但是不支持手势。</li>
<li>因为电脑是朋友的，所以截图不方便，因此本教程尽量多使用命令行方式，各位可以直接复制粘贴。</li>
<li>本教程需要你有一个macOS环境，可以是虚拟机。虚拟机安装macOS百度教程很多，请自学。</li>
<li>安装前要在Windows下准备好安装macOS所需分区。</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="制作安装盘"><a href="#制作安装盘" class="headerlink" title="制作安装盘"></a>制作安装盘</h3><ul>
<li>下载macOS High Sierra 10.13.6镜像，博主建议在App Store下载，下载成功后会保存在Application下。</li>
<li>格式化U盘为Mac OS扩展日志式，U盘名称设置为mac，格式化后会生成两个分区，第一个是EFI分区，用来存放Clover引导，第二个用于写入镜像，格式化U盘如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/7eb9ec5bdd42a032dc9707bd8255427e82618323.jpg"></li>
<li>写入镜像:终端输入如下命令并输入密码即可。<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/Applications/</span>Install\ macOS\ High\ Sierra.app<span class="regexp">/Contents/</span>Resources<span class="regexp">/createinstallmedia --volume /</span>Volumes<span class="regexp">/mac --applicationpath /</span>Applications/Install\ macOS\ High\ Sierra.app</span><br></pre></td></tr></table></figure>
<h3 id="获取博主分享的Clover文件-保存在桌面"><a href="#获取博主分享的Clover文件-保存在桌面" class="headerlink" title="获取博主分享的Clover文件,保存在桌面"></a>获取博主分享的Clover文件,保存在桌面</h3></li>
<li>输入如下命令即可在桌面保存hackintosh文件夹，内含Clover文件夹<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/Desktop</span> &amp;&amp; git clone https:<span class="string">//github.com/bugprogrammer/hackintosh.git</span> &amp;&amp; <span class="keyword">cd</span> hackintosh &amp;&amp; git checkout ThinkPad-S1-2018 </span><br></pre></td></tr></table></figure>
<img src= "/images/loading.gif" data-lazy-src="/images/13d9520b827daa228ded32453ae6b69163965369.jpg"></li>
</ul>
<h3 id="挂载U盘EFI分区，放入Clover引导"><a href="#挂载U盘EFI分区，放入Clover引导" class="headerlink" title="挂载U盘EFI分区，放入Clover引导"></a>挂载U盘EFI分区，放入Clover引导</h3><p>使用Clover Configurator挂载EFI分区，将博主分享的EFI拷贝进去。<br>   <img src= "/images/loading.gif" data-lazy-src="/images/360ffd8a61b894b90505d9f89e798ab259461fd1.jpg"><br>   <img src= "/images/loading.gif" data-lazy-src="/images/f191d798eef6ca014e5f4f3d4df6e817c5dad4ae.jpg"></p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><ul>
<li>U盘启动，进入安装盘</li>
<li>选择语言为简体中文，磁盘工具下抹盘为APFS</li>
<li>点击安装macOS，选择刚才准备好的分区，安装系统</li>
<li>安装系统有两个阶段，中途会重启，属于正常现象</li>
</ul>
<h3 id="系统完善"><a href="#系统完善" class="headerlink" title="系统完善"></a>系统完善</h3><blockquote>
<p>因为有些操作是在系统内完成的，所以只有一个efi不可能安装完成就完美，所以进入系统后要完善系统。</p>
</blockquote>
<h4 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h4><p>挂载EFI分区，终端下输入如下命令重启即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/BrcmFirmwareData.kext /</span>Library/Extensions</span><br><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/BrcmPatchRAM2.kext /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure>
<h4 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h4><p>挂载EFI分区，终端下输入如下命令重启即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/ACPIBatteryManager.kext  /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure>
<h4 id="小太阳"><a href="#小太阳" class="headerlink" title="小太阳"></a>小太阳</h4><ul>
<li>挂载EFI分区，终端下输入如下命令重启<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/AppleBacklightInjector.kext  /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure></li>
<li>设置快捷键，将亮度调节快捷键修改成笔记本键盘相应键位，ThinkPad S1 2017为F5亮度增，F6亮度减。(需要外接键盘才能设置，设置完成后可以拔掉外接键盘)<br>  <img src= "/images/loading.gif" data-lazy-src="/images/a7883fe77213f7236c7b3677e631aadf5737a2ee.jpg"></li>
</ul>
<h4 id="显示器内建以及开启hidpi"><a href="#显示器内建以及开启hidpi" class="headerlink" title="显示器内建以及开启hidpi"></a>显示器内建以及开启hidpi</h4><p>终端输入如下命令执行一建Hidpi脚本并按下图选择即可(感谢xzhih大牛提供脚本)，重启之后，你会发现Hidpi和内建显示器成功完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/ee9bda948796e3d12b9ade6e3e82eab9a089a256.jpg"><br>  <img src= "/images/loading.gif" data-lazy-src="/images/d14a98efc2249b2ec0ddd1ad0215f3b8058d31e2.jpg"></p>
<h2 id="至此，ThinkPad-S1-2018-黑苹果95完美"><a href="#至此，ThinkPad-S1-2018-黑苹果95完美" class="headerlink" title="至此，ThinkPad S1 2018 黑苹果95完美"></a>至此，ThinkPad S1 2018 黑苹果95完美</h2>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>ThinkPad S1 2018</tag>
      </tags>
  </entry>
  <entry>
    <title>关于DRM视频播放以及sidecar和DRM共存的解决方案</title>
    <url>/2019/12/11/about-DRM.html</url>
    <content><![CDATA[<blockquote>
<p>macOS Catalina 10.15发布后，不少小伙伴发现DRM视频播放出现bug。表现为Apple TV+无法播放，Netflix无法用Safari浏览器播放(macOS下只有Safari可以播放Netflix 1080P)。博主研究测试，得以<font color=#A52A2A >部分</font>解决。现发布播放DRM视频以及sidecar和DRM共存的解决方案。<a id="more"></a></p>
</blockquote>
<h1 id="目前支持Hackintosh-DRM的独显-核显DRM不可用"><a href="#目前支持Hackintosh-DRM的独显-核显DRM不可用" class="headerlink" title="目前支持Hackintosh DRM的独显(核显DRM不可用)"></a>目前支持Hackintosh DRM的独显(核显DRM不可用)</h1><p>Vega 56、Vega 64、VII、RX 5700、RX 5700 XT。可以使用完整DRM(Apple TV+/Safari Netflix/Amazon Prime)。RX5xx可以使用Apple TV+，Safari Netflix以及Amazon Prime不可用。<font color=#A52A2A >本文前提是使用以上显卡的任意一款</font></p>
<h1 id="播放DRM视频的解决方案"><a href="#播放DRM视频的解决方案" class="headerlink" title="播放DRM视频的解决方案"></a>播放DRM视频的解决方案</h1><h2 id="无核显用户"><a href="#无核显用户" class="headerlink" title="无核显用户"></a>无核显用户</h2><p>无核显用户只需要把smbios设置为iMac Pro 1,1即可。</p>
<h2 id="有核显用户"><a href="#有核显用户" class="headerlink" title="有核显用户"></a>有核显用户</h2><ul>
<li>Lilu使用v1.4.1版本(<a href="https://github.com/acidanthera/Lilu)%EF%BC%8C">https://github.com/acidanthera/Lilu)，</a> 目前需要手动编译。</li>
<li>Whatevergreen使用v1.3.6版本(<a href="https://github.com/acidanthera/WhateverGreen">https://github.com/acidanthera/WhateverGreen</a> 或 <a href="https://github.com/bugprogrammer/WhateverGreen">https://github.com/bugprogrammer/WhateverGreen</a> 均可)，目前需要手动编译。</li>
<li>boot-args加入shikigva=80。</li>
<li>重启。</li>
</ul>
<h1 id="sidecar和DRM共存的解决方案"><a href="#sidecar和DRM共存的解决方案" class="headerlink" title="sidecar和DRM共存的解决方案"></a>sidecar和DRM共存的解决方案</h1><blockquote>
<p>前提：intel酷睿 6、7、8、9代带有核显的CPU+目前支持Hackintosh DRM的独显(上文有写)。本文以<font color=#A52A2A >9900K+5700XT</font>为例。</p>
</blockquote>
<ul>
<li>BIOS开启核显并设置DVMT为128M，主显卡为独显。</li>
<li>SMBIOS设置为iMac 19,1。</li>
<li>注入如下缓冲帧信息。<br>  <img src= "/images/loading.gif" data-lazy-src="/images/DRM-1.png"></li>
<li>Lilu使用v1.4.1版本(<a href="https://github.com/acidanthera/Lilu)%EF%BC%8C%E7%9B%AE%E5%89%8D%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91%E3%80%82">https://github.com/acidanthera/Lilu)，目前需要手动编译。</a></li>
<li>Whatevergreen使用v1.3.6版本(<a href="https://github.com/acidanthera/WhateverGreen">https://github.com/acidanthera/WhateverGreen</a> 或 <a href="https://github.com/bugprogrammer/WhateverGreen">https://github.com/bugprogrammer/WhateverGreen</a> 均可)，目前需要手动编译。</li>
<li>boot-args加入shikigva=80。</li>
<li>重启。</li>
</ul>
<h1 id="至此，在配置支持的前提下，sidecar和DRM可以共存。核显硬解以及独显DRM均完美。"><a href="#至此，在配置支持的前提下，sidecar和DRM可以共存。核显硬解以及独显DRM均完美。" class="headerlink" title="至此，在配置支持的前提下，sidecar和DRM可以共存。核显硬解以及独显DRM均完美。"></a><font color=#A52A2A >至此，在配置支持的前提下，sidecar和DRM可以共存。核显硬解以及独显DRM均完美。</font></h1>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackintosh for ASRock Z390 Phantom Gaming-ITX/ac+i9-9900K相关问题解决方案</title>
    <url>/2018/11/05/Z390+9900K_Hackintosh.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>你没看错，的确是Z390+9900K黑苹果，博主第一时间海淘测试(价钱不说了),大概率国内首发Z390+9900K黑苹果常见问题解决方案。</p>
</blockquote>
<a id="more"></a>

<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="关机变重启以及睡眠变重启-还没进入睡眠状态就重启"><a href="#关机变重启以及睡眠变重启-还没进入睡眠状态就重启" class="headerlink" title="关机变重启以及睡眠变重启(还没进入睡眠状态就重启)"></a>关机变重启以及睡眠变重启(还没进入睡眠状态就重启)</h3><h4 id="问题成因"><a href="#问题成因" class="headerlink" title="问题成因"></a>问题成因</h4><blockquote>
<p>由于Apple并没有推出搭载Z390芯片组的产品，所以macOS现有版本不能原生支持Z390的nvram。</p>
</blockquote>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><blockquote>
<p>软件模拟nvram</p>
</blockquote>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>按照教程<a href="https://www.bugprogrammer.me/2018/06/29/Build_Clover.html">https://www.bugprogrammer.me/2018/06/29/Build_Clover.html</a> 编译最新版本Clover并安装到系统根目录，安装时务必勾选EmuVariableUefi-64.efi以及RC scripts补丁，如下图。<br><img src= "/images/loading.gif" data-lazy-src="/images/bcd6ee3a667abb6122e6e0f2949780f24239ff9c.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/4815b4ff57c6a9c13e0f241338e2efe20a873e89.jpg"></li>
<li>将cloverx64.efi拷贝到EFI分区下的EFI/CLOVER路径下并覆盖，将EmuVariableUefi-64.efi拷贝到EFI分区下的EFI/CLOVER/drivers64UEFI路径下。</li>
<li>使用Clover Configurator挂载EFI分区并打开config.plist文件，找到Boot-&gt;Arguments并勾选<font color=#A52A2A ><strong>slide=0</strong></font>选项，如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/6dbccfd2934608daf91c88c82fe855fe784b3cb5.jpg"></li>
<li>重启电脑并观察EFI分区下有没有生成nvram.plist文件，如果有，恭喜你成功了，愉快的睡眠，关机吧！！！<br><img src= "/images/loading.gif" data-lazy-src="/images/bf3550f928cc2f9c09b4fc7070df84263589c525.jpg"></li>
</ul>
<h3 id="睡眠正常，唤醒时重启"><a href="#睡眠正常，唤醒时重启" class="headerlink" title="睡眠正常，唤醒时重启"></a>睡眠正常，唤醒时重启</h3><h4 id="问题成因-1"><a href="#问题成因-1" class="headerlink" title="问题成因"></a>问题成因</h4><blockquote>
<p>主板xmp选项影响，内存频率影响。</p>
</blockquote>
<h4 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h4><blockquote>
<p>主板BIOS调节</p>
</blockquote>
<h4 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h4><ul>
<li>关闭BIOS中的xmp选项</li>
</ul>
<h4 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h4><ul>
<li>开启BIOS中的xmp选项，手动调节频率，从高往低调节。比如博主的3600内存条，开启xmp选项，然后从3600调节到3400再调节到3200终于正常。<br><img src= "/images/loading.gif" data-lazy-src="/images/38f6aec51417d2b04576b9abe8e904082f29350d.jpg"></li>
</ul>
<h3 id="声卡无法驱动"><a href="#声卡无法驱动" class="headerlink" title="声卡无法驱动"></a>声卡无法驱动</h3><h4 id="原因排查-通过AppleALC的debug版本进行排查"><a href="#原因排查-通过AppleALC的debug版本进行排查" class="headerlink" title="原因排查(通过AppleALC的debug版本进行排查)"></a>原因排查(通过AppleALC的debug版本进行排查)</h4><ul>
<li>将EFI/CLOVER/kexts/Other下的Lilu.kext以及AppleALC.kext替换成debug版本。</li>
<li>使用Clover Configurator打开EFI/CLOVER下的config.plist，在boot标签里加入-alcdbg参数，如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/bb6d9bc06e1eb89f5ea6c707c7d39faa8ac2b3ec.jpg"></li>
<li>重启电脑。</li>
<li>终端输入如下命令,并观察输出日志。<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span> <span class="built_in">show</span> --predicate &#x27;process == <span class="string">&quot;kernel&quot;</span> AND (eventMessage CONTAINS <span class="string">&quot;AppleALC&quot;</span> OR eventMessage CONTAINS <span class="string">&quot;Lilu&quot;</span>)&#x27; --<span class="built_in">style</span> syslog --source</span><br></pre></td></tr></table></figure></li>
<li>博主电脑报出如下错误，说明声卡的codec revision不被AppleALC支持，至此声卡无法驱动原因排查完毕。<br><img src= "/images/loading.gif" data-lazy-src="/images/4cef17af216f23a89f170a13c6e9f733afc8662f.jpg"></li>
</ul>
<h4 id="解决方案一-Voodoohda方案"><a href="#解决方案一-Voodoohda方案" class="headerlink" title="解决方案一(Voodoohda方案)"></a>解决方案一(Voodoohda方案)</h4><p>下载Voodoohda.kext放入EFI/CLOVER/Other下即可(会有爆音，不建议采用此方法)。<br><a href="https://sourceforge.net/projects/voodoohda/files/VoodooHDA-2.8.8.pkg.zip/download">https://sourceforge.net/projects/voodoohda/files/VoodooHDA-2.8.8.pkg.zip/download</a></p>
<h4 id="解决方案二-cloveralc方案"><a href="#解决方案二-cloveralc方案" class="headerlink" title="解决方案二(cloveralc方案)"></a>解决方案二(cloveralc方案)</h4><ul>
<li>下载cloveralc脚本备用。<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/toleda/</span>audio_CloverALC.git</span><br></pre></td></tr></table></figure></li>
<li>下载FakePCIID备用。<br><a href="https://bitbucket.org/RehabMan/os-x-fake-pci-id/downloads/">https://bitbucket.org/RehabMan/os-x-fake-pci-id/downloads/</a></li>
<li>在macOS High Sierra 10.13.6的镜像里找到原版的AppleHDA.kext备用。</li>
<li>将FakePCIID.kext以及FakePCIID_Intel_HDMI_Audio.kext放入EFI/CLOVER/kexts/Other下。</li>
<li>将10.13.6的AppleHDA替换到10.14的System/Library/Extensions下并用kext Utility工具重建缓存(10.14专属步骤，10.13.6用户跳过)。</li>
<li>打开下载的cloveralc脚本，文件名为audio_cloverALC-130.sh，在下图位置加入如下代码(10.14专属步骤，10.13.6用户跳过)。<br><img src= "/images/loading.gif" data-lazy-src="/images/70dadbce56ef011d83c82ff33b079b76590faff6.jpg"></li>
<li>使用Clover Congifurator注入音频id，博主声卡id为1。<br><img src= "/images/loading.gif" data-lazy-src="/images/26262cd97b32e9f3975e92cb6d5cfd8751ee1fc8.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/95bb5d05a4647695006c3ecce1ed54ac805ff67f.jpg"></li>
<li>确定以上操作无误后，重启电脑。</li>
<li>挂载EFI分区，执行audio_cloverALC-130.sh脚本，按脚本要求执行，脚本运行完成后使用kext Utility工具重建缓存后重启电脑。<br><img src= "/images/loading.gif" data-lazy-src="/images/8d8ac20f0c6831edc44c24c8cf2c7f9674dd646c.jpg"></li>
<li>愉快的使用声卡吧！！！</li>
</ul>
<h4 id="解决方案三-AppleALC方案，博主认为最佳方案，推荐"><a href="#解决方案三-AppleALC方案，博主认为最佳方案，推荐" class="headerlink" title="解决方案三(AppleALC方案，博主认为最佳方案，推荐)"></a>解决方案三(AppleALC方案，博主认为最佳方案，推荐)</h4><ul>
<li>macOS商店下载安装Xcode。</li>
<li>下载AppleALC源码。<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/acidanthera/</span>AppleALC.git</span><br></pre></td></tr></table></figure></li>
<li>下载Lilu.kext的debug版本，并拷贝到AppleALC源码文件夹。<br><a href="https://github.com/acidanthera/Lilu/releases">https://github.com/acidanthera/Lilu/releases</a><br><img src= "/images/loading.gif" data-lazy-src="/images/5af8451dbb09aa96fcd3e0a19d621e7d5f6358fd.jpg"></li>
<li>打开IORegistryExplorer工具，搜索HDA，找到IOHDACodecRevisionID值，如图即为0x100101，转成10进制为1048833。<br><img src= "/images/loading.gif" data-lazy-src="/images/8c4b32a8f1c52d2042862c30a18402e8543bea48.jpg"></li>
<li>打开AppleALC源码文件夹下的Resources文件夹，删掉其他声卡型号的文件夹，只保留当前主板的声卡型号文件夹，即保留alc1220文件夹。<br><img src= "/images/loading.gif" data-lazy-src="/images/4c625d128f744047375a9258316d9b2c91d988f3.jpg"></li>
<li>打开PinConfigs.kext的info.plist，删除其他声卡信息，只保留当前主板的声卡信息，即alc1220。<br><img src= "/images/loading.gif" data-lazy-src="/images/5116d7b08b15be2b52486a9000fff0d635779f1d.jpg"></li>
<li>进入ALC1220文件夹，打开info.plist，修改Revisions值为之前IORegistryExplorer查到的IOHDACodecRevision值的10进制数，即1048833。<br><img src= "/images/loading.gif" data-lazy-src="/images/a0ec8957c76bfcae2efd370694d34b97607c9ce8.jpg"></li>
<li>Xcode打开AppleALC.xcodeproj，编译生成AppleALC.kext，编译教程请Google。本教程主要教授修改思路。</li>
<li>将修改的AppleALC.kext放到EFI/CLOVER/kexts/Other下，Kext Utility重建缓存，重启电脑。</li>
<li>愉快的使用声卡吧！！！</li>
</ul>
<h2 id="2018-11-27更新"><a href="#2018-11-27更新" class="headerlink" title="2018-11-27更新"></a>2018-11-27更新</h2><h3 id="睡眠正常，唤醒变重启"><a href="#睡眠正常，唤醒变重启" class="headerlink" title="睡眠正常，唤醒变重启"></a>睡眠正常，唤醒变重启</h3><h4 id="新版解决方案"><a href="#新版解决方案" class="headerlink" title="新版解决方案"></a>新版解决方案</h4><p>更新最新版本BIOS即可，新版本BIOS解决了这个问题，已经无需调整XMP。目前最新版版本号为1.29，什么？更新完进不去了？卡引导？往下看！！！</p>
<h3 id="更新BIOS后无法进入系统-目前华擎主板中招，解决方案仅限华擎"><a href="#更新BIOS后无法进入系统-目前华擎主板中招，解决方案仅限华擎" class="headerlink" title="更新BIOS后无法进入系统(目前华擎主板中招，解决方案仅限华擎)"></a>更新BIOS后无法进入系统(目前华擎主板中招，解决方案仅限华擎)</h3><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>降级回老版本BIOS，目的是可以进入系统。</li>
<li>使用Clover Configurator挂载EFI分区并打开config.plist文件。在ACPI-&gt;Patches下添加以下补丁即可。如图。<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Comment</span>: Fix AsRock Z<span class="number">390</span> BIOS DSDT Device(RTC) bug</span><br><span class="line"><span class="attribute">Find</span>: A<span class="number">00</span>A<span class="number">9353</span> <span class="number">54415301</span></span><br><span class="line"><span class="attribute">Replace</span>: A<span class="number">00</span>A<span class="number">910</span>A FF<span class="number">0</span>BFFFF </span><br></pre></td></tr></table></figure>
<img src= "/images/loading.gif" data-lazy-src="/images/b41603cdf0f9c80d869d8ac478cdd65a092cf648.jpg"></li>
<li>放心升级新版本BIOS吧，畅通无阻！！！</li>
</ul>
<h3 id="10-14-1和10-14-2-USB-3-0降速为480Mbps"><a href="#10-14-1和10-14-2-USB-3-0降速为480Mbps" class="headerlink" title="10.14.1和10.14.2 USB 3.0降速为480Mbps"></a>10.14.1和10.14.2 USB 3.0降速为480Mbps</h3><h4 id="原因排查"><a href="#原因排查" class="headerlink" title="原因排查"></a>原因排查</h4><p>将usb3.0设备插入usb3.0接口，下载并打开FBPatcher，我们发现所有接口都是HSxx，并没有SSxx，所以usb3.0降速为480Mbps。</p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>划出一个小分区安装10.14.0并搞定usb驱动(10.14.0 usb也不正常的不在本文讨论范围内,本文仅讨论10.14.0 usb正常但是升级到10.14.1 usb降速的情况)</li>
<li>按照<font color=#A52A2A ><strong>@黑果小兵</strong></font>的教程 <strong><a href="https://blog.daliansky.net/Intel-FB-Patcher-tutorial-and-insertion-pose.html">https://blog.daliansky.net/Intel-FB-Patcher-tutorial-and-insertion-pose.html</a></strong> 定制usbports.kext(感谢<font color=#A52A2A ><strong>黑果小兵</font>**提供教程,另外注意要在<font color=#A52A2A >**10.14.0</strong></font>下定制,至关重要)。</li>
<li>进入10.14.1或10.14.2，你会发现usb满血复活。</li>
</ul>
<h2 id="2018-12-24更新"><a href="#2018-12-24更新" class="headerlink" title="2018-12-24更新"></a>2018-12-24更新</h2><h3 id="声卡驱动"><a href="#声卡驱动" class="headerlink" title="声卡驱动"></a>声卡驱动</h3><p>AppleALC官方已经更新了1.3.4版本，直接使用即可，已经无需修改revisionid再自行编译了。下载地址如下：<br><a href="https://github.com/acidanthera/AppleALC/releases">https://github.com/acidanthera/AppleALC/releases</a></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>acrock z390</tag>
        <tag>i9-9900K</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt获取IPv6详细教程</title>
    <url>/2021/05/06/about-openwrt-ipv6.html</url>
    <content><![CDATA[<blockquote>
<p>前几天博主无意间登录光猫发现已经有了IPv6地址并且可以访问ipv6网站，但是自用的openwrt路由器却无法获取到IPv6地址，查阅资料发现大量资料已经过时，博主现在分享自己的解决方案。</p>
</blockquote>
<h1 id="编译支持IPv6的OpenWrt固件"><a href="#编译支持IPv6的OpenWrt固件" class="headerlink" title="编译支持IPv6的OpenWrt固件"></a>编译支持IPv6的OpenWrt固件</h1><blockquote>
<p>博主用的是Lean的openwrt源码编译，GitHub地址如下：<a href="https://github.com/coolsnowwolf/lede%E3%80%82">https://github.com/coolsnowwolf/lede。</a> 具体编译教程原作者写得十分清楚，博主只讲关于IPv6的配置参数。</p>
</blockquote>
<h2 id="make-menuconfig配置-IPv6相关"><a href="#make-menuconfig配置-IPv6相关" class="headerlink" title="make menuconfig配置(IPv6相关)"></a>make menuconfig配置(IPv6相关)</h2><ul>
<li>Extra Packages-&gt;ipv6helper选中</li>
<li>Network-&gt;odhcp6c选中</li>
<li>Network-&gt;odhcpd-ipv6only选中</li>
</ul>
<blockquote>
<p>以上3项做完后即可按照原作者教程编译固件。</p>
</blockquote>
<h1 id="OpenWrt设置"><a href="#OpenWrt设置" class="headerlink" title="OpenWrt设置"></a>OpenWrt设置</h1><ul>
<li>找到网络-&gt;DHCP/DNS-&gt;高级设置-&gt;禁止解析 IPv6 DNS 记录，把默认带的打勾去掉(没错，OpenWrt的脑残默认设置，不解析IPv6！！！)</li>
</ul>
<blockquote>
<p>经过以上的编译以及设置，需要我们做的已经全部完成，正常情况下你已经可以享受IPv6了，什么？能获取到IPv6地址但不能上网？别急，往下看！！！</p>
</blockquote>
<h1 id="可以获取到IPv6地址但是不能上网的解决方案-重点"><a href="#可以获取到IPv6地址但是不能上网的解决方案-重点" class="headerlink" title="可以获取到IPv6地址但是不能上网的解决方案(重点)"></a>可以获取到IPv6地址但是不能上网的解决方案(重点)</h1><ul>
<li>给运营商打电话，让客服把光猫改成桥接，要来PPPoE用户名以及密码，路由器端拨号。(没错，就这么简单)</li>
</ul>
<blockquote>
<p>至此，你已经可以完美享受IPv6了。</p>
</blockquote>
<h1 id="放上两个IPv6的测试网站，用来测试IPv6情况"><a href="#放上两个IPv6的测试网站，用来测试IPv6情况" class="headerlink" title="放上两个IPv6的测试网站，用来测试IPv6情况"></a>放上两个IPv6的测试网站，用来测试IPv6情况</h1><ul>
<li><a href="https://v6t.ipip.net/">https://v6t.ipip.net/</a></li>
<li><a href="https://www.test-ipv6.com/">https://www.test-ipv6.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>OpenWrt</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
        <tag>ipv6</tag>
      </tags>
  </entry>
  <entry>
    <title>关于macOS 10.14.4 18E2034镜像的说明</title>
    <url>/2019/03/27/about-macos-10.14.4-18E2034.html</url>
    <content><![CDATA[<blockquote>
<p>macOS 10.14.4 18E2034是一个特供镜像，博主猜测是iMac 2019的预装镜像(参测而已，因为经测试发现9900K型号仍然不识别，所以。。。)</p>
</blockquote>
<a id="more"></a>

<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><h4 id="新建一个空壳镜像"><a href="#新建一个空壳镜像" class="headerlink" title="新建一个空壳镜像"></a>新建一个空壳镜像</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/Applications/</span>Install\ macOS\ Mojave.app<span class="regexp">/Contents/</span>SharedSupport/</span><br></pre></td></tr></table></figure>
<h4 id="获取镜像下载脚本"><a href="#获取镜像下载脚本" class="headerlink" title="获取镜像下载脚本"></a>获取镜像下载脚本</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">curl</span> https://www.tonymacx<span class="number">86</span>.com/attachments/createinstaller-<span class="number">10</span>-<span class="number">14</span>-<span class="number">4</span>-sb-sh-zip.<span class="number">395290</span>/ -o createInstaller-<span class="number">10</span>.<span class="number">14</span>.<span class="number">4</span>-SB.sh.zip</span><br><span class="line"><span class="attribute">unzip</span> createInstaller-<span class="number">10</span>.<span class="number">14</span>.<span class="number">4</span>-SB.sh.zip</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/e75ea7c233265be8aa47e9548df8c03ba93c6402.jpg"></p>
<h4 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h4><blockquote>
<p>由于下载可能失败,为了避免每次失败后都要重建空壳镜像，我们把脚本中的cp命令加上强制属性-f</p>
</blockquote>
<p><img src= "/images/loading.gif" data-lazy-src="/images/3c35e1b7a49496a405706479ca6efab82865281b.jpg"></p>
<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">./createInstaller-<span class="number">10.14</span>.<span class="number">4</span>-<span class="module-access"><span class="module"><span class="identifier">SB</span>.</span></span>sh</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/a72f6742ed9dbd856a1872f1033e3a9b1a256f56.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/690c70a7ce3805cef14a2e66b0203bccecb7eed7.jpg"></p>
<h3 id="博主的测试以及特供镜像的变化"><a href="#博主的测试以及特供镜像的变化" class="headerlink" title="博主的测试以及特供镜像的变化"></a>博主的测试以及特供镜像的变化</h3><ul>
<li><font color=#A52A2A ><strong>仍然不显示9900K型号。</strong></font></li>
<li><font color=#A52A2A ><strong>z390仍然要EmuVariableUefi-64.efi，否则睡眠、关机都变成重启。</strong></font></li>
<li>AppleGraphicsPowerManagement.kext新增了两个机型，如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/d8799656284986686c88dc71e6b0388fb7a773c3.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/9b9ed14414971bea8690c7ba3dd4b8d4ca632a85.jpg"></li>
<li> AMDRadeonX5000GLDriver.bundle新增<font color=#A52A2A ><strong>Vega48</strong></font>和<font color=#A52A2A ><strong>Vega64X</strong></font>信息<br><img src= "/images/loading.gif" data-lazy-src="/images/e5dd1ea1e2ba4126ba28dd30334b2da8e6c245ed.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/9ac7e58ca2616f651daa617ec5defd17d1a1ab45.jpg"></li>
</ul>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS Catalina 10.15关于sidecar功能的说明</title>
    <url>/2019/06/13/about-sidecar.html</url>
    <content><![CDATA[<blockquote>
<p>macOS 10.15的一个重磅功能是sidecar。就是用iPad作为mac的扩展屏，博主测试了一下，挺好用的。但是在Hackintosh下，并不是随意就能启用sidecar。以下附上博主的启用sidecar教程。<a id="more"></a></p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>目前无核显PC尚未遇到成功案例，可能是黑苹果的bug，也可能是macOS 10.15 beta1的bug。</p>
<h2 id="博主PC配置"><a href="#博主PC配置" class="headerlink" title="博主PC配置"></a>博主PC配置</h2><p>Z390+9900K+Vega56</p>
<h2 id="启用sidecar教程"><a href="#启用sidecar教程" class="headerlink" title="启用sidecar教程"></a>启用sidecar教程</h2><ul>
<li>BIOS中设置主显卡为独显(PCIE)并且设置DVMT为128M，以便独显、核显并存。</li>
<li>修改SMBIOS为iMac 19,1。<br><img src= "/images/loading.gif" data-lazy-src="/images/sidecar-1.png"></li>
<li>勾选Inject intel。</li>
<li>设置FakeID-&gt;IntelGFX为0x3e988086，ig-platform-id为0x3e980003(核显作为加速卡)。也可以设置FakeID-&gt;IntelGFX为0x3e928086，ig-platform-id为0x3e920003，博主测试均通过。<br><img src= "/images/loading.gif" data-lazy-src="/images/sidecar-2.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/sidecar-3.png"></li>
<li>重启电脑测试sidecar。</li>
</ul>
<h2 id="至此sidecar已完美开启，H264以及H265硬解正常，博主测试FCP导出正常。注意：更换SMBIOS后要记得修改usbports中的机型信息。"><a href="#至此sidecar已完美开启，H264以及H265硬解正常，博主测试FCP导出正常。注意：更换SMBIOS后要记得修改usbports中的机型信息。" class="headerlink" title="至此sidecar已完美开启，H264以及H265硬解正常，博主测试FCP导出正常。注意：更换SMBIOS后要记得修改usbports中的机型信息。"></a>至此sidecar已完美开启，H264以及H265硬解正常，博主测试FCP导出正常。注意：更换SMBIOS后要记得修改usbports中的机型信息。</h2><p><img src= "/images/loading.gif" data-lazy-src="/images/sidecar-4.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/sidecar-5.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/sidecar-6.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/sidecar-7.png"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>macOS Catalina 10.15</tag>
        <tag>sidecar</tag>
      </tags>
  </entry>
  <entry>
    <title>关于RX5700XT的驱动方法以及bug解决方案</title>
    <url>/2019/11/02/about-RX5700XT.html</url>
    <content><![CDATA[<blockquote>
<p>AMD Navi显卡在macOS Catalina 10.15.1 beta2中已经正式免驱，博主购入测试，现公布新显卡的驱动方法以及bug解决方案。<a id="more"></a></p>
</blockquote>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>使用DDU卸载原驱动并下载安装官方的RX5700XT的驱动即可。</p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><blockquote>
<p>Linux 5.3起正式加入Navi显卡支持，所以我们要做的就是把Linux内核版本升级到5.3+即可。现提供两种升级内核方法。<font color=#A52A2A >注意，因为当前Linux内核版本低于5.3，所以显示器插入RX5700XT启动Linux会黑屏，博主建议显示器连接核显或使用其它亮机卡操作。</font></p>
</blockquote>
<h2 id="方法一-推荐"><a href="#方法一-推荐" class="headerlink" title="方法一(推荐)"></a>方法一(推荐)</h2><p>利用所使用的Linux发行版本的内置包管理器升级内核。以博主使用的Manjaro为例讲解。使用Manjaro内置的pacman升级内核。</p>
<ul>
<li>查找可用内核<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -Ss linux-headers</span></span><br></pre></td></tr></table></figure></li>
<li>升级内核<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S linuxXY linuxXY-headers (XY表示内核版本号，比如要升级到Linux <span class="number">5</span>.<span class="number">3</span>，则为sudo pacman -S linux<span class="number">53</span> linux<span class="number">53</span>-headers)</span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2>下载Linux 5.3源码编译，具体教程见 <a href="https://www.bugprogrammer.me/2018/09/01/Linux_Kernel_Build.html">https://www.bugprogrammer.me/2018/09/01/Linux_Kernel_Build.html</a></li>
</ul>
<h2 id="升级后可能会丢失无线网卡以及蓝牙驱动，重新安装即可，以博主的bcm94352z为例"><a href="#升级后可能会丢失无线网卡以及蓝牙驱动，重新安装即可，以博主的bcm94352z为例" class="headerlink" title="升级后可能会丢失无线网卡以及蓝牙驱动，重新安装即可，以博主的bcm94352z为例"></a>升级后可能会丢失无线网卡以及蓝牙驱动，重新安装即可，以博主的bcm94352z为例</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S linux-headers</span></span><br><span class="line"><span class="attribute">sudo pacman -S broadcom-wl-dkms</span></span><br></pre></td></tr></table></figure>
<p>重启电脑，wifi蓝牙满血复活。</p>
<h1 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h1><p>macOS Catalina 10.15.1 beta2起支持navi显卡，所以只要升级系统到macOS Catalina 10.15.1 beta2即可。</p>
<h2 id="一些bug的解决方案"><a href="#一些bug的解决方案" class="headerlink" title="一些bug的解决方案"></a>一些bug的解决方案</h2><h3 id="加入whatevergreen黑屏"><a href="#加入whatevergreen黑屏" class="headerlink" title="加入whatevergreen黑屏"></a>加入whatevergreen黑屏</h3><p>在boot-args加入如下参数：agdpmod=pikera即可。</p>
<ul>
<li>Clover设置如下：<br><img src= "/images/loading.gif" data-lazy-src="/images/5700-1.png"></li>
<li>OpenCore设置如下：<br><img src= "/images/loading.gif" data-lazy-src="/images/5700-2.png"></li>
</ul>
<h3 id="全新安装以及Recovery模式画面错位问题的曲线救国方案"><a href="#全新安装以及Recovery模式画面错位问题的曲线救国方案" class="headerlink" title="全新安装以及Recovery模式画面错位问题的曲线救国方案"></a>全新安装以及Recovery模式画面错位问题的曲线救国方案</h3><ul>
<li><p>下载博主提供的修复文件并解压到<font color=#A52A2A >桌面</font><br><a href="https://pan.baidu.com/s/1TRHSydsheliT0vZZmqi6gw">https://pan.baidu.com/s/1TRHSydsheliT0vZZmqi6gw</a></p>
</li>
<li><p>下载官方的macOS Catalina 10.15.1正式版镜像，将Install macOS Catalina.app放到<font color=#A52A2A >应用程序文件夹</font></p>
</li>
</ul>
<h4 id="全新安装画面错位修复"><a href="#全新安装画面错位修复" class="headerlink" title="全新安装画面错位修复"></a>全新安装画面错位修复</h4><ul>
<li><p>执行如下命令修改镜像</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -f <span class="regexp">/Users/</span>wbx<span class="regexp">/Desktop/</span>fix\ <span class="number">5700</span><span class="regexp">/* /</span>Applications<span class="regexp">/Install\ macOS\ Catalina.app/</span>Contents<span class="regexp">/SharedSupport/</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/5700-3.png"></p>
</li>
<li><p>将修改过的镜像写入U盘，全新安装修复完成。</p>
</li>
</ul>
<h4 id="Recovery画面错位修复"><a href="#Recovery画面错位修复" class="headerlink" title="Recovery画面错位修复"></a>Recovery画面错位修复</h4><ul>
<li><p>执行如下命令找到Recovery的分区号</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo diskutil list</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/5700-4.png"></p>
<blockquote>
<p>如图，disk2s3即为Recovery的分区号</p>
</blockquote>
</li>
<li><p>执行如下命令挂载Recovery分区</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> diskutil mount /dev/disk<span class="number">2</span>s<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/5700-5.png"></p>
</li>
<li><p>执行如下命令修改Recovery分区</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> cp -f ~/Desktop/fix\ <span class="number">5700</span>/* /Volumes/Recovery/<span class="number">9</span>D<span class="number">839</span>C<span class="number">6</span>C-F<span class="number">3</span>C<span class="number">0</span>-<span class="number">45</span>A<span class="number">0</span>-<span class="number">9</span>DCF-<span class="number">36</span>CFDF<span class="number">99282</span>E/</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/5700-6.png"></p>
<blockquote>
<p>注意：/Volumes/Recovery下的9D839C6C-F3C0-45A0-9DCF-36CFDF99282E文件夹名称有可能每个人都不一样，注意替换成自己的文件夹名称。</p>
</blockquote>
</li>
<li><p>至此，Recovery分区画面错位修复完成。</p>
</li>
</ul>
<h3 id="关于更新时画面错乱"><a href="#关于更新时画面错乱" class="headerlink" title="关于更新时画面错乱"></a>关于更新时画面错乱</h3><p>因为更新是自动化过程，所以无需修复，只需要等待Apple更新修复bug即可。保留这个bug有助于我们第一时间得知Apple何时修复了画面错位的bug。所以本文对此不做讲解，本文主要解决全新安装以及Recovery环境的画面错位问题。</p>
<h1 id="2019-11-09更新"><a href="#2019-11-09更新" class="headerlink" title="2019-11-09更新"></a>2019-11-09更新</h1><p>macOS Catalina 10.15.2 beta1 19C32e已发布，彻底解决了Installer以及Recovery环境屏幕错乱的问题。但是博主尚未找到下载完整镜像方案，所以上传10.15.2的fix 5700.zip(BaseSystem.dmg以及BaseSystem.chunklist),小伙伴们可以按上文方法重制10.15.1镜像解决全新安装屏幕错乱问题。<br><a href="https://pan.baidu.com/s/1jadKyXjg47NGZtP2MMzhJA">https://pan.baidu.com/s/1jadKyXjg47NGZtP2MMzhJA</a></p>
<h1 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a><font color=#A52A2A >未完待续。。。</font></h1>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>RX5700</tag>
      </tags>
  </entry>
  <entry>
    <title>什么？这辣鸡BIOS竟然不能关闭Secure Boot？教你在开启Secure Boot的情况下安装macOS</title>
    <url>/2019/07/06/clover-with-secure-boot.html</url>
    <content><![CDATA[<h1 id="相关理论"><a href="#相关理论" class="headerlink" title="相关理论"></a>相关理论</h1><h2 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h2><p>BIOS是英文”Basic Input Output System”的缩略语，直译过来后中文名称就是”基本输入输出系统”。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。<a id="more"></a></p>
<h2 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h2><p>UEFI，全称“统一的可扩展固件接口”(Unified Extensible Firmware Interface)， 是一种详细描述全新类型接口的标准。这种接口用于操作系统自动从预启动的操作环境，加载到一种操作系统上，从而使开机程序化繁为简，节省时间。</p>
<h2 id="Secure-Boot"><a href="#Secure-Boot" class="headerlink" title="Secure Boot"></a>Secure Boot</h2><p>Secure Boot只是UEFI的一个部分。两者的关系是局部与整体的关系。Secure Boot的目的，是防止恶意软件侵入。它的做法就是采用密钥。UEFI规定，主板出厂的时候，可以内置一些可靠的公钥。然后，任何想要在这块主板上加载的操作系统或者硬件驱动程序，都必须通过这些公钥的认证。也就是说，这些软件必须用对应的私钥签署过，否则主板拒绝加载。由于恶意软件不可能通过认证，因此就没有办法感染Boot。</p>
<h1 id="在开启Secure-Boot的情况下使用Clover启动macOS以及其他操作系统-如Linux"><a href="#在开启Secure-Boot的情况下使用Clover启动macOS以及其他操作系统-如Linux" class="headerlink" title="在开启Secure Boot的情况下使用Clover启动macOS以及其他操作系统(如Linux)"></a>在开启Secure Boot的情况下使用Clover启动macOS以及其他操作系统(如Linux)</h1><h2 id="准备工作-Windows下操作"><a href="#准备工作-Windows下操作" class="headerlink" title="准备工作(Windows下操作)"></a>准备工作(Windows下操作)</h2><ul>
<li><p>下载并解压Super-UEFIinSecureBoot-Disk(感谢ValdikSS开发工具)。<br><a href="https://github.com/ValdikSS/Super-UEFIinSecureBoot-Disk/releases/download/3/Super-UEFIinSecureBoot-Disk_minimal_v3.zip">https://github.com/ValdikSS/Super-UEFIinSecureBoot-Disk/releases/download/3/Super-UEFIinSecureBoot-Disk_minimal_v3.zip</a></p>
</li>
<li><p>下载etcher<br><a href="https://github.com/balena-io/etcher/releases/download/v1.5.51/balenaEtcher-Portable-1.5.51.exe">https://github.com/balena-io/etcher/releases/download/v1.5.51/balenaEtcher-Portable-1.5.51.exe</a></p>
</li>
<li><p>准备一个U盘并备份文件，用etcher将Super-UEFIinSecureBoot-Disk写入U盘。<br><img src= "/images/loading.gif" data-lazy-src="/images/secure-boot-1.png"></p>
</li>
</ul>
<h2 id="实现教程"><a href="#实现教程" class="headerlink" title="实现教程"></a>实现教程</h2><blockquote>
<p>现在请在BIOS中开启Secure Boot选项并且重启进入Windows操作。</p>
</blockquote>
<h3 id="注册证书"><a href="#注册证书" class="headerlink" title="注册证书"></a>注册证书</h3><p>使用做好的U盘启动电脑，按照图示完成证书注册。(出现黑色的grub2界面表示注册成功)<br><img src= "/images/loading.gif" data-lazy-src="/images/secure-boot-2.png"></p>
<h3 id="集成Clover"><a href="#集成Clover" class="headerlink" title="集成Clover"></a>集成Clover</h3><ul>
<li><p>将CLOVER文件夹拷贝到U盘的EFI文件夹下，与BOOT以及grub文件夹同级。<br><img src= "/images/loading.gif" data-lazy-src="/images/secure-boot-3.png"></p>
</li>
<li><p>打开Clover文件夹将Cloverx64.efi文件重命名为grubx64_real.efi。<br><img src= "/images/loading.gif" data-lazy-src="/images/secure-boot-4.png"></p>
</li>
<li><p>打开BOOT文件夹备份grubx64_real.efi文件，并将Clover文件夹下的grubx64_real.efi文件拷贝到BOOT文件夹下。<br><img src= "/images/loading.gif" data-lazy-src="/images/secure-boot-5.png"></p>
</li>
<li><p>重启电脑，并用U盘引导。</p>
</li>
</ul>
<h1 id="是时候看看成果了！"><a href="#是时候看看成果了！" class="headerlink" title="是时候看看成果了！"></a>是时候看看成果了！</h1><p><img src= "/images/loading.gif" data-lazy-src="/images/secure-boot-6.png"></p>
<h1 id="最后别忘了将USB的引导移到硬盘中。"><a href="#最后别忘了将USB的引导移到硬盘中。" class="headerlink" title="最后别忘了将USB的引导移到硬盘中。"></a>最后别忘了将USB的引导移到硬盘中。</h1><h1 id="关于后续更新Clover的问题"><a href="#关于后续更新Clover的问题" class="headerlink" title="关于后续更新Clover的问题"></a>关于后续更新Clover的问题</h1><p>下载新版本的Clover，将cloverx64.efi重命名为grubx64_real.efi并覆盖EFI中Clover文件夹与BOOT文件夹中的同名文件。</p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>Secure Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>修复OpenCore在较新主板上引导Linux失败</title>
    <url>/2020/04/03/fix-boot-linux-with-opencore.html</url>
    <content><![CDATA[<blockquote>
<p>自从OpenCore推出以来，一直存在一个bug，在较新主板上引导Linux会失败，无法加载内核，现在已经可以解决。<a id="more"></a></p>
</blockquote>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li><p>编译最新OpenCore(建议使用HackintoshBuild工具)或从以下链接下载<br><a href="https://downloads.bugprogrammer.me/OpenCore/OpenCore-0.5.7-RELEASE.zip">OpenCore-0.5.7-RELEASE.zip</a></p>
</li>
<li><p>替换bootx64.efi OpenCore.efi OpenRuntime.efi</p>
</li>
<li><p>修改config.plist<br>Booter-&gt;Quirks-&gt;SyncRuntimePermissions-&gt;Yes<br><img src= "/images/loading.gif" data-lazy-src="/images/Linux.png"></p>
</li>
</ul>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>最近有人提到新版本OC启动Windows会失败(集中在Skylake平台)，博主没有遇到，请小伙伴们注意下，博主会抽空跟进最新情况。相关issue如下:<br><a href="https://github.com/acidanthera/bugtracker/issues/491">https://github.com/acidanthera/bugtracker/issues/491</a></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>macOS Catalina 10.15</tag>
        <tag>OpenCore</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ASRock Z390 Phantom Gaming-ITX使用BootCamp切换双系统注意事项</title>
    <url>/2020/04/04/bootcamp-about-z390.html</url>
    <content><![CDATA[<blockquote>
<p>博主为了方便使用Linux一直是以grub作为主引导器(grub-&gt;OC)，最近OC解决了Linux引导问题，所以换回OC作为主引导器。摸索了一下，实现了原生NVRAM+BootCamp双系统切换。<a id="more"></a></p>
</blockquote>
<h1 id="实现教程"><a href="#实现教程" class="headerlink" title="实现教程"></a>实现教程</h1><h2 id="原生NVRAM"><a href="#原生NVRAM" class="headerlink" title="原生NVRAM"></a>原生NVRAM</h2><ul>
<li><p>加入并在config.plist里启用如下SSDT<br><a href="https://downloads.bugprogrammer.me/SSDT/SSDT-PMC.aml">SSDT-PMC.aml</a></p>
</li>
<li><p>修改config.plist</p>
</li>
<li><p>NVRAM-&gt;LegacyEnable-&gt;No</p>
</li>
<li><p>NVRAM-&gt;LegacyOverwrite-&gt;No</p>
</li>
<li><p>NVRAM-&gt;WriteFlash-&gt;Yes</p>
</li>
<li><p>Booter-&gt;Quirks-&gt;DisableVariableWrite-&gt;No</p>
</li>
</ul>
<h2 id="BootCamp切换"><a href="#BootCamp切换" class="headerlink" title="BootCamp切换"></a>BootCamp切换</h2><ul>
<li><p>修改config.plist</p>
</li>
<li><p>PlatformInfo-&gt;Generic-&gt;AdviseWindows-&gt;Yes</p>
</li>
<li><p>UEFI-&gt;RequestBootVarRouting-&gt;Yes</p>
</li>
<li><p>Windows下安装BootCamp软件，重启。</p>
</li>
<li><p>如果D盘消失，请使用傲梅分区助理取消D盘隐藏。(<font color=#A52A2A ><strong>注意：一定要使用傲梅分区助理，博主测试其他分区工具重启后D盘会再次消失</strong></font>)</p>
</li>
</ul>
<h2 id="隐藏OC引导界面"><a href="#隐藏OC引导界面" class="headerlink" title="隐藏OC引导界面"></a>隐藏OC引导界面</h2><ul>
<li>修改config.plist</li>
<li>Misc-&gt;Boot-&gt;ShowPicker-&gt;No</li>
</ul>
<h1 id="至此，你已经可以使用BootCamp切换双系统，体验类似白苹果。"><a href="#至此，你已经可以使用BootCamp切换双系统，体验类似白苹果。" class="headerlink" title="至此，你已经可以使用BootCamp切换双系统，体验类似白苹果。"></a>至此，你已经可以使用BootCamp切换双系统，体验类似白苹果。</h1>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>macOS Catalina 10.15</tag>
        <tag>OpenCore</tag>
        <tag>BootCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>原版Whatevergreen实现核显最高频率(部分主板不支持),魔改版本停更</title>
    <url>/2020/03/24/fix-igpu-with-vit9696-weg.html</url>
    <content><![CDATA[<blockquote>
<p>Whatevergreen原作者更新了1.3.8版本，开始支持GuC Firmware载入，实现核显满血运行(部分主板不支持),效果完全等同于魔改版本，故魔改停更。现发布原版Whatevergreen实现核显满血教程。<a id="more"></a></p>
</blockquote>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul>
<li>下载并替换以下kexts<br><a href="https://downloads.bugprogrammer.me/Kexts/WhateverGreen-1.3.8-RELEASE.zip">WhateverGreen-1.3.8-RELEASE.zip</a><br><a href="https://downloads.bugprogrammer.me/Kexts/Lilu-1.4.3-RELEASE.zip">Lilu-1.4.3-RELEASE.zip</a></li>
<li>boot-args下加入igfxfw=2参数</li>
<li>重启生效</li>
</ul>
<h3 id="哪些主板不支持"><a href="#哪些主板不支持" class="headerlink" title="哪些主板不支持"></a>哪些主板不支持</h3><blockquote>
<p>已知z370不支持</p>
</blockquote>
<h4 id="如何确定自己的主板是否支持加载GuC"><a href="#如何确定自己的主板是否支持加载GuC" class="headerlink" title="如何确定自己的主板是否支持加载GuC"></a>如何确定自己的主板是否支持加载GuC</h4><ul>
<li>按照以上教程操作</li>
<li>-v重启，如出现下图则不支持<br><img src= "/images/loading.gif" data-lazy-src="/images/guc.png"></li>
</ul>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p><img src= "/images/loading.gif" data-lazy-src="/images/weg.png"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>macOS Catalina 10.15</tag>
        <tag>OpenCore</tag>
        <tag>weg</tag>
      </tags>
  </entry>
  <entry>
    <title>博主魔改版Whatevergreen解析，还你正常核显频率(1.2g)</title>
    <url>/2019/10/03/fix-igpu-with-weg.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章是给台式机用户看的，高度依赖Whatevergreen缓冲帧补丁的小伙伴请绕行。<a id="more"></a></p>
<h1 id="事件起因"><a href="#事件起因" class="headerlink" title="事件起因"></a>事件起因</h1><p>前几天细心的群友发现了一个bug，在加入Whatevergreen的情况下，核显频率会稳定在0.5g左右，远低于正常值1.2g，经排查，发现是Whatevergreen导致的问题。</p>
<h1 id="为什么不选择删除Whatevergreen"><a href="#为什么不选择删除Whatevergreen" class="headerlink" title="为什么不选择删除Whatevergreen"></a>为什么不选择删除Whatevergreen</h1><p>博主已经测试过删掉Whatevergreen的情况，并不完美，体现如下。</p>
<ul>
<li><p>AGDP patch时灵时不灵<br>博主测试了加入AGDP patch解决dp花屏的方案，时灵时不灵，在系统更新，安装器，recovery等环境下100%失效，OpenCore以及Clover都已经实测，时灵时不灵。</p>
</li>
<li><p>核显型号名称要手动注入<br>Whatevergreen内置型号识别功能，id和型号对应，比如3E980003-&gt;Intel UHD Graphics 630。所以删掉Whatevergreen会导致核显型号显示错误，要手动注入Device-&gt;model属性。</p>
</li>
<li><p>重命名补丁要手动添加<br>Whatevergreen内置change GFX0 to IGPU,change PEGP to GFX0,change HECI to IMEI,change MEI to IMEI等补丁，去掉后这些要手动添加。</p>
</li>
</ul>
<h1 id="博主修改的Whatevergreen改了哪些内容"><a href="#博主修改的Whatevergreen改了哪些内容" class="headerlink" title="博主修改的Whatevergreen改了哪些内容"></a>博主修改的Whatevergreen改了哪些内容</h1><ul>
<li>删除igfx(核显)相关补丁。</li>
<li>删除Nvidia相关补丁。</li>
<li>删除Shiki相关功能。</li>
<li>保留AGDP补丁。</li>
<li>保留基础重命名补丁。</li>
<li>保留型号对应识别功能。</li>
<li>保留紫线移除补丁。</li>
</ul>
<h1 id="如何使用博主修改的Whatevergreen"><a href="#如何使用博主修改的Whatevergreen" class="headerlink" title="如何使用博主修改的Whatevergreen"></a>如何使用博主修改的Whatevergreen</h1><ul>
<li>Bios主显卡设置成独显，DVMT 128M。</li>
<li>移除change GFX0 to IGPU,change PEGP to GFX0,change HECI to IMEI,change MEI to IMEI等补丁。</li>
<li>移除显卡相关的SSDT。</li>
<li>加入Whatevergreen(Lilu要求1.3.8)。</li>
</ul>
<h1 id="修改版Whatevergreen-Github地址如下"><a href="#修改版Whatevergreen-Github地址如下" class="headerlink" title="修改版Whatevergreen Github地址如下"></a>修改版Whatevergreen Github地址如下</h1><p><a href="https://github.com/bugprogrammer/WhateverGreen">https://github.com/bugprogrammer/WhateverGreen</a></p>
<h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><p>如图，核显性能测试如下<br><img src= "/images/loading.gif" data-lazy-src="/images/weg.png"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>macOS Catalina 10.15</tag>
        <tag>OpenCore</tag>
        <tag>weg</tag>
      </tags>
  </entry>
  <entry>
    <title>修复OpenCore 0.5.3关于本机不显示内存教程</title>
    <url>/2019/12/04/fix-showmemory.html</url>
    <content><![CDATA[<blockquote>
<p>最近的OpenCore版本出现了一个bug，关于本机处不显示内存，博主研究了一下，现在发布解决方案。<a id="more"></a></p>
</blockquote>
<h1 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h1><p>OpenCore config.plist文件中的SMBIOS部分填写完整，比较麻烦。博主并不推荐。</p>
<h1 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li><p>注册GitHub账户。</p>
</li>
<li><p>AppStore安装Xcode。</p>
</li>
<li><p>终端运行如下命令并按提示安装命令行工具。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>
<h2 id="修复教程-以iMac-19-1机型为例讲解"><a href="#修复教程-以iMac-19-1机型为例讲解" class="headerlink" title="修复教程(以iMac 19,1机型为例讲解)"></a>修复教程(以iMac 19,1机型为例讲解)</h2></li>
<li><p>fork如下项目到<font color=#A52A2A >自己</font>的仓库<br><a href="https://github.com/acidanthera/MacInfoPkg">https://github.com/acidanthera/MacInfoPkg</a><br><img src= "/images/loading.gif" data-lazy-src="/images/memory-1.png"></p>
</li>
<li><p>从<font color=#A52A2A >自己</font>的仓库(比如博主的仓库<a href="https://github.com/bugprogrammer/MacInfoPkg">https://github.com/bugprogrammer/MacInfoPkg</a>) 下载MacInfoPkg源码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/bugprogrammer/</span>MacInfoPkg</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/memory-2.png"></p>
</li>
<li><p>打开iMac 19,1的数据文件<font color=#A52A2A >IM191.yaml</font>，并按下图修改保存。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/Desktop/</span>MacInfoPkg<span class="regexp">/DataBase/i</span>Mac</span><br><span class="line">open IM191.yaml</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/memory-3.png"></p>
</li>
<li><p>打开<font color=#A52A2A >AutoGenerated.c</font>文件，搜索iMac19,1，并按下图修改保存。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/Desktop/</span>MacInfoPkg<span class="regexp">/Library/</span>MacInfoLib</span><br><span class="line">open AutoGenerated.c</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/memory-4.png"></p>
</li>
<li><p>将修改好的MacInfoPkg提交到GitHub</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/Desktop/M</span>acInfoPkg</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;test&#x27;</span></span><br><span class="line">git <span class="keyword">push</span> origin master</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/memory-5.png"></p>
</li>
<li><p>获取OpenCorePkg源码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/acidanthera/</span>OpenCorePkg.git</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/memory-6.png"></p>
</li>
<li><p>打开macbuild.tool，按下图替换MacInfoPkg的链接(替换成我们自己仓库的ManInfoPkg)</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">open -e ~<span class="regexp">/Desktop/</span>OpenCorePkg/macbuild.tool</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/memory-7.png"></p>
</li>
<li><p>编译OpenCore</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/Desktop/OpenCorePkg</span></span><br><span class="line"><span class="string">./macbuild.tool</span></span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/memory-8.png"></p>
</li>
<li><p>打开<font color=#A52A2A >Desktop/OpenCorePkg/Binaries/RELEASE</font>路径，找到编译好的OpenCore，替换，重启</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">open ~<span class="regexp">/Desktop/</span>OpenCorePkg<span class="regexp">/Binaries/</span>RELEASE</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/memory-9.png"></p>
</li>
</ul>
<h1 id="至此，关于本机内存不显示的bug已完美修复"><a href="#至此，关于本机内存不显示的bug已完美修复" class="headerlink" title="至此，关于本机内存不显示的bug已完美修复"></a>至此，关于本机内存不显示的bug已完美修复</h1><p><img src= "/images/loading.gif" data-lazy-src="/images/memory-10.png"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>博主github Hackintosh仓库公开以及使用方法</title>
    <url>/2019/05/23/github-hackintosh.html</url>
    <content><![CDATA[<p>为了方便大家安装macOS，博主将测试过的机型的Clover文件整理并发布至github，地址为<strong><a href="https://github.com/bugprogrammer/hackintosh">https://github.com/bugprogrammer/hackintosh</a></strong> <strong><font color=#A52A2A >注意:仓库中所有机型都是博主亲自安装并测试过的机型。</strong></font><a id="more"></a></p>
<blockquote>
<p>由于部分用户认为git操作较为麻烦，需要学习。所以博主提供了自动化脚本方案，几乎自动获取Clover。脚本支持Windows、macOS、Ubuntu。</p>
</blockquote>
<h2 id="脚本使用方法"><a href="#脚本使用方法" class="headerlink" title="脚本使用方法"></a>脚本使用方法</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><ul>
<li>点击如下链接下载git。<br><a href="https://github.com/git-for-windows/git/releases/download/v2.22.0.windows.1/Git-2.22.0-64-bit.exe">https://github.com/git-for-windows/git/releases/download/v2.22.0.windows.1/Git-2.22.0-64-bit.exe</a></li>
<li>按默认设置安装即可。</li>
</ul>
<h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><p>打开git-bash <strong><font color=#A52A2A >(注意一定要用git-bash)，执行如下命令即可</font></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/bugprogrammer/hackintosh/master/get-clover.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>终端输入如下命令即可 <strong><font color=#A52A2A >(注意脚本中绿字提示)</font></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/bugprogrammer/hackintosh/master/get-clover.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>终端输入如下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/bugprogrammer/hackintosh/master/get-clover.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="脚本使用截图-以macOS为例"><a href="#脚本使用截图-以macOS为例" class="headerlink" title="脚本使用截图(以macOS为例)"></a>脚本使用截图(以macOS为例)</h2><p><img src= "/images/loading.gif" data-lazy-src="/images/git-hackintosh-1.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/git-hackintosh-2.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/git-hackintosh-3.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/git-hackintosh-4.png"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>无核显开启sidecar方法</title>
    <url>/2019/11/24/fix-sidecar-without-igpu.html</url>
    <content><![CDATA[<blockquote>
<p>之前<font color=#A52A2A >@fang2018</font>发布了一个相关教程，地址如下:<font color=#A52A2A ><a href="https://fangf.cc/2019/10/14/noneigpusidecar/">https://fangf.cc/2019/10/14/noneigpusidecar/</a></font>, 现在随着Whatevergreen的更新，之前的方法已经不再适用。现在发布新教程。</p>
</blockquote>
<a id="more"></a>

<h1 id="无核显开启sidecar教程"><a href="#无核显开启sidecar教程" class="headerlink" title="无核显开启sidecar教程"></a>无核显开启sidecar教程</h1><ul>
<li>smbios设置成iMac19,1或iMac18,3(绝对不能用iMac Pro 1,1或Mac Pro 7,1)</li>
<li>Lilu使用v1.3.9版本(<a href="https://github.com/acidanthera/Lilu">https://github.com/acidanthera/Lilu</a>)</li>
<li>Whatevergreen使用v1.3.5版本(<a href="https://github.com/acidanthera/WhateverGreen">https://github.com/acidanthera/WhateverGreen</a> 或 <a href="https://github.com/bugprogrammer/WhateverGreen">https://github.com/bugprogrammer/WhateverGreen</a> 均可)</li>
<li>boot-args加入shikigva=16</li>
<li>重启</li>
</ul>
<h1 id="至此，您的sidecar功能已经可用。"><a href="#至此，您的sidecar功能已经可用。" class="headerlink" title="至此，您的sidecar功能已经可用。"></a>至此，您的sidecar功能已经可用。</h1>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>sidecar</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS Catalina 10.15目前情况(持续更新)</title>
    <url>/2019/06/04/hackintosh-10.15.html</url>
    <content><![CDATA[<p>Apple的WWDC2019已经结束，为我们带来了macOS 10.15、MacPro等出色产品。博主连夜测试了10.15在PC机上的运行情况，现在梳理如下(持续更新)。<a id="more"></a></p>
<h2 id="BootLoader"><a href="#BootLoader" class="headerlink" title="BootLoader"></a>BootLoader</h2><p>OpenCore</p>
<h2 id="完美程度"><a href="#完美程度" class="headerlink" title="完美程度"></a>完美程度</h2><h3 id="以下功能完美"><a href="#以下功能完美" class="headerlink" title="以下功能完美"></a>以下功能完美</h3><ul>
<li>独显、声卡、核显、有线网络、Siri</li>
<li>睡眠唤醒</li>
<li>原生电源</li>
<li>AGPM</li>
<li>硬解</li>
<li>USB</li>
</ul>
<h3 id="以下功能暂不可用"><a href="#以下功能暂不可用" class="headerlink" title="以下功能暂不可用"></a>以下功能暂不可用</h3><ul>
<li>Wifi</li>
<li>蓝牙</li>
</ul>
<h2 id="系统截图"><a href="#系统截图" class="headerlink" title="系统截图"></a>系统截图</h2><p><img src= "/images/loading.gif" data-lazy-src="/images/10.15-1.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-2.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-3.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-4.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-5.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-6.png"></p>
<h2 id="第一次更新"><a href="#第一次更新" class="headerlink" title="第一次更新"></a>第一次更新</h2><p>跟进Clover测试，测试结果同OpenCore。</p>
<h2 id="第二次更新"><a href="#第二次更新" class="headerlink" title="第二次更新"></a>第二次更新</h2><p>Wifi终于正常(BCM94352z)<br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-7.png"></p>
<h3 id="关于wifi的说明"><a href="#关于wifi的说明" class="headerlink" title="关于wifi的说明"></a>关于wifi的说明</h3><p>经过测试，目前在10.15下，AirportBrcmFixup.kext不可用，放入会内核崩溃，所以换用FakePCIID+FakePCIID_Broadcom_WiFi.kext方案。</p>
<h2 id="第三次更新"><a href="#第三次更新" class="headerlink" title="第三次更新"></a>第三次更新</h2><p>蓝牙终于正常了。。。至此，10.15已基本完美。注意，蓝牙要使用BrcmBluetoothInjector.kext驱动。<br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-8.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>升级Clover版本到最新或使用OpenCore引导(可以自己编译)，编译教程见<br><a href="https://www.bugprogrammer.me/2018/06/29/Build_Clover.html">https://www.bugprogrammer.me/2018/06/29/Build_Clover.html</a></li>
<li>自编译最新版Lilu以及Lilu插件(如：AppleALC等)</li>
<li>Wifi使用FakePCIID+FakePCIID_Broadcom_WiFi.kext驱动。</li>
<li>蓝牙使用BrcmBluetoothInjector.kext驱动(博主已将其数据集成到FakeSMC)。</li>
</ul>
<h2 id="更新Z390-itx-vega56-bcm94352z支持10-15的Clover文件"><a href="#更新Z390-itx-vega56-bcm94352z支持10-15的Clover文件" class="headerlink" title="更新Z390-itx+vega56+bcm94352z支持10.15的Clover文件"></a>更新Z390-itx+vega56+bcm94352z支持10.15的Clover文件</h2><p>已经上传到博主github的Hackintosh仓库，获取Clover方法见<br><a href="https://www.bugprogrammer.me/2019/05/23/github-hackintosh.html">https://www.bugprogrammer.me/2019/05/23/github-hackintosh.html</a></p>
<h2 id="2019-06-07更新"><a href="#2019-06-07更新" class="headerlink" title="2019-06-07更新"></a>2019-06-07更新</h2><p>截至目前，基于最新源码编译的AirportBrcmFixup 2.0.2版本已经可用。原作者Changelog如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-9.png"></p>
<h2 id="2019-09-24更新"><a href="#2019-09-24更新" class="headerlink" title="2019-09-24更新"></a>2019-09-24更新</h2><p>10.15下想要让蓝牙更稳定推荐使用 headkaze修改编译的OS-X-BrcmPatchRAM，GitHub地址如下：<a href="https://github.com/headkaze/OS-X-BrcmPatchRAM/releases">https://github.com/headkaze/OS-X-BrcmPatchRAM/releases</a><br><img src= "/images/loading.gif" data-lazy-src="/images/10.15-10.png"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>macOS Catalina 10.15</tag>
        <tag>OpenCore</tag>
      </tags>
  </entry>
  <entry>
    <title>ASUS N550JV Hackintosh记录+教程+完整EFI分享</title>
    <url>/2019/01/29/hackintosh-for-asus-n550jv.html</url>
    <content><![CDATA[<blockquote>
<p>朋友的asus-n550jv笔记本，配置为i7-4700HQ+hd4600+gt750M(已屏蔽)+8g ram+256g ssd(sata)+1T hdd+1080P屏幕。安装黑苹果大体顺利，现将大概过程分享，供同机型的朋友借鉴。<a id="more"></a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>asus-n550jv原机自带ar9485无线网卡，驱动不完美，所以更换无线网卡为bcm94352hmb。</li>
<li>完美程度：显卡+声卡+双网卡+蓝牙完美驱动，USB正常，睡眠唤醒正常，显示器内建正常，<font color=#A52A2A ><strong>HDMI外接屏幕无条件测试，</strong></font>变频12档，小太阳正常，电池正常(感谢黑果小兵和宪武以及其他大牛的帮助)。键盘背光调节正常，<font color=#A52A2A ><strong>触摸板空白。</strong></font></li>
<li>因为电脑是朋友的，所以截图不方便，因此本教程尽量多使用命令行方式，各位可以直接复制粘贴。<font color=#A52A2A ><strong>一部分图片是在博主电脑截图的。</strong></font></li>
<li>本教程需要你有一个macOS环境，可以是虚拟机。虚拟机安装macOS百度教程很多，请自学。</li>
<li>安装前要在Windows下准备好安装macOS所需分区。</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="制作安装盘"><a href="#制作安装盘" class="headerlink" title="制作安装盘"></a>制作安装盘</h3><ul>
<li>下载macOS Mojave 10.14.3镜像，博主建议在App Store下载，下载成功后会保存在Application下。</li>
<li>格式化U盘为Mac OS扩展日志式，U盘名称设置为mac，格式化后会生成两个分区，第一个是EFI分区，用来存放Clover引导，第二个用于写入镜像，格式化U盘如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/9e40ae2bc90d3a5d217d5c603bddcc6a067e7da3.jpg"></li>
<li>写入镜像:终端输入如下命令并输入密码即可。<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/Applications/</span>Install\ macOS\ Mojave.app<span class="regexp">/Contents/</span>Resources<span class="regexp">/createinstallmedia --volume /</span>Volumes<span class="regexp">/mac --applicationpath /</span>Applications/Install\ macOS\ Mojave.app</span><br></pre></td></tr></table></figure>
<h3 id="获取博主分享的Clover文件-保存在桌面"><a href="#获取博主分享的Clover文件-保存在桌面" class="headerlink" title="获取博主分享的Clover文件,保存在桌面"></a>获取博主分享的Clover文件,保存在桌面</h3></li>
<li>输入如下命令即可在桌面保存hackintosh文件夹，内含Clover文件夹<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/Desktop</span> &amp;&amp; git clone https:<span class="string">//github.com/bugprogrammer/hackintosh.git</span> &amp;&amp; <span class="keyword">cd</span> hackintosh &amp;&amp; git checkout asus-n550jv-bcm94352hmb </span><br></pre></td></tr></table></figure>
<img src= "/images/loading.gif" data-lazy-src="/images/b33c82ed0209fa970c9094c3ee8f034313e1a7bd.jpg"></li>
</ul>
<h3 id="挂载U盘EFI分区，放入Clover引导"><a href="#挂载U盘EFI分区，放入Clover引导" class="headerlink" title="挂载U盘EFI分区，放入Clover引导"></a>挂载U盘EFI分区，放入Clover引导</h3><p>使用Clover Configurator挂载EFI分区，将博主分享的EFI拷贝进去。<br>   <img src= "/images/loading.gif" data-lazy-src="/images/0aae5eb850ea4d2b3f73db2ec30fae9eb9ec2e8d.jpg"><br>   <img src= "/images/loading.gif" data-lazy-src="/images/fe03e90e9aad66d294b924163010f84754c00400.jpg"></p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><ul>
<li>U盘启动，进入安装盘</li>
<li>选择语言为简体中文，磁盘工具下抹盘为APFS</li>
<li>点击安装macOS，选择刚才准备好的分区，安装系统</li>
<li>安装系统有两个阶段，中途会重启，属于正常现象</li>
</ul>
<h3 id="系统完善"><a href="#系统完善" class="headerlink" title="系统完善"></a>系统完善</h3><blockquote>
<p>因为有些操作是在系统内完成的，所以只有一个efi不可能安装完成就完美，所以进入系统后要完善系统。</p>
</blockquote>
<h4 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h4><p>挂载EFI分区，终端下输入如下命令重启即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/BrcmFirmwareData.kext /</span>Library/Extensions</span><br><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/BrcmPatchRAM2.kext /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure>
<h4 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h4><p>挂载EFI分区，终端下输入如下命令重启即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/ACPIBatteryManager.kext  /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure>
<h4 id="小太阳"><a href="#小太阳" class="headerlink" title="小太阳"></a>小太阳</h4><ul>
<li>挂载EFI分区，终端下输入如下命令重启<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -Rf <span class="regexp">/Volumes/</span>EFI<span class="regexp">/EFI/</span>CLOVER<span class="regexp">/kexts/</span>Other<span class="regexp">/AppleBacklightInjector.kext  /</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo chmod -Rf <span class="number">755</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo chown -Rf <span class="number">0</span>:<span class="number">0</span> <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/PrelinkedKernels/</span>*</span><br><span class="line">sudo rm -Rf <span class="regexp">/System/</span>Library<span class="regexp">/Caches/</span>com.apple.kext.caches/*</span><br><span class="line">sudo touch -f <span class="regexp">/System/</span>Library/Extensions</span><br><span class="line">sudo touch -f <span class="regexp">/Library/</span>Extensions</span><br><span class="line">sudo kextcache -Boot -U /</span><br></pre></td></tr></table></figure></li>
<li>设置快捷键，将亮度调节快捷键修改成笔记本键盘相应键位，ASUS-N550JV为F5亮度减，F6亮度增。(需要外接键盘才能设置，设置完成后可以拔掉外接键盘)<br>  <img src= "/images/loading.gif" data-lazy-src="/images/f202487644f2be79b6fde537243e318c8797ae88.jpg"></li>
</ul>
<h2 id="至此，ASUS-N550JV-黑苹果95完美"><a href="#至此，ASUS-N550JV-黑苹果95完美" class="headerlink" title="至此，ASUS-N550JV 黑苹果95完美"></a>至此，ASUS-N550JV 黑苹果95完美</h2>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>ASUS N550JV</tag>
      </tags>
  </entry>
  <entry>
    <title>美化你的shell,macOS下安装zsh和neofetch教程(Unix/Linux也适用)</title>
    <url>/2018/05/11/install-zsh.html</url>
    <content><![CDATA[<p>最近在使用Hackintosh，发现macOS自带的shell并不好用，所以安装了被誉为终极shell的zsh，方法整理如下：<a id="more"></a> </p>
<h3 id="确认包管理器"><a href="#确认包管理器" class="headerlink" title="确认包管理器"></a>确认包管理器</h3><blockquote>
<p>unix以及类unix(如Linux及其发行版)下都有对应的包管理器,常见的包管理器如下：macOS下为HomeBrew，Debian/Ubuntu为apt，Fedora为yum或dnf，Centos为yum，Archlinux为pacman等。</p>
</blockquote>
<h3 id="macOS安装HomeBrew以及wget-其他系统用户跳过此步骤"><a href="#macOS安装HomeBrew以及wget-其他系统用户跳过此步骤" class="headerlink" title="macOS安装HomeBrew以及wget(其他系统用户跳过此步骤)"></a>macOS安装HomeBrew以及wget(其他系统用户跳过此步骤)</h3><h4 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h4><p>由于macOS下没有自带HomeBrew，故需要手动安装。首先安装xcode，然后终端运行如下命令即可安装HomeBrew。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul>
<li>更新：brew update </li>
<li>安装软件包：brew install “PackegeName” </li>
<li>搜索软件包：brew search “PackegeName”</li>
<li>卸载软件包：brew remove “PackegeName” </li>
</ul>
<h4 id="wget："><a href="#wget：" class="headerlink" title="wget："></a>wget：</h4><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>wget</span><br></pre></td></tr></table></figure>
<h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h3><h4 id="macOS："><a href="#macOS：" class="headerlink" title="macOS："></a>macOS：</h4><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh</span><br></pre></td></tr></table></figure>
<h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu:"></a>Debian/Ubuntu:</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> zsh</span><br></pre></td></tr></table></figure>
<h4 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora:"></a>Fedora:</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">dnf <span class="keyword">install</span> zsh</span><br></pre></td></tr></table></figure>
<h4 id="Centos"><a href="#Centos" class="headerlink" title="Centos:"></a>Centos:</h4><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">yum <span class="meta">update</span> <span class="variable">&amp;&amp;</span> yum install zsh</span><br></pre></td></tr></table></figure>
<h4 id="Archlinux"><a href="#Archlinux" class="headerlink" title="Archlinux:"></a>Archlinux:</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pacman -S zsh</span></span><br></pre></td></tr></table></figure>
<h3 id="将系统默认shell更换为zsh"><a href="#将系统默认shell更换为zsh" class="headerlink" title="将系统默认shell更换为zsh"></a>将系统默认shell更换为zsh</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chsh -s <span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure>
<h3 id="安装neofetch同安装zsh，只需要更换软件包名名称为neofetch。"><a href="#安装neofetch同安装zsh，只需要更换软件包名名称为neofetch。" class="headerlink" title="安装neofetch同安装zsh，只需要更换软件包名名称为neofetch。"></a>安装neofetch同安装zsh，只需要更换软件包名名称为neofetch。</h3><h3 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h3><p>使用oh-my-zsh可以很方便的配置zsh,并生成.zshrc配置文件方便修改 输入以下命令安装oh-my-zsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>安装成功后输入nano .zshrc打开.zshrc文件添加neofetch,修改ZSH_THEME=”random”，意为每次打开终端即启动neofetch，zsh主题随机，也就是每次打开终端都会改变一个主题，修改如图： <img src= "/images/loading.gif" data-lazy-src="/images/c7fd2a6d2692642c94a9a78c42f04ee4ef71b410.jpg"> 重启电脑就会看到效果。</p>
<h3 id="用描述文件美化终端-不同系统，不同桌面环境会有所不同-需要自己摸索了，下面以macOS为例"><a href="#用描述文件美化终端-不同系统，不同桌面环境会有所不同-需要自己摸索了，下面以macOS为例" class="headerlink" title="用描述文件美化终端(不同系统，不同桌面环境会有所不同,需要自己摸索了，下面以macOS为例)"></a>用描述文件美化终端(不同系统，不同桌面环境会有所不同,需要自己摸索了，下面以macOS为例)</h3><p>打开终端，点击右键打开显示检查器，选择一个样式双击打开描述文件，按自己的喜好设置文字风格，样式，透明度，模糊程度，窗口大小等，成品图如下： <img src= "/images/loading.gif" data-lazy-src="/images/e7005ea1415345c95c83b5c0f1cbd21b124c8245.jpg"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下利用deepin-wine安装软件简要方案</title>
    <url>/2019/03/17/install_soft_for_linux.html</url>
    <content><![CDATA[<blockquote>
<p>一直以来，Linux作为开发机比较给力，但是常用软件(如QQ、微信等)的缺乏使Linux在桌面端一直不火，用户量低于Windows以及macOS，今天分享一个Ubuntu下安装常用软件的方法。</p>
</blockquote>
<a id="more"></a>

<h3 id="博主电脑环境"><a href="#博主电脑环境" class="headerlink" title="博主电脑环境"></a>博主电脑环境</h3><ul>
<li>Ubuntu 18.10 x64</li>
</ul>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><h4 id="安装deepin-wine"><a href="#安装deepin-wine" class="headerlink" title="安装deepin-wine"></a>安装deepin-wine</h4><p>输入以下命令即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/wszqkzqk/</span>deepin-wine-ubuntu.git</span><br><span class="line">cd deepin-wine-ubuntu</span><br><span class="line">./install</span><br></pre></td></tr></table></figure>
<h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><ul>
<li>下载软件(GUI下载或wget等均可)<br><a href="http://mirrors.aliyun.com/deepin/pool/non-free/">http://mirrors.aliyun.com/deepin/pool/non-free/</a></li>
<li>使用如下命令安装软件<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">dpkg</span> <span class="selector-tag">-i</span> <span class="selector-tag">xxx</span><span class="selector-class">.deb</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>目前博主已经成功安装Tim、微信、百度网盘、迅雷精简版、foobar2000等。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS High Sierra 10.13.4下Z370主板USB相关解决方案</title>
    <url>/2018/05/09/macos-high-sierra-10-13-4-z370-motherboard-usb-related-solutions.html</url>
    <content><![CDATA[<blockquote>
<p>有些使用z370主板安装macOS的朋友可能遇到USB方面的问题，一些朋友的表现为部分USB失灵，还有一部分可能遇到usb3.0设备插在 3.0接口处不识别，今天放上本人的解决方案<a id="more"></a>。</p>
</blockquote>
<h3 id="在clover加入以下补丁并重启测试USB情况查看USB是否完整识别，3-0设备插在usb3-0上是否可用。"><a href="#在clover加入以下补丁并重启测试USB情况查看USB是否完整识别，3-0设备插在usb3-0上是否可用。" class="headerlink" title="在clover加入以下补丁并重启测试USB情况查看USB是否完整识别，3.0设备插在usb3.0上是否可用。"></a>在clover加入以下补丁并重启测试USB情况查看USB是否完整识别，3.0设备插在usb3.0上是否可用。</h3><p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ra9pmr9mj30sg01fwen.jpg"></p>
<h3 id="添加补丁后遇到USB3-0移动硬盘插在usb3-0接口上识别为内置硬盘-桌面不显示黄盘-的解决方案："><a href="#添加补丁后遇到USB3-0移动硬盘插在usb3-0接口上识别为内置硬盘-桌面不显示黄盘-的解决方案：" class="headerlink" title="添加补丁后遇到USB3.0移动硬盘插在usb3.0接口上识别为内置硬盘(桌面不显示黄盘)的解决方案："></a>添加补丁后遇到USB3.0移动硬盘插在usb3.0接口上识别为内置硬盘(桌面不显示黄盘)的解决方案：</h3><p>下载最新版<a href="https://bitbucket.org/RehabMan/os-x-usb-inject-all/downloads/RehabMan-USBInjectAll-2018-0420.zip">usbinjectall.kext</a>,并解压拷贝到efi/clover/kexts/other下。</p>
<h3 id="usb引起睡眠之后瞬间唤醒的解决方案-按照步骤2添加usbinjectall-kext后有概率遇到-此解决方案包括但不限于以上情况-："><a href="#usb引起睡眠之后瞬间唤醒的解决方案-按照步骤2添加usbinjectall-kext后有概率遇到-此解决方案包括但不限于以上情况-：" class="headerlink" title="usb引起睡眠之后瞬间唤醒的解决方案(按照步骤2添加usbinjectall.kext后有概率遇到,此解决方案包括但不限于以上情况)："></a>usb引起睡眠之后瞬间唤醒的解决方案(按照步骤2添加usbinjectall.kext后有概率遇到,此解决方案包括但不限于以上情况)：</h3><h4 id="方案1-DSDT打补丁-："><a href="#方案1-DSDT打补丁-：" class="headerlink" title="方案1(DSDT打补丁)："></a>方案1(DSDT打补丁)：</h4><p>特点：无需排查导致bug的具体usb口是哪个。同时会使usb唤醒失效，无法用键鼠唤醒，故不推荐！！！</p>
<ul>
<li>下载<a href="https://bitbucket.org/RehabMan/acpica/downloads/iasl.zip">iasl</a>用来反编译dsdt,把iasl编译器拷贝到/usr/bin目录,方便调用。</li>
<li>下载<a href="https://bitbucket.org/RehabMan/os-x-maciasl-patchmatic/downloads/RehabMan-MaciASL-2018-0507.zip">MaciASL</a>，我提供的版本自带RehabMan dsdt补丁库。</li>
<li>提取DSDT：开机clover引导界面处按F4自动提取，路径EFI/Clover/ACPI/origin下。把DSDT.aml拷贝到桌面。</li>
<li>反编译DSDT：终端输入cd ~/Desktop进入桌面目录，再输入iasl -da -dl *.aml反编译DSDT，成功后会在桌面生成DSDT.dsl 文件。</li>
<li>给DSDT打补丁：用MaciASL打开DSDT.dsl,点击patch，在左侧补丁栏选择USB3 _PRW 0x6D Skylake(instant wake),再点击 Apply完成，如图： <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ra9y5srvj30sg0dbwgu.jpg"></li>
<li>编译、排错、保存：打完补丁后点击Complie编译，如果有错请暂时依照网络资源排错。关于DSDT排错，本人后续会详细更新， 敬请期待！排错完成后点击File-&gt;Save As保存DSDT，格式为ACPI Machine Language Binary(aml)。</li>
<li>将dsdt拷贝到efi/clover/acpi/patched下并重启生效。</li>
</ul>
<h4 id="方案2-修改usbinjectall-kext"><a href="#方案2-修改usbinjectall-kext" class="headerlink" title="方案2(修改usbinjectall.kext)"></a>方案2(修改usbinjectall.kext)</h4><p>特点：需要排查导致bug的具体usb接口，但不会导致usb唤醒失效，可以用键鼠唤醒，故强烈推荐。</p>
<ul>
<li>排查引起bug的USB：一般为蓝牙或摄像头等特殊接口。可以拔掉相应排线重启测试，若拔掉后不再瞬间唤醒，则接口确定，比如 本人的是连接蓝牙排线的usb所导致。</li>
<li>Windows下进入设备管理器，确定usb设备id，如图则为8086_a2af。<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raapm4ahj30j707jmyl.jpg"></li>
<li>确定导致bug的usb编号：下载并打开<a href="https://us.softpedia-secure-download.com/dl/cd6af705d256e781d022b220f14acd38/5af2e088/400138300/mac/System-Utilities/IORegistryExplorer.zip">IORegistryExplorer</a>,找到XHC分支，在XHC分支中找到导致bug的usb所连接的设备(比如我 的是蓝牙)，此设备对应的HS号即为所需编号，如图则为HS10(注意HS10下面的BCM20702A0就是我的蓝牙，也就是说HS10导致的睡眠 瞬间唤醒)： <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raay9umlj30sg0g07ax.jpg"></li>
<li>将usbinjectall.kext拷贝到桌面，并下载<a href="https://www.fatcatsoftware.com/plisteditpro/PlistEditPro.zip">PlistEdit Pro</a>。</li>
<li>修改usbinjectall.kext：右击usbinjectall.kext，用PlistEdit Pro打开info.plist。找到IOKitPersonalities-&gt; ConfigurationData-&gt;Configuration分支，在下面选择自己usb的id(Windows下找的那个，我的是8086_a2af)分支，进入后打开 ports可以看到一堆HS编号，打开自己的HS编号(步骤3找到的那个，我的是HS10)，将UsbConnector属性值改成255(255为特殊端口) 并保存，如图： <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rabd1qt4j30sg0mz13x.jpg"></li>
<li>将修改好的usbinjectall.kext拷贝到efi/clover/kexts/other下重建缓存并重启。</li>
</ul>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>usb</tag>
        <tag>z370</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令总结</title>
    <url>/2018/05/06/linux-common-command-summary.html</url>
    <content><![CDATA[<p>由于最近一直在使用Linux操作系统，经常要使用一些Linux命令,所以总结一下Linux中的常用命令<a id="more"></a>：</p>
<h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">arch 显示机器的处理器架构(<span class="number">1</span>)</span><br><span class="line">uname -m 显示机器的处理器架构(<span class="number">2</span>)</span><br><span class="line">uname -r 显示正在使用的内核版本</span><br><span class="line">dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)</span><br><span class="line">hdparm -i /dev/hda 罗列一个磁盘的架构特性</span><br><span class="line">hdparm -tT /dev/sda 在磁盘上执行测试性读取操作</span><br><span class="line">cat /<span class="keyword">proc</span>/cpuinfo 显示CPU<span class="title"> info的信息</span></span><br><span class="line"><span class="title">cat</span> /<span class="keyword">proc</span>/interrupts 显示中断</span><br><span class="line">cat /<span class="keyword">proc</span>/meminfo 校验内存使用</span><br><span class="line">cat /<span class="keyword">proc</span>/swaps 显示哪些swap被使用</span><br><span class="line">cat /<span class="keyword">proc</span>/version 显示内核的版本</span><br><span class="line">cat /<span class="keyword">proc</span>/net/dev 显示网络适配器及统计</span><br><span class="line">cat /<span class="keyword">proc</span>/mounts 显示已加载的文件系统</span><br><span class="line">lspci -tv 罗列<span class="title"> PCI</span> 设备</span><br><span class="line">lsusb -tv 显示<span class="title"> USB</span> 设备</span><br><span class="line">date 显示系统日期</span><br><span class="line">cal 2007 显示2007年的日历表</span><br><span class="line">date 041217002007.00 设置日期和时间 - 月日时分年.秒</span><br><span class="line">clock -w 将时间修改保存到<span class="title"> BIOS</span></span><br></pre></td></tr></table></figure>
<h3 id="关机-系统的关机、重启以及登出"><a href="#关机-系统的关机、重启以及登出" class="headerlink" title="关机 (系统的关机、重启以及登出 )"></a>关机 (系统的关机、重启以及登出 )</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">shutdown</span> -h now 关闭系统(<span class="number">1</span>)</span><br><span class="line"><span class="attribute">init</span> <span class="number">0</span> 关闭系统(<span class="number">2</span>)</span><br><span class="line"><span class="attribute">telinit</span> <span class="number">0</span> 关闭系统(<span class="number">3</span>)</span><br><span class="line"><span class="attribute">shutdown</span> -h hours:minutes &amp;amp; 按预定时间关闭系统</span><br><span class="line"><span class="attribute">shutdown</span> -c 取消按预定时间关闭系统</span><br><span class="line"><span class="attribute">shutdown</span> -r now 重启(<span class="number">1</span>)</span><br><span class="line"><span class="attribute">reboot</span> 重启(<span class="number">2</span>)</span><br><span class="line"><span class="attribute">logout</span> 注销</span><br></pre></td></tr></table></figure>
<h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> /home 进入 &#x27;/ home&#x27; 目录&#x27;</span><br><span class="line"><span class="attribute">cd</span> .. 返回上一级目录</span><br><span class="line"><span class="attribute">cd</span> ../.. 返回上两级目录</span><br><span class="line"><span class="attribute">cd</span> 进入个人的主目录</span><br><span class="line"><span class="attribute">cd</span> ~user<span class="number">1</span> 进入个人的主目录</span><br><span class="line"><span class="attribute">cd</span> - 返回上次所在的目录</span><br><span class="line"><span class="attribute">pwd</span> 显示工作路径</span><br><span class="line"><span class="attribute">ls</span> 查看目录中的文件</span><br><span class="line"><span class="attribute">ls</span> -F 查看目录中的文件</span><br><span class="line"><span class="attribute">ls</span> -l 显示文件和目录的详细资料</span><br><span class="line"><span class="attribute">ls</span> -a 显示隐藏文件</span><br><span class="line"><span class="attribute">ls</span> *[<span class="number">0</span>-<span class="number">9</span>]* 显示包含数字的文件名和目录名</span><br><span class="line"><span class="attribute">tree</span> 显示文件和目录由根目录开始的树形结构(<span class="number">1</span>)</span><br><span class="line"><span class="attribute">lstree</span> 显示文件和目录由根目录开始的树形结构(<span class="number">2</span>)</span><br><span class="line"><span class="attribute">mkdir</span> dir<span class="number">1</span> 创建一个叫做 &#x27;dir<span class="number">1</span>&#x27; 的目录&#x27;</span><br><span class="line"><span class="attribute">mkdir</span> dir<span class="number">1</span> dir<span class="number">2</span> 同时创建两个目录</span><br><span class="line"><span class="attribute">mkdir</span> -p /tmp/dir<span class="number">1</span>/dir<span class="number">2</span> 创建一个目录树</span><br><span class="line"><span class="attribute">rm</span> -f file<span class="number">1</span> 删除一个叫做 &#x27;file<span class="number">1</span>&#x27; 的文件&#x27;</span><br><span class="line"><span class="attribute">rmdir</span> dir<span class="number">1</span> 删除一个叫做 &#x27;dir<span class="number">1</span>&#x27; 的目录&#x27;</span><br><span class="line"><span class="attribute">rm</span> -rf dir<span class="number">1</span> 删除一个叫做 &#x27;dir<span class="number">1</span>&#x27; 的目录并同时删除其内容</span><br><span class="line"><span class="attribute">rm</span> -rf dir<span class="number">1</span> dir<span class="number">2</span> 同时删除两个目录及它们的内容</span><br><span class="line"><span class="attribute">mv</span> dir<span class="number">1</span> new_dir 重命名/移动 一个目录</span><br><span class="line"><span class="attribute">cp</span> file<span class="number">1</span> file<span class="number">2</span> 复制一个文件</span><br><span class="line"><span class="attribute">cp</span> dir/* . 复制一个目录下的所有文件到当前工作目录</span><br><span class="line"><span class="attribute">cp</span> -a /tmp/dir<span class="number">1</span> . 复制一个目录到当前工作目录</span><br><span class="line"><span class="attribute">cp</span> -a dir<span class="number">1</span> dir<span class="number">2</span> 复制一个目录</span><br><span class="line"><span class="attribute">ln</span> -s file<span class="number">1</span> lnk<span class="number">1</span> 创建一个指向文件或目录的软链接</span><br><span class="line"><span class="attribute">ln</span> file<span class="number">1</span> lnk<span class="number">1</span> 创建一个指向文件或目录的物理链接</span><br><span class="line"><span class="attribute">touch</span> -t <span class="number">0712250000</span> file<span class="number">1</span> 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</span><br><span class="line"><span class="attribute">file</span> file<span class="number">1</span> outputs the mime type of the file as text</span><br><span class="line"><span class="attribute">iconv</span> -l 列出已知的编码</span><br><span class="line"><span class="attribute">iconv</span> -f fromEncoding -t toEncoding inputFile &amp;gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.</span><br><span class="line"><span class="attribute">find</span> . -maxdepth <span class="number">1</span> -name *.jpg -print -exec convert <span class="string">&quot;&#123;&#125;&quot;</span> -resize <span class="number">80</span>x<span class="number">60</span> <span class="string">&quot;thumbs/&#123;&#125;&quot;</span> \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)</span><br></pre></td></tr></table></figure>
<h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -<span class="built_in">name</span> file1 从 <span class="string">&#x27;/&#x27;</span> 开始进入根文件系统搜索文件和目录</span><br><span class="line"><span class="built_in">find</span> / -user user1 搜索属于用户 <span class="string">&#x27;user1&#x27;</span> 的文件和目录</span><br><span class="line"><span class="built_in">find</span> /home/user1 -<span class="built_in">name</span> \*.bin 在目录 <span class="string">&#x27;/ home/user1&#x27;</span> 中搜索带有<span class="string">&#x27;.bin&#x27;</span> 结尾的文件</span><br><span class="line"><span class="built_in">find</span> /usr/bin -<span class="built_in">type</span> f -atime +<span class="number">100</span> 搜索在过去<span class="number">100</span>天内未被使用过的执行文件</span><br><span class="line"><span class="built_in">find</span> /usr/bin -<span class="built_in">type</span> f -mtime -<span class="number">10</span> 搜索在<span class="number">10</span>天内被创建或者修改过的文件</span><br><span class="line"><span class="built_in">find</span> / -<span class="built_in">name</span> \*.rpm -<span class="built_in">exec</span> chmod <span class="number">755</span> <span class="string">&#x27;&#123;&#125;&#x27;</span> \; 搜索以 <span class="string">&#x27;.rpm&#x27;</span> 结尾的文件并定义其权限</span><br><span class="line"><span class="built_in">find</span> / -xdev -<span class="built_in">name</span> \*.rpm 搜索以 <span class="string">&#x27;.rpm&#x27;</span> 结尾的文件，忽略光驱、捷盘等可移动设备</span><br><span class="line">locate \*.ps 寻找以 <span class="string">&#x27;.ps&#x27;</span> 结尾的文件 - 先运行 <span class="string">&#x27;updatedb&#x27;</span> 命令</span><br><span class="line">whereis <span class="built_in">halt</span> 显示一个二进制文件、源码或man的位置</span><br><span class="line">which <span class="built_in">halt</span> 显示一个二进制文件或可执行文件的完整路径</span><br></pre></td></tr></table></figure>
<h3 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount <span class="regexp">/dev/</span>hda2 <span class="regexp">/mnt/</span>hda2 挂载一个叫做hda2的盘 - 确定目录 <span class="string">&#x27;/ mnt/hda2&#x27;</span> 已经存在</span><br><span class="line">umount <span class="regexp">/dev/</span>hda2 卸载一个叫做hda2的盘 - 先从挂载点 <span class="string">&#x27;/ mnt/hda2&#x27;</span> 退出</span><br><span class="line">fuser -km <span class="regexp">/mnt/</span>hda2 当设备繁忙时强制卸载</span><br><span class="line">umount -n <span class="regexp">/mnt/</span>hda2 运行卸载操作而不写入 <span class="regexp">/etc/m</span>tab 文件- 当文件为只读或当磁盘写满时非常有用</span><br><span class="line">mount <span class="regexp">/dev/</span>fd0 <span class="regexp">/mnt/</span>floppy 挂载一个软盘</span><br><span class="line">mount <span class="regexp">/dev/</span>cdrom <span class="regexp">/mnt/</span>cdrom 挂载一个cdrom或dvdrom</span><br><span class="line">mount <span class="regexp">/dev/</span>hdc <span class="regexp">/mnt/</span>cdr利奴性ecorder 挂载一个cdrw或dvdrom</span><br><span class="line">mount <span class="regexp">/dev/</span>hdb <span class="regexp">/mnt/</span>cdrecorder 挂载一个cdrw或dvdrom</span><br><span class="line">mount -o loop file.iso <span class="regexp">/mnt/</span>cdrom 挂载一个文件或ISO镜像文件</span><br><span class="line">mount -t vfat <span class="regexp">/dev/</span>hda5 <span class="regexp">/mnt/</span>hda5 挂载一个Windows FAT32文件系统</span><br><span class="line">mount <span class="regexp">/dev/</span>sda1 <span class="regexp">/mnt/u</span>sbdisk 挂载一个usb 捷盘或闪存设备</span><br><span class="line">mount -t smbfs -o username=user,password=pass <span class="regexp">//</span>WinClient<span class="regexp">/share /m</span>nt/share 挂载一个windows网络共享</span><br></pre></td></tr></table></figure>
<h3 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">df</span> -h 显示已经挂载的分区列表</span><br><span class="line"><span class="attribute">ls</span> -lSr |more 以尺寸大小排列文件和目录</span><br><span class="line"><span class="attribute">du</span> -sh dir<span class="number">1</span> 估算目录 &#x27;dir<span class="number">1</span>&#x27; 已经使用的磁盘空间&#x27;</span><br><span class="line"><span class="attribute">du</span> -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小</span><br><span class="line"><span class="attribute">rpm</span> -q -a --qf &#x27;%<span class="number">10</span>&#123;SIZE&#125;t<span class="variable">%&#123;NAME&#125;</span>n&#x27; | sort -k<span class="number">1</span>,<span class="number">1</span>n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</span><br><span class="line"><span class="attribute">dpkg</span>-query -W -f=&#x27;<span class="variable">$&#123;Installed-Size;10&#125;</span>t<span class="variable">$&#123;Package&#125;</span>n&#x27; | sort -k<span class="number">1</span>,<span class="number">1</span>n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</span><br></pre></td></tr></table></figure>
<h3 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">groupadd</span> group_name 创建一个新用户组</span><br><span class="line"><span class="attribute">groupdel</span> group_name 删除一个用户组</span><br><span class="line"><span class="attribute">groupmod</span> -n new_group_name old_group_name 重命名一个用户组</span><br><span class="line"><span class="attribute">useradd</span> -c <span class="string">&quot;Name Surname &quot;</span> -g admin -d /home/user<span class="number">1</span> -s /bin/bash user<span class="number">1</span> 创建一个属于 <span class="string">&quot;admin&quot;</span> 用户组的用户</span><br><span class="line"><span class="attribute">useradd</span> user<span class="number">1</span> 创建一个新用户</span><br><span class="line"><span class="attribute">userdel</span> -r user<span class="number">1</span> 删除一个用户 ( &#x27;-r&#x27; 排除主目录)</span><br><span class="line"><span class="attribute">usermod</span> -c <span class="string">&quot;User FTP&quot;</span> -g system -d /ftp/user<span class="number">1</span> -s /bin/nologin user<span class="number">1</span> 修改用户属性</span><br><span class="line"><span class="attribute">passwd</span> 修改口令</span><br><span class="line"><span class="attribute">passwd</span> user<span class="number">1</span> 修改一个用户的口令 (只允许root执行)</span><br><span class="line"><span class="attribute">chage</span> -E <span class="number">2005</span>-<span class="number">12</span>-<span class="number">31</span> user<span class="number">1</span> 设置用户口令的失效期限</span><br><span class="line"><span class="attribute">pwck</span> 检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的用户</span><br><span class="line"><span class="attribute">grpck</span> 检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的群组</span><br><span class="line"><span class="attribute">newgrp</span> group_name 登陆进一个新的群组以改变新创建文件的预设群组</span><br></pre></td></tr></table></figure>
<h3 id="文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ls -lh 显示权限</span><br><span class="line">ls /tmp | pr -T5 -W$COLUMNS 将终端划分成<span class="number">5</span>栏显示</span><br><span class="line">chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</span><br><span class="line">chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限</span><br><span class="line">chown user1 file1 改变一个文件的所有人属性</span><br><span class="line">chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</span><br><span class="line">chgrp group1 file1 改变文件的群组</span><br><span class="line">chown user1:group1 file1 改变一个文件的所有人和群组属性</span><br><span class="line"><span class="keyword">find</span> / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件</span><br><span class="line">chmod u+s <span class="regexp">/bin/</span>file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</span><br><span class="line">chmod u-s <span class="regexp">/bin/</span>file1 禁用一个二进制文件的 SUID位</span><br><span class="line">chmod g+s <span class="regexp">/home/</span><span class="keyword">public</span> 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</span><br><span class="line">chmod g-s <span class="regexp">/home/</span><span class="keyword">public</span> 禁用一个目录的 SGID 位</span><br><span class="line">chmod o+t <span class="regexp">/home/</span><span class="keyword">public</span> 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</span><br><span class="line">chmod o-t <span class="regexp">/home/</span><span class="keyword">public</span> 禁用一个目录的 STIKY 位</span><br></pre></td></tr></table></figure>
<h3 id="文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chattr</span> +a file<span class="number">1</span> 只允许以追加方式读写文件</span><br><span class="line"><span class="attribute">chattr</span> +c file<span class="number">1</span> 允许这个文件能被内核自动压缩/解压</span><br><span class="line"><span class="attribute">chattr</span> +d file<span class="number">1</span> 在进行文件系统备份时，dump程序将忽略这个文件</span><br><span class="line"><span class="attribute">chattr</span> +i file<span class="number">1</span> 设置成不可变的文件，不能被删除、修改、重命名或者链接</span><br><span class="line"><span class="attribute">chattr</span> +s file<span class="number">1</span> 允许一个文件被安全地删除</span><br><span class="line"><span class="attribute">chattr</span> +S file<span class="number">1</span> 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</span><br><span class="line"><span class="attribute">chattr</span> +u file<span class="number">1</span> 若文件被删除，系统会允许你在以后恢复这个被删除的文件</span><br><span class="line"><span class="attribute">lsattr</span> 显示特殊的属性</span><br></pre></td></tr></table></figure>
<h3 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bunzip2</span> file<span class="number">1</span>.bz<span class="number">2</span> 解压一个叫做 &#x27;file<span class="number">1</span>.bz<span class="number">2</span>&#x27;的文件</span><br><span class="line"><span class="attribute">bzip2</span> file<span class="number">1</span> 压缩一个叫做 &#x27;file<span class="number">1</span>&#x27; 的文件</span><br><span class="line"><span class="attribute">gunzip</span> file<span class="number">1</span>.gz 解压一个叫做 &#x27;file<span class="number">1</span>.gz&#x27;的文件</span><br><span class="line"><span class="attribute">gzip</span> file<span class="number">1</span> 压缩一个叫做 &#x27;file<span class="number">1</span>&#x27;的文件</span><br><span class="line"><span class="attribute">gzip</span> -<span class="number">9</span> file<span class="number">1</span> 最大程度压缩</span><br><span class="line"><span class="attribute">rar</span> a file<span class="number">1</span>.rar test_file 创建一个叫做 &#x27;file<span class="number">1</span>.rar&#x27; 的包</span><br><span class="line"><span class="attribute">rar</span> a file<span class="number">1</span>.rar file<span class="number">1</span> file<span class="number">2</span> dir<span class="number">1</span> 同时压缩 &#x27;file<span class="number">1</span>&#x27;, &#x27;file<span class="number">2</span>&#x27; 以及目录 &#x27;dir<span class="number">1</span>&#x27;</span><br><span class="line"><span class="attribute">rar</span> x file<span class="number">1</span>.rar 解压rar包</span><br><span class="line"><span class="attribute">unrar</span> x file<span class="number">1</span>.rar 解压rar包</span><br><span class="line"><span class="attribute">tar</span> -cvf archive.tar file<span class="number">1</span> 创建一个非压缩的 tarball</span><br><span class="line"><span class="attribute">tar</span> -cvf archive.tar file<span class="number">1</span> file<span class="number">2</span> dir<span class="number">1</span> 创建一个包含了 &#x27;file<span class="number">1</span>&#x27;, &#x27;file<span class="number">2</span>&#x27; 以及 &#x27;dir<span class="number">1</span>&#x27;的档案文件</span><br><span class="line"><span class="attribute">tar</span> -tf archive.tar 显示一个包中的内容</span><br><span class="line"><span class="attribute">tar</span> -xvf archive.tar 释放一个包</span><br><span class="line"><span class="attribute">tar</span> -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下</span><br><span class="line"><span class="attribute">tar</span> -cvfj archive.tar.bz<span class="number">2</span> dir<span class="number">1</span> 创建一个bzip<span class="number">2</span>格式的压缩包</span><br><span class="line"><span class="attribute">tar</span> -xvfj archive.tar.bz<span class="number">2</span> 解压一个bzip<span class="number">2</span>格式的压缩包</span><br><span class="line"><span class="attribute">tar</span> -cvfz archive.tar.gz dir<span class="number">1</span> 创建一个gzip格式的压缩包</span><br><span class="line"><span class="attribute">tar</span> -xvfz archive.tar.gz 解压一个gzip格式的压缩包</span><br><span class="line"><span class="attribute">zip</span> file<span class="number">1</span>.zip file<span class="number">1</span> 创建一个zip格式的压缩包</span><br><span class="line"><span class="attribute">zip</span> -r file<span class="number">1</span>.zip file<span class="number">1</span> file<span class="number">2</span> dir<span class="number">1</span> 将几个文件和目录同时压缩成一个zip格式的压缩包</span><br><span class="line"><span class="attribute">unzip</span> file<span class="number">1</span>.zip 解压一个zip格式压缩包</span><br></pre></td></tr></table></figure>
<h3 id="RPM-包-（Fedora-Redhat及类似系统）"><a href="#RPM-包-（Fedora-Redhat及类似系统）" class="headerlink" title="RPM 包 - （Fedora, Redhat及类似系统）"></a>RPM 包 - （Fedora, Redhat及类似系统）</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">rpm -ivh <span class="keyword">package</span>.rpm 安装一个rpm包</span><br><span class="line">rpm -ivh --nodeeps <span class="keyword">package</span>.rpm 安装一个rpm包而忽略依赖关系警告</span><br><span class="line">rpm -U <span class="keyword">package</span>.rpm 更新一个rpm包但不改变其配置文件</span><br><span class="line">rpm -F <span class="keyword">package</span>.rpm 更新一个确定已经安装的rpm包</span><br><span class="line">rpm -e package_name.rpm 删除一个rpm包</span><br><span class="line">rpm -qa 显示系统中所有已经安装的rpm包</span><br><span class="line">rpm -qa | <span class="keyword">grep</span> httpd 显示所有名称中包含 <span class="string">&quot;httpd&quot;</span> 字样的rpm包</span><br><span class="line">rpm -qi package_name 获取一个已安装包的特殊信息</span><br><span class="line">rpm -qg <span class="string">&quot;System Environment/Daemons&quot;</span> 显示一个组件的rpm包</span><br><span class="line">rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表</span><br><span class="line">rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表</span><br><span class="line">rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表</span><br><span class="line">rpm -q package_name --whatprovides 显示一个rpm包所占的体积</span><br><span class="line">rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l</span><br><span class="line">rpm -q package_name --changelog 显示一个rpm包的修改历史</span><br><span class="line">rpm -qf <span class="regexp">/etc/</span>httpd<span class="regexp">/conf/</span>httpd.conf 确认所给的文件由哪个rpm包所提供</span><br><span class="line">rpm -qp <span class="keyword">package</span>.rpm -l 显示由一个尚未安装的rpm包提供的文件列表</span><br><span class="line">rpm --<span class="keyword">import</span> <span class="regexp">/media/</span>cdrom/RPM-GPG-KEY 导入公钥数字证书</span><br><span class="line">rpm --checksig <span class="keyword">package</span>.rpm 确认一个rpm包的完整性</span><br><span class="line">rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性</span><br><span class="line">rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</span><br><span class="line">rpm -Va 检查系统中所有已安装的rpm包- 小心使用</span><br><span class="line">rpm -Vp <span class="keyword">package</span>.rpm 确认一个rpm包还未安装</span><br><span class="line">rpm2cpio <span class="keyword">package</span>.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件</span><br><span class="line">rpm -ivh <span class="regexp">/usr/</span>src<span class="regexp">/redhat/</span>RPMS<span class="regexp">/`arch`/</span><span class="keyword">package</span>.rpm 从一个rpm源码安装一个构建好的包</span><br><span class="line">rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包</span><br></pre></td></tr></table></figure>
<h3 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h3><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">yum install <span class="keyword">package</span><span class="number">_n</span>ame 下载并安装一个rpm包</span><br><span class="line">yum localinstall <span class="keyword">package</span><span class="number">_n</span>ame.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</span><br><span class="line">yum update <span class="keyword">package</span><span class="number">_n</span>ame.rpm 更新当前系统中所有安装的rpm包</span><br><span class="line">yum update <span class="keyword">package</span><span class="number">_n</span>ame 更新一个rpm包</span><br><span class="line">yum remove <span class="keyword">package</span><span class="number">_n</span>ame 删除一个rpm包</span><br><span class="line">yum list 列出当前系统中安装的所有包</span><br><span class="line">yum search <span class="keyword">package</span><span class="number">_n</span>ame 在rpm仓库中搜寻软件包</span><br><span class="line">yum clean packages 清理rpm缓存删除下载的包</span><br><span class="line">yum clean headers 删除所有头文件</span><br><span class="line">yum clean all 删除所有缓存的包和头文件</span><br></pre></td></tr></table></figure>
<h3 id="DEB-包-Debian-Ubuntu-以及类似系统"><a href="#DEB-包-Debian-Ubuntu-以及类似系统" class="headerlink" title="DEB 包 (Debian, Ubuntu 以及类似系统)"></a>DEB 包 (Debian, Ubuntu 以及类似系统)</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">dpkg -i package.<span class="keyword">deb</span> 安装/更新一个 <span class="keyword">deb</span> 包</span><br><span class="line">dpkg -r package_name 从系统删除一个 <span class="keyword">deb</span> 包</span><br><span class="line">dpkg -<span class="keyword">l</span> 显示系统中所有已经安装的 <span class="keyword">deb</span> 包</span><br><span class="line">dpkg -<span class="keyword">l</span> | <span class="keyword">grep</span> httpd 显示所有名称中包含 <span class="string">&quot;httpd&quot;</span> 字样的<span class="keyword">deb</span>包</span><br><span class="line">dpkg -s package_name 获得已经安装在系统中一个特殊包的信息</span><br><span class="line">dpkg -L package_name 显示系统中已经安装的一个<span class="keyword">deb</span>包所提供的文件列表</span><br><span class="line">dpkg --contents package.<span class="keyword">deb</span> 显示尚未安装的一个包所提供的文件列表</span><br><span class="line">dpkg -S /bin/ping 确认所给的文件由哪个<span class="keyword">deb</span>包提供</span><br></pre></td></tr></table></figure>
<h3 id="APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a>APT 软件工具 (Debian, Ubuntu 以及类似系统)</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install package_name 安装/更新一个 deb 包</span><br><span class="line">apt-cdrom install package_name 从光盘安装/更新一个 deb 包</span><br><span class="line">apt-<span class="builtin-name">get</span> update 升级列表中的软件包</span><br><span class="line">apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>升级所有已安装的软件</span><br><span class="line">apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> package_name 从系统删除一个deb包</span><br><span class="line">apt-<span class="builtin-name">get</span> check 确认依赖的软件仓库正确</span><br><span class="line">apt-<span class="builtin-name">get</span> clean 从下载的软件包中清理缓存</span><br><span class="line">apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</span><br></pre></td></tr></table></figure>
<h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cat</span> file<span class="number">1</span> 从第一个字节开始正向查看文件的内容</span><br><span class="line"><span class="attribute">tac</span> file<span class="number">1</span> 从最后一行开始反向查看一个文件的内容</span><br><span class="line"><span class="attribute">more</span> file<span class="number">1</span> 查看一个长文件的内容</span><br><span class="line"><span class="attribute">less</span> file<span class="number">1</span> 类似于 &#x27;more&#x27; 命令，但是它允许在文件中和正向操作一样的反向操作</span><br><span class="line"><span class="attribute">head</span> -<span class="number">2</span> file<span class="number">1</span> 查看一个文件的前两行</span><br><span class="line"><span class="attribute">tail</span> -<span class="number">2</span> file<span class="number">1</span> 查看一个文件的最后两行</span><br><span class="line"><span class="attribute">tail</span> -f /var/log/messages 实时查看被添加到一个文件中的内容</span><br></pre></td></tr></table></figure>
<h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">cat file1 file2 ... | command &amp;<span class="keyword">lt</span>;&amp;<span class="keyword">gt</span>; file1_in.txt_or_file1_out.txt general syntax <span class="keyword">for</span> text manipulation using PIPE, STDIN <span class="keyword">and</span> STDOUT</span><br><span class="line">cat file1 | command( sed, <span class="keyword">grep</span>, awk, <span class="keyword">grep</span>, etc...) &amp;<span class="keyword">gt</span>; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中</span><br><span class="line">cat file1 | command( sed, <span class="keyword">grep</span>, awk, <span class="keyword">grep</span>, etc...) &amp;<span class="keyword">gt</span>;&amp;<span class="keyword">gt</span>; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中</span><br><span class="line"><span class="keyword">grep</span> Aug /var/<span class="keyword">log</span>/messages 在文件 <span class="string">&#x27;/var/log/messages&#x27;</span>中查找关键词<span class="string">&quot;Aug&quot;</span></span><br><span class="line"><span class="keyword">grep</span> ^Aug /var/<span class="keyword">log</span>/messages 在文件 <span class="string">&#x27;/var/log/messages&#x27;</span>中查找以<span class="string">&quot;Aug&quot;</span>开始的词汇</span><br><span class="line"><span class="keyword">grep</span> [<span class="number">0</span>-<span class="number">9</span>] /var/<span class="keyword">log</span>/messages 选择 <span class="string">&#x27;/var/log/messages&#x27;</span> 文件中所有包含数字的行</span><br><span class="line"><span class="keyword">grep</span> Aug -R /var/<span class="keyword">log</span>/* 在目录 <span class="string">&#x27;/var/log&#x27;</span> 及随后的目录中搜索字符串<span class="string">&quot;Aug&quot;</span></span><br><span class="line">sed <span class="string">&#x27;s/stringa1/stringa2/g&#x27;</span> example.txt 将example.txt文件中的 <span class="string">&quot;string1&quot;</span> 替换成 <span class="string">&quot;string2&quot;</span></span><br><span class="line">sed <span class="string">&#x27;/^$/d&#x27;</span> example.txt 从example.txt文件中删除所有空白行</span><br><span class="line">sed <span class="string">&#x27;/ *#/d; /^$/d&#x27;</span> example.txt 从example.txt文件中删除所有注释和空白行</span><br><span class="line">echo <span class="string">&#x27;esempio&#x27;</span> | <span class="keyword">tr</span> <span class="string">&#x27;[:lower:]&#x27;</span> <span class="string">&#x27;[:upper:]&#x27;</span> 合并上下单元格内容</span><br><span class="line">sed -e <span class="string">&#x27;1d&#x27;</span> result.txt 从文件example.txt 中排除第一行</span><br><span class="line">sed -n <span class="string">&#x27;/stringa1/p&#x27;</span> 查看只包含词汇 <span class="string">&quot;string1&quot;</span>的行</span><br><span class="line">sed -e <span class="string">&#x27;s/ *$//&#x27;</span> example.txt 删除每一行最后的空白字符</span><br><span class="line">sed -e <span class="string">&#x27;s/stringa1//g&#x27;</span> example.txt 从文档中只删除词汇 <span class="string">&quot;string1&quot;</span> 并保留剩余全部</span><br><span class="line">sed -n <span class="string">&#x27;1,5p;5q&#x27;</span> example.txt 查看从第一行到第<span class="number">5</span>行内容</span><br><span class="line">sed -n <span class="string">&#x27;5p;5q&#x27;</span> example.txt 查看第<span class="number">5</span>行</span><br><span class="line">sed -e <span class="string">&#x27;s/00*/0/g&#x27;</span> example.txt 用单个零替换多个零</span><br><span class="line">cat -n file1 标示文件的行数</span><br><span class="line">cat example.txt | awk <span class="string">&#x27;NR%2==1&#x27;</span> 删除example.txt文件中的所有偶数行</span><br><span class="line">echo a b c | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> 查看一行第一栏</span><br><span class="line">echo a b c | awk <span class="string">&#x27;&#123;print $1,$3&#125;&#x27;</span> 查看一行的第一和第三栏</span><br><span class="line">paste file1 file2 合并两个文件或两栏的内容</span><br><span class="line">paste -d <span class="string">&#x27;+&#x27;</span> file1 file2 合并两个文件或两栏的内容，中间用<span class="string">&quot;+&quot;</span>区分</span><br><span class="line"><span class="keyword">sort</span> file1 file2 排序两个文件的内容</span><br><span class="line"><span class="keyword">sort</span> file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)</span><br><span class="line"><span class="keyword">sort</span> file1 file2 | uniq -u 删除交集，留下其他的行</span><br><span class="line"><span class="keyword">sort</span> file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)</span><br><span class="line">comm -<span class="number">1</span> file1 file2 比较两个文件的内容只删除 <span class="string">&#x27;file1&#x27;</span> 所包含的内容</span><br><span class="line">comm -<span class="number">2</span> file1 file2 比较两个文件的内容只删除 <span class="string">&#x27;file2&#x27;</span> 所包含的内容</span><br><span class="line">comm -<span class="number">3</span> file1 file2 比较两个文件的内容只删除两个文件共有的部分</span><br></pre></td></tr></table></figure>
<h3 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX</span><br><span class="line">unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS</span><br><span class="line"><span class="function"><span class="title">recode</span></span> ..HTML &amp;<span class="keyword">lt</span>; page.txt &amp;<span class="keyword">gt</span>; page.html 将一个文本文件转换成html</span><br><span class="line">recode -l | more 显示所有允许的转换格式</span><br></pre></td></tr></table></figure>
<h3 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">badblocks</span> -v /dev/hda<span class="number">1</span> 检查磁盘hda<span class="number">1</span>上的坏磁块</span><br><span class="line"><span class="attribute">fsck</span> /dev/hda<span class="number">1</span> 修复/检查hda<span class="number">1</span>磁盘上linux文件系统的完整性</span><br><span class="line"><span class="attribute">fsck</span>.ext<span class="number">2</span> /dev/hda<span class="number">1</span> 修复/检查hda<span class="number">1</span>磁盘上ext<span class="number">2</span>文件系统的完整性</span><br><span class="line"><span class="attribute">e2fsck</span> /dev/hda<span class="number">1</span> 修复/检查hda<span class="number">1</span>磁盘上ext<span class="number">2</span>文件系统的完整性</span><br><span class="line"><span class="attribute">e2fsck</span> -j /dev/hda<span class="number">1</span> 修复/检查hda<span class="number">1</span>磁盘上ext<span class="number">3</span>文件系统的完整性</span><br><span class="line"><span class="attribute">fsck</span>.ext<span class="number">3</span> /dev/hda<span class="number">1</span> 修复/检查hda<span class="number">1</span>磁盘上ext<span class="number">3</span>文件系统的完整性</span><br><span class="line"><span class="attribute">fsck</span>.vfat /dev/hda<span class="number">1</span> 修复/检查hda<span class="number">1</span>磁盘上fat文件系统的完整性</span><br><span class="line"><span class="attribute">fsck</span>.msdos /dev/hda<span class="number">1</span> 修复/检查hda<span class="number">1</span>磁盘上dos文件系统的完整性</span><br><span class="line"><span class="attribute">dosfsck</span> /dev/hda<span class="number">1</span> 修复/检查hda<span class="number">1</span>磁盘上dos文件系统的完整性</span><br></pre></td></tr></table></figure>
<h3 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mkfs</span> /dev/hda<span class="number">1</span> 在hda<span class="number">1</span>分区创建一个文件系统</span><br><span class="line"><span class="attribute">mke2fs</span> /dev/hda<span class="number">1</span> 在hda<span class="number">1</span>分区创建一个linux ext<span class="number">2</span>的文件系统</span><br><span class="line"><span class="attribute">mke2fs</span> -j /dev/hda<span class="number">1</span> 在hda<span class="number">1</span>分区创建一个linux ext<span class="number">3</span>(日志型)的文件系统</span><br><span class="line"><span class="attribute">mkfs</span> -t vfat <span class="number">32</span> -F /dev/hda<span class="number">1</span> 创建一个 FAT<span class="number">32</span> 文件系统</span><br><span class="line"><span class="attribute">fdformat</span> -n /dev/fd<span class="number">0</span> 格式化一个软盘</span><br><span class="line"><span class="attribute">mkswap</span> /dev/hda<span class="number">3</span> 创建一个swap文件系统</span><br></pre></td></tr></table></figure>
<h3 id="SWAP文件系统"><a href="#SWAP文件系统" class="headerlink" title="SWAP文件系统"></a>SWAP文件系统</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkswap <span class="regexp">/dev/</span>hda3 创建一个swap文件系统</span><br><span class="line">swapon <span class="regexp">/dev/</span>hda3 启用一个新的swap文件系统</span><br><span class="line">swapon <span class="regexp">/dev/</span>hda2 <span class="regexp">/dev/</span>hdb3 启用两个swap分区</span><br></pre></td></tr></table></figure>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">dump -0aj -f /tmp/home0.bak /home 制作一个 <span class="string">&#x27;/home&#x27;</span> 目录的完整备份</span><br><span class="line">dump -1aj -f /tmp/home0.bak /home 制作一个 <span class="string">&#x27;/home&#x27;</span> 目录的交互式备份</span><br><span class="line">restore -<span class="keyword">if</span> /tmp/home0.bak 还原一个交互式备份</span><br><span class="line">rsync -rogpav --<span class="keyword">delete</span> /home /tmp 同步两边的目录</span><br><span class="line">rsync -rogpav -e ssh --<span class="keyword">delete</span> /home ip_address:/tmp 通过SSH通道rsync</span><br><span class="line">rsync -az -e ssh --<span class="keyword">delete</span> ip_addr:<span class="regexp">/home/</span><span class="keyword">public</span> /home/local 通过ssh和压缩将一个远程目录同步到本地目录</span><br><span class="line">rsync -az -e ssh --<span class="keyword">delete</span> /home/local ip_addr:<span class="regexp">/home/</span><span class="keyword">public</span> 通过ssh和压缩将本地目录同步到远程目录</span><br><span class="line">dd bs=1M <span class="keyword">if</span>=<span class="regexp">/dev/</span>hda | gzip | ssh user<span class="meta">@ip_addr</span> <span class="string">&#x27;dd of=hda.gz&#x27;</span> 通过ssh在远程主机上执行一次备份本地磁盘的操作</span><br><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/</span>sda <span class="keyword">of</span>=<span class="regexp">/tmp/</span>file1 备份磁盘内容到一个文件</span><br><span class="line">tar -Puf backup.tar /home/user 执行一次对 <span class="string">&#x27;/home/user&#x27;</span> 目录的交互式备份操作</span><br><span class="line">( cd /tmp/local/ &amp;amp;&amp;amp; tar c . ) | ssh -C user<span class="meta">@ip_addr</span> <span class="string">&#x27;cd /home/share/ &amp;amp;&amp;amp; tar x -p&#x27;</span> 通过ssh在远程目录中复制一个目录内容</span><br><span class="line">( tar c /home ) | ssh -C user<span class="meta">@ip_addr</span> <span class="string">&#x27;cd /home/backup-home &amp;amp;&amp;amp; tar x -p&#x27;</span> 通过ssh在远程目录中复制一个本地目录</span><br><span class="line">tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接</span><br><span class="line">find /home/user1 -name <span class="string">&#x27;*.txt&#x27;</span> | xargs cp -av --target-directory=<span class="regexp">/home/</span>backup/ --parents 从一个目录查找并复制所有以 <span class="string">&#x27;.txt&#x27;</span> 结尾的文件到另一个目录</span><br><span class="line">find /<span class="keyword">var</span>/log -name <span class="string">&#x27;*.log&#x27;</span> | tar cv --files-<span class="keyword">from</span>=- | bzip2 &amp;gt; log.tar.bz2 查找所有以 <span class="string">&#x27;.log&#x27;</span> 结尾的文件并做成一个bzip包</span><br><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/</span>hda <span class="keyword">of</span>=<span class="regexp">/dev/</span>fd0 bs=<span class="number">512</span> count=<span class="number">1</span> 做一个将 MBR (Master Boot Record)内容复制到软盘的动作</span><br><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/</span>fd0 <span class="keyword">of</span>=<span class="regexp">/dev/</span>hda bs=<span class="number">512</span> count=<span class="number">1</span> 从已经保存到软盘的备份中恢复MBR内容</span><br></pre></td></tr></table></figure>
<h3 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">cdrecord -v gracetime=2 dev=<span class="string">/dev/cdrom</span> -eject blank=fast -force 清空一个可复写的光盘内容</span><br><span class="line">mkisofs <span class="string">/dev/cdrom</span> &amp;gt; <span class="keyword">cd</span>.iso 在磁盘上创建一个光盘的iso镜像文件</span><br><span class="line">mkisofs <span class="string">/dev/cdrom</span> | gzip &amp;gt; <span class="keyword">cd</span>_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件</span><br><span class="line">mkisofs -J -allow-leading-dots -R -V <span class="string">&quot;Label CD&quot;</span> -iso-level 4 -o <span class="string">./cd.iso</span> data_<span class="keyword">cd</span> 创建一个目录的iso镜像文件</span><br><span class="line">cdrecord -v dev=<span class="string">/dev/cdrom</span> <span class="keyword">cd</span>.iso 刻录一个ISO镜像文件</span><br><span class="line">gzip -dc <span class="keyword">cd</span>_iso.gz | cdrecord dev=<span class="string">/dev/cdrom</span> - 刻录一个压缩了的ISO镜像文件</span><br><span class="line">mount -o loop <span class="keyword">cd</span>.iso <span class="string">/mnt/iso</span> 挂载一个ISO镜像文件</span><br><span class="line">cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中</span><br><span class="line">cd-paranoia -- <span class="string">&quot;-3&quot;</span> 从一个CD光盘转录音轨到 wav 文件中（参数-3）</span><br><span class="line">cdrecord <span class="params">--scanbus</span> 扫描总线以识别scsi通道</span><br><span class="line">dd <span class="keyword">if</span>=<span class="string">/dev/hdc</span> | md5sum 校验一个设备的md5sum编码，例如一张 CD</span><br></pre></td></tr></table></figure>
<h3 id="网络-（以太网和WIFI无线）"><a href="#网络-（以太网和WIFI无线）" class="headerlink" title="网络 - （以太网和WIFI无线）"></a>网络 - （以太网和WIFI无线）</h3><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 显示一个以太网卡的配置</span><br><span class="line">ifup eth0 启用一个 &#x27;eth0&#x27; 网络设备</span><br><span class="line">ifdown eth0 禁用一个 &#x27;eth0&#x27; 网络设备</span><br><span class="line">ifconfig eth0 <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> 控制IP地址</span><br><span class="line">ifconfig eth0 promisc 设置 &#x27;eth0&#x27; 成混杂模式以嗅探数据包 (sniffing)</span><br><span class="line">dhclient eth0 以dhcp模式启用 &#x27;eth0&#x27;</span><br><span class="line">route -n show routing table</span><br><span class="line">route add -net <span class="number">0</span>/<span class="number">0</span> gw IP_Gateway configura default gateway</span><br><span class="line">route add -net <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span> netmask <span class="number">255.255</span><span class="number">.0</span><span class="number">.0</span> gw <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> configure static route to reach network &#x27;<span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span>&#x27;</span><br><span class="line">route del <span class="number">0</span>/<span class="number">0</span> gw IP_gateway remove static route</span><br><span class="line">echo <span class="string">&quot;1&quot;</span> &amp;gt; /<span class="keyword">proc</span>/sys/net/ipv4/ip_forward<span class="title"> activate</span> ip<span class="title"> routing</span></span><br><span class="line"><span class="title">hostname</span> show<span class="title"> hostname</span> of<span class="title"> system</span></span><br><span class="line"><span class="title">host</span> www.example.com<span class="title"> lookup</span> hostname<span class="title"> to</span> resolve<span class="title"> name</span> to<span class="title"> ip</span> address<span class="title"> and</span> viceversa(1)</span><br><span class="line">nslookup<span class="title"> www.example.com</span> lookup<span class="title"> hostname</span> to<span class="title"> resolve</span> name<span class="title"> to</span> ip<span class="title"> address</span> and<span class="title"> viceversa(2)</span></span><br><span class="line"><span class="title">ip</span> link<span class="title"> show</span> show<span class="title"> link</span> status<span class="title"> of</span> all<span class="title"> interfaces</span></span><br><span class="line"><span class="title">mii-tool</span> eth0<span class="title"> show</span> link<span class="title"> status</span> of &#x27;eth0&#x27;</span><br><span class="line">ethtool<span class="title"> eth0</span> show<span class="title"> statistics</span> of<span class="title"> network</span> card &#x27;eth0&#x27;</span><br><span class="line">netstat -tup<span class="title"> show</span> all<span class="title"> active</span> network<span class="title"> connections</span> and<span class="title"> their</span> PID</span><br><span class="line">netstat -tupl<span class="title"> show</span> all<span class="title"> network</span> services<span class="title"> listening</span> on<span class="title"> the</span> system<span class="title"> and</span> their<span class="title"> PID</span></span><br><span class="line"><span class="title">tcpdump</span> tcp<span class="title"> port</span> 80<span class="title"> show</span> all<span class="title"> HTTP</span> traffic</span><br><span class="line">iwlist<span class="title"> scan</span> show<span class="title"> wireless</span> networks</span><br><span class="line">iwconfig<span class="title"> eth1</span> show<span class="title"> configuration</span> of<span class="title"> a</span> wireless<span class="title"> network</span> card</span><br><span class="line">hostname<span class="title"> show</span> hostname</span><br><span class="line">host<span class="title"> www.example.com</span> lookup<span class="title"> hostname</span> to<span class="title"> resolve</span> name<span class="title"> to</span> ip<span class="title"> address</span> and<span class="title"> viceversa</span></span><br><span class="line"><span class="title">nslookup</span> www.example.com<span class="title"> lookup</span> hostname<span class="title"> to</span> resolve<span class="title"> name</span> to<span class="title"> ip</span> address<span class="title"> and</span> viceversa</span><br><span class="line">whois<span class="title"> www.example.com</span> lookup<span class="title"> on</span> Whois<span class="title"> database</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>教你制作macOS+Ubuntu+WindowsPE超级启动盘(仅支持UEFI)</title>
    <url>/2019/07/26/make-super-usb.html</url>
    <content><![CDATA[<blockquote>
<p>对于多系统用户，有没有觉得每一个系统一个U盘很麻烦而且浪费U盘，本文会教你如何制作macOS+Ubuntu+WindowsPE多系统启动盘。注意：建议使用博主分享的PE，其他PE文件结构或许不同，不确定能否成功。<a id="more"></a></p>
</blockquote>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>USB 3.0U盘(不可小于16g，博主的是闪迪64gU盘)</li>
<li>macOS 10.15 beta4原版镜像，进入如下网址，内有下载分享<br><a href="http://bbs.pcbeta.com/viewthread-1823322-1-1.html">http://bbs.pcbeta.com/viewthread-1823322-1-1.html</a></li>
<li>Ubuntu 19.04镜像，下载地址如下，可直接粘贴到迅雷<br><a href="http://mirror.cogentco.com/pub/linux/ubuntu-releases/19.04/ubuntu-19.04-desktop-amd64.iso">http://mirror.cogentco.com/pub/linux/ubuntu-releases/19.04/ubuntu-19.04-desktop-amd64.iso</a></li>
<li>Windows 10 1809 PE，百毒盘地址如下(注意，此PE为博主自制PE，兼容PC以及mbp2017，无任何流氓行为，可放心使用)<br>链接: <a href="https://pan.baidu.com/s/1Qb9ieHzwDATaU-FhFuDUJQ">https://pan.baidu.com/s/1Qb9ieHzwDATaU-FhFuDUJQ</a>  密码: 15ns</li>
<li>一个配置好的可引导Hackintosh的Clover</li>
</ul>
<h1 id="写入macOS镜像并放入Clover"><a href="#写入macOS镜像并放入Clover" class="headerlink" title="写入macOS镜像并放入Clover"></a>写入macOS镜像并放入Clover</h1><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>将U盘格式化成为Hfs格式，卷标为mac，如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/superusb-1.png"></p>
<h2 id="将Install-macOS-Catalina-Beta-app拷贝到Application下"><a href="#将Install-macOS-Catalina-Beta-app拷贝到Application下" class="headerlink" title="将Install macOS Catalina Beta.app拷贝到Application下"></a>将Install macOS Catalina Beta.app拷贝到Application下</h2><h2 id="终端输入如下命令写入镜像"><a href="#终端输入如下命令写入镜像" class="headerlink" title="终端输入如下命令写入镜像"></a>终端输入如下命令写入镜像</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/Applications/</span>Install\ macOS\ Catalina\ Beta.app<span class="regexp">/Contents/</span>Resources<span class="regexp">/createinstallmedia --volume /</span>Volumes<span class="regexp">/mac --applicationpath /</span>Applications/Install\ macOS\ Catalina\ Beta.app</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/superusb-2.png"></p>
<h2 id="挂载U盘EFI分区，将Clover拷贝进去"><a href="#挂载U盘EFI分区，将Clover拷贝进去" class="headerlink" title="挂载U盘EFI分区，将Clover拷贝进去"></a>挂载U盘EFI分区，将Clover拷贝进去</h2><h1 id="为Ubuntu以及Windows-PE准备分区"><a href="#为Ubuntu以及Windows-PE准备分区" class="headerlink" title="为Ubuntu以及Windows PE准备分区"></a>为Ubuntu以及Windows PE准备分区</h1><ul>
<li>打开磁盘工具，添加分区，格式为HFs，名称为other。将分区Install macOS Catalina Beta的大小修改为8G，如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/superusb-3.png"></li>
<li>进入Windows打开diskgenius，删掉那个最大的HFs分区。<br><img src= "/images/loading.gif" data-lazy-src="/images/superusb-4.png"></li>
<li>在空闲区域添加三个Fat32格式的分区，名称分别为Ubuntu，WinPE，Data。其中Ubuntu大小为4G，WinPE大小为3G，Data为剩余空间。<br><img src= "/images/loading.gif" data-lazy-src="/images/superusb-5.png"></li>
</ul>
<h1 id="拷贝Ubuntu以及WinPE的文件"><a href="#拷贝Ubuntu以及WinPE的文件" class="headerlink" title="拷贝Ubuntu以及WinPE的文件"></a>拷贝Ubuntu以及WinPE的文件</h1><p>将Ubuntu以及WinPE的镜像解压，直接把镜像根目录所有文件拷贝到对应分区。<br><img src= "/images/loading.gif" data-lazy-src="/images/superusb-6.png"></p>
<h1 id="引导设置"><a href="#引导设置" class="headerlink" title="引导设置"></a>引导设置</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><ul>
<li>在U盘EFI分区新建grub文件夹，和CLOVER文件夹同级。</li>
<li>打开Ubuntu分区，将boot/grub文件夹下的grub.cfg文件以及EFI/BOOT文件夹下的Bootx64.efi和grubx64.efi两个文件拷贝到刚刚新建的grub文件夹下。<br><img src= "/images/loading.gif" data-lazy-src="/images/superusb-7.png"></li>
</ul>
<h2 id="WinPE"><a href="#WinPE" class="headerlink" title="WinPE"></a>WinPE</h2><p>打开WinPE分区，将efi/microsoft/boot文件夹下的cdboot.efi文件重命名为cdboot-bak.efi，并将efi/boot文件夹下的bootx64.efi文件拷贝到efi/microsoft/boot文件夹下。并重命名为cdboot.efi。<br><img src= "/images/loading.gif" data-lazy-src="/images/superusb-8.png"></p>
<h1 id="至此，你的macOS-Ubuntu-WinPE超级启动盘制作完成。"><a href="#至此，你的macOS-Ubuntu-WinPE超级启动盘制作完成。" class="headerlink" title="至此，你的macOS+Ubuntu+WinPE超级启动盘制作完成。"></a>至此，你的macOS+Ubuntu+WinPE超级启动盘制作完成。</h1><h1 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h1><p><img src= "/images/loading.gif" data-lazy-src="/images/superusb-9.png"></p>
<h1 id="2019-7-30更新"><a href="#2019-7-30更新" class="headerlink" title="2019-7-30更新"></a>2019-7-30更新</h1><h2 id="重要注意事项"><a href="#重要注意事项" class="headerlink" title="重要注意事项"></a>重要注意事项</h2><p><strong><font color=#A52A2A >如果要把这个启动盘用于白苹果，记得挂载U盘EFI分区，将Boot-&gt;Bootx64.efi文件以及Clover-&gt;Cloverx64.efi文件的后缀(.efi)去掉，这样做的目的是干掉U盘的Clover启动项。以防止白苹果误进入Clover，这很重要，白苹果使用Clover会彻底黑屏变砖。白苹果可以按option键选择进入macOS安装盘、Ubuntu安装盘或WinPE启动盘，如果以后安装黑苹果，完全可以再把文件名改回来或者使用本地硬盘中的Clover引导启动盘。</font></strong></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>mi5开启全面屏手势教程(非原创，转自一个已经被miui论坛删除又幸运的被Chrome缓存下来的帖子)</title>
    <url>/2018/06/22/mi5-enable-gesture.html</url>
    <content><![CDATA[<h3 id="MI5用户，升级miui10，发现没有全面屏手势的同学可以来看看"><a href="#MI5用户，升级miui10，发现没有全面屏手势的同学可以来看看" class="headerlink" title="MI5用户，升级miui10，发现没有全面屏手势的同学可以来看看"></a>MI5用户，升级miui10，发现没有全面屏手势的同学可以来看看</h3><a id="more"></a>

<blockquote>
<p>我把我开启全面屏的过程写了一下，由于在过程中看到其他帖子写的太随便，不够详细，所以来写一个详细一些的，方便mi5用户体验全面屏手势，话说真的很好用啊，那些说不用root用第三方软件实现的手势不管是从美观程度和可用性都没原厂的好啊，刷完自己体会吧。</p>
</blockquote>
<h3 id="适用对象"><a href="#适用对象" class="headerlink" title="适用对象"></a>适用对象</h3><ul>
<li>已经获取root权限的mi5</li>
<li>已是开发版系统，并且在授权管理开启了root授权</li>
<li>稳定版用户，自行升级到开发版开启root权限，或者用其他办法获取root授权</li>
</ul>
<h3 id="简要流程"><a href="#简要流程" class="headerlink" title="简要流程"></a>简要流程</h3><ul>
<li>获取完整root权限</li>
<li>安装rec，挂载system分区</li>
<li>使用re文件管理器找到/system/build.prop文件，在文件尾部加入qemu.hw.mainkeys=0</li>
<li>重启手机，即可在设置中找到全面屏选项</li>
</ul>
<h3 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h3><blockquote>
<p>默认使用win10系统，已安装mi5的驱动。</p>
</blockquote>
<h4 id="获取完整root权限"><a href="#获取完整root权限" class="headerlink" title="获取完整root权限"></a>获取完整root权限</h4><ul>
<li>手机开启usb调试模式</li>
<li><a href="https://www.miui.com/forum.php?mod=attachment&aid=MjIzNzU2ODl8YjIwMjgyNGJlNjI1OGQxZTY3OGFhZmNhOTUyOTI2MzR8MTUyOTY1Njg5NA%3D%3D&request=yes&_f=.rar">下载一键破译分区工具</a></li>
<li>解压下载的文件，运行.bat文件，如图<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0racrzmmlj307003ogli.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0racylveqj30i2081aas.jpg"></li>
</ul>
<h4 id="安装rec，挂载system分区"><a href="#安装rec，挂载system分区" class="headerlink" title="安装rec，挂载system分区"></a>安装rec，挂载system分区</h4><ul>
<li><a href="https://www.miui.com/forum.php?mod=attachment&aid=MjIzNzYwNDd8Yjg4YjdlOWNmYjQ4OWI0NmJmZWFlMTFmMzc4NmMwODJ8MTUyOTY1Njg5NA%3D%3D&request=yes&_f=.apk">下载twrp.apk</a></li>
<li>手机安装下载的app（此app需要root权限，如果是开发版小米的root权限管理，去设置给他权限，其他root管理软件到对应的管理权限的地方，给它权限）</li>
<li>打开安装的app</li>
<li>选择TWRP FLASH</li>
<li>选择Select Device 找到 Xiaomi Mi 5 – gemini 并选择它</li>
<li>选最新的.img文件（例如xian在是：twrp-3.2.1-1-gemini.img） </li>
<li>他会提示是否要下载，点击okay</li>
<li>下载好了之后点击FLASH TO RECOVERY按钮</li>
<li>成功的话会提示：Flash completed Successfully!</li>
<li>失败的话，多半是root权限问题，检查一下是否给了这个软件root权限</li>
<li>按住音量上键并重启手机，直到手机出现twrp的logo时放开音量上键 进入rec</li>
<li>点击挂载，选择system分区，返回，重启手机</li>
</ul>
<h4 id="使用re管理器修改文件（此软件需要root权限）"><a href="#使用re管理器修改文件（此软件需要root权限）" class="headerlink" title="使用re管理器修改文件（此软件需要root权限）"></a>使用re管理器修改文件（此软件需要root权限）</h4><ul>
<li>下载一个re管理器，找到/system/build.prop这个文件（是文件不是文件夹）</li>
<li>以文本方式编辑，在文件最后加上 qemu.hw.mainkeys=0，保存</li>
<li>以文本方式查看一下它，看是否保存成功</li>
<li>如果失败多半是root权限或者挂载分区有问题，回到前面的步骤重试</li>
<li>如果保存成功，只需重启手机即可在设置中找到全面屏选项<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rad71il1j30fy0ppq3m.jpg"></li>
</ul>
<h4 id="如果想关掉全面屏，只需将-system-build-prop-文件中的-qemu-hw-mainkeys-0-删去，重启即可"><a href="#如果想关掉全面屏，只需将-system-build-prop-文件中的-qemu-hw-mainkeys-0-删去，重启即可" class="headerlink" title="如果想关掉全面屏，只需将/system/build.prop 文件中的 qemu.hw.mainkeys=0 删去，重启即可"></a>如果想关掉全面屏，只需将/system/build.prop 文件中的 qemu.hw.mainkeys=0 删去，重启即可</h4><blockquote>
<p>写的尽量详细了，如在过程中有问题，可以回复</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>mi5</tag>
        <tag>miui</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCore黑苹果方案以及ASRock Z390 Phantom Gaming-ITX/ac+i9-9900K OpenCore配置文件分享</title>
    <url>/2019/05/29/opencore-hackintosh.html</url>
    <content><![CDATA[<h1 id="OpenCore简介"><a href="#OpenCore简介" class="headerlink" title="OpenCore简介"></a>OpenCore简介</h1><p>OpenCore是由**<font color=#A52A2A >vit9696</font>**等8位大佬开发的全新黑苹果引导工具。用于在PC上启动macOS操作系统。博主用了一天时间已经成功启动博主电脑上的macOS，现在做简单分享。<a id="more"></a></p>
<h1 id="OpenCore编译"><a href="#OpenCore编译" class="headerlink" title="OpenCore编译"></a>OpenCore编译</h1><ul>
<li>APP Store安装Xcode。</li>
<li>终端执行如下命令，并点击最右侧的同意按钮安装命令行工具。<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure></li>
<li>在如下链接里下载编译脚本**<font color=#A52A2A >buildopencore，</font><strong>感谢pcbeta网友</strong><font color=#A52A2A >云朵有点甜</font>**编写脚本。<br><a href="http://bbs.pcbeta.com/viewthread-1814957-1-1.html">http://bbs.pcbeta.com/viewthread-1814957-1-1.html</a></li>
<li>解压并执行脚本,如图。编译后桌面生成OpenCore文件夹。<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">chmod u+x <span class="string">./buildopencore</span></span><br><span class="line"><span class="string">./buildopencore</span></span><br></pre></td></tr></table></figure>
  <img src= "/images/loading.gif" data-lazy-src="/images/opencore-1.png"><img src= "/images/loading.gif" data-lazy-src="/images/opencore-2.png"><img src= "/images/loading.gif" data-lazy-src="/images/opencore-3.png"><strong><font color=#A52A2A >注意：Docs文件夹里有官方文档以及plist文件示例。</font></strong></li>
</ul>
<h1 id="OpenCore使用简要教程"><a href="#OpenCore使用简要教程" class="headerlink" title="OpenCore使用简要教程"></a>OpenCore使用简要教程</h1><h2 id="文件夹结构-虚线框内的不是必须项目，视需求而定"><a href="#文件夹结构-虚线框内的不是必须项目，视需求而定" class="headerlink" title="文件夹结构(虚线框内的不是必须项目，视需求而定)"></a>文件夹结构(虚线框内的不是必须项目，视需求而定)</h2><p><img src= "/images/loading.gif" data-lazy-src="/images/opencore-4.png"></p>
<h2 id="config-plist文件解析-只介绍博主用到的"><a href="#config-plist文件解析-只介绍博主用到的" class="headerlink" title="config.plist文件解析(只介绍博主用到的)"></a>config.plist文件解析(只介绍博主用到的)</h2><h3 id="ACPI"><a href="#ACPI" class="headerlink" title="ACPI"></a>ACPI</h3><h4 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h4><p>添加aml文件，比如DSDT.aml。</p>
<h4 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h4><p>相当于Clover中的Drop Tables。用于屏蔽一些OEM Tables。如Drop DMAR。</p>
<h4 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h4><p>相当于Clover中的DSDT部件更名，例如：change HDAS to HDEF。</p>
<h4 id="ACPI部分整体图解"><a href="#ACPI部分整体图解" class="headerlink" title="ACPI部分整体图解"></a>ACPI部分整体图解</h4><p><img src= "/images/loading.gif" data-lazy-src="/images/opencore-5.png"></p>
<h3 id="DeviceProperties"><a href="#DeviceProperties" class="headerlink" title="DeviceProperties"></a>DeviceProperties</h3><h4 id="Add-1"><a href="#Add-1" class="headerlink" title="Add"></a>Add</h4><p>用于注入设备属性，比如声卡layout-id，核显帧补丁等。相当于Clover的Devices-&gt;Properties。<br><img src= "/images/loading.gif" data-lazy-src="/images/opencore-6.png"></p>
<h3 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h3><h4 id="Add-2"><a href="#Add-2" class="headerlink" title="Add"></a>Add</h4><p>用于注入kext路径。</p>
<h4 id="Patch-1"><a href="#Patch-1" class="headerlink" title="Patch"></a>Patch</h4><p>相当于Clover的KextsToPatch</p>
<h4 id="Kernel部分整体图解"><a href="#Kernel部分整体图解" class="headerlink" title="Kernel部分整体图解"></a>Kernel部分整体图解</h4><p><img src= "/images/loading.gif" data-lazy-src="/images/opencore-7.png"></p>
<h3 id="NVRAM-由于博主表达能力欠佳，这一部分请参考官方文档"><a href="#NVRAM-由于博主表达能力欠佳，这一部分请参考官方文档" class="headerlink" title="NVRAM(由于博主表达能力欠佳，这一部分请参考官方文档)"></a>NVRAM(由于博主表达能力欠佳，这一部分请参考官方文档)</h3><p><img src= "/images/loading.gif" data-lazy-src="/images/opencore-8.png"></p>
<h3 id="PlatformInfo"><a href="#PlatformInfo" class="headerlink" title="PlatformInfo"></a>PlatformInfo</h3><p>相当于Clover中的SMBIOS，使用OpenCore Configurator注入即可。<br><img src= "/images/loading.gif" data-lazy-src="/images/opencore-9.png"></p>
<h3 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h3><h4 id="Drivers"><a href="#Drivers" class="headerlink" title="Drivers"></a>Drivers</h4><p>用于注入用于启动的驱动信息，例如ApfsDriverLoader.efi等。<br><img src= "/images/loading.gif" data-lazy-src="/images/opencore-10.png"></p>
<h1 id="使用OpenCore引导博主电脑简要说明"><a href="#使用OpenCore引导博主电脑简要说明" class="headerlink" title="使用OpenCore引导博主电脑简要说明"></a>使用OpenCore引导博主电脑简要说明</h1><h2 id="博主电脑配置信息"><a href="#博主电脑配置信息" class="headerlink" title="博主电脑配置信息"></a>博主电脑配置信息</h2><p>ASRock Z390 Phantom Gaming-ITX/ac+i9-9900K+Vega56</p>
<h2 id="目前完美程度"><a href="#目前完美程度" class="headerlink" title="目前完美程度"></a>目前完美程度</h2><p>以太网卡+声卡+独显+核显+wifi+蓝牙+USB正常。睡眠唤醒正常。关机正常。原生电源以及AGPM正常，硬解正常。雷电只能当typec使用。</p>
<h2 id="OC文件夹结构"><a href="#OC文件夹结构" class="headerlink" title="OC文件夹结构"></a>OC文件夹结构</h2><p><img src= "/images/loading.gif" data-lazy-src="/images/opencore-11.png"></p>
<h2 id="SMBIOS"><a href="#SMBIOS" class="headerlink" title="SMBIOS"></a>SMBIOS</h2><p>iMac Pro 2017</p>
<h2 id="以太网卡、wifi、蓝牙、独显、USB"><a href="#以太网卡、wifi、蓝牙、独显、USB" class="headerlink" title="以太网卡、wifi、蓝牙、独显、USB"></a>以太网卡、wifi、蓝牙、独显、USB</h2><p>同Clover。</p>
<h2 id="声卡"><a href="#声卡" class="headerlink" title="声卡"></a>声卡</h2><ul>
<li>Lilu、AppleALC拷到L/E下。</li>
<li>DeviceProperties下注入声卡layout-id。</li>
<li>重建缓存。<br><img src= "/images/loading.gif" data-lazy-src="/images/opencore-12.png"></li>
</ul>
<h2 id="核显"><a href="#核显" class="headerlink" title="核显"></a>核显</h2><p>DeviceProperties下注入核显信息。<br><img src= "/images/loading.gif" data-lazy-src="/images/opencore-13.png"></p>
<h2 id="原生电源"><a href="#原生电源" class="headerlink" title="原生电源"></a>原生电源</h2><p>加入SSDT-XCPM-SBpr00.aml即可加载两个X86(博主会分享OC配置文件)。</p>
<h2 id="AGPM"><a href="#AGPM" class="headerlink" title="AGPM"></a>AGPM</h2><p>同Clover。</p>
<h2 id="关机变重启以及睡眠变重启解决方案"><a href="#关机变重启以及睡眠变重启解决方案" class="headerlink" title="关机变重启以及睡眠变重启解决方案"></a>关机变重启以及睡眠变重启解决方案</h2><p>使用OsxAptioFix2Drv-free2000.efi替换其他启动文件即可。</p>
<h1 id="博主电脑OpenCore配置文件分享"><a href="#博主电脑OpenCore配置文件分享" class="headerlink" title="博主电脑OpenCore配置文件分享"></a>博主电脑OpenCore配置文件分享</h1><p>博主已将OC文件推送至博主的Hackintosh仓库，详情以及用法见如下链接。<br><a href="https://www.bugprogrammer.me/2019/05/23/github-hackintosh.html">https://www.bugprogrammer.me/2019/05/23/github-hackintosh.html</a></p>
<h1 id="2019-05-31更新"><a href="#2019-05-31更新" class="headerlink" title="2019-05-31更新"></a>2019-05-31更新</h1><h2 id="一个小发现"><a href="#一个小发现" class="headerlink" title="一个小发现"></a>一个小发现</h2><p>OpenCore可以直接正确识别9代CPU型号，比如我的9900K显示为3.6 GHz Intel Core i9(Clover默认显示为i7)。</p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>OpenCore</tag>
      </tags>
  </entry>
  <entry>
    <title>Macbook Pro 2017安装macOS+Windows+Ubuntu简要教程</title>
    <url>/2019/03/06/mbp2017_win_mac_ubuntu.html</url>
    <content><![CDATA[<blockquote>
<p>各位访客想必已经发现本站<a href="https://www.bugprogrammer.me/">https://www.bugprogrammer.me</a> 已经一个月没有更新了，为了本站长期稳定运行下去，博主最近在做博客改版以及cdn、图床方案的测试，本站不会断更，也感谢大半年来各位访客的支持。言归正传，博主近期购入了MacBook Pro 2017，原因很简单，博主需要retina屏幕。黑苹果笔记本无法使用独显，目前的macOS版本下，核显+4K的配合会出现动画掉帧现象，即使是核显版本的mbp也难以幸免，所以想要retina+独显+macOS，只能购入mbp了。</p>
</blockquote>
<blockquote>
<p>博主发现mbp有一个神奇的地方，安装mac+win+linux超级麻烦，按普通pc方案，最后安装linux会出现问题，表现为安装完linux后，Windows会被破坏，无法进入(不是引导的问题，就是系统挂了！！！)，而macOS正常。博主Google了一下，发现很多教程都是老版本的mbp，区别很大。所以博主放出我自己的解决方案。</p>
</blockquote>
<a id="more"></a>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>mbp不同于普通PC，请严格按照博主的方案进行，否则会出现意想不到的问题。</li>
<li>mbp2018是否适用博主不敢保证，因为2018款的mac新增了一个T2芯片，有报道说T2会阻止Linux启动。</li>
</ul>
<h2 id="安装顺序-重中之重"><a href="#安装顺序-重中之重" class="headerlink" title="安装顺序(重中之重)"></a>安装顺序(重中之重)</h2><p><font color=#A52A2A ><strong>macOS Mojave–&gt;Ubuntu 18.04–&gt;Windows 10</strong></font></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>macOS Mojave镜像、Windows 10镜像、Ubuntu18.04镜像、Windows PE、外接键鼠。</p>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="安装macOS-Mojave"><a href="#安装macOS-Mojave" class="headerlink" title="安装macOS Mojave"></a>安装macOS Mojave</h3><p>正常安装即可，另外新买的mbp自带macOS系统，版本过老的话直接升级就可以。</p>
<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><ul>
<li>打开BootCamp(启动转换助理)，点击菜单栏上的操作，下载Windows支持软件，下载完毕后保存到U盘，如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/75a0d5124f3e6e152ffb49529f4580d1199f655e.jpg"></li>
<li>按照BootCamp的流程选择Windows 10镜像，确定Windows分区大小。</li>
<li>分区完成后会自动重启开始安装Windows 10，请注意此处要按Option建进入macOS，不要进入Windows分区。</li>
<li>打开macOS自带分区工具，此时我们会看到两个分区，一个macOS分区，一个BootCamp分区。点击macOS所在分区，点击+，新增分区，格式选择MS-DOS(FAT)，做为Ubuntu 18.04安装分区。<font color=#A52A2A ><strong>至此，我们拥有3个分区，分别安装macOS，Windows、Ubuntu。</strong></font></li>
</ul>
<h3 id="安装Ubuntu-18-04"><a href="#安装Ubuntu-18-04" class="headerlink" title="安装Ubuntu 18.04"></a>安装Ubuntu 18.04</h3><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><ul>
<li>下载Ubuntu 18.04修改版本(来自网络大神，已经集成mbp2017内置键盘，触摸板，touch bar驱动，安装方便)<br><a href="https://goo.gl/4ddQMu">https://goo.gl/4ddQMu</a></li>
<li>使用usbwriter将Ubuntu 18.04镜像写入U盘。</li>
</ul>
<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><ul>
<li>插入U盘，重启按住Option，选择Ubuntu 18.04安装盘，选择安装(注意：不可以选择试用，安装会出错)。</li>
<li>分区：找到之前分配的fat32格式分区，点击-，删除分区，这样会得到一部分空闲分区。按照自己习惯将空闲分区进行分配。博主的分配方案是：efi、boot、home、/、swap。</li>
<li>分区完成后，继续安装。</li>
</ul>
<blockquote>
<p>至此，我们在开机时按住Option键即可自由切换macOS和Ubuntu。</p>
</blockquote>
<h4 id="安装Windows"><a href="#安装Windows" class="headerlink" title="安装Windows"></a>安装Windows</h4><blockquote>
<p>因为我们已经自行创建了Ubuntu分区，所以已经不能使用BootCamp安装Windows 10。</p>
</blockquote>
<ul>
<li><font color=#A52A2A ><strong>在macOS下将之前分配好的BootCamp分区格式化为hfs格式。(重中之重)</strong></font></li>
<li>进入winpe，连接外接键鼠。</li>
<li>winpe下打开分区工具，将刚才格式化为hfs格式的分区格式化为ntfs格式，供Windows 10使用。</li>
<li>打开winntsetup工具，将Windows安装到ntfs格式分区。</li>
</ul>
<blockquote>
<p>安装完成后重启发现无法进入Windows 10，请进行如下操作。</p>
</blockquote>
<ul>
<li>进入Ubuntu 18.04，打开终端，输入如下命令<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo update-grub</span></span><br></pre></td></tr></table></figure></li>
<li>重启进入Ubuntu启动项，会在grub菜单中看到Windows Boot Manager选项，回车选择，完成Windows 10安装。</li>
<li>进入Windows 10后，安装之前下载的Windows支持软件。</li>
</ul>
<blockquote>
<p>至此，三个系统已经安装完成，并且都可以启动成功。开机按住Option键，看到两个启动项。选择mac启动项进入macOS，选择Windows启动项进入grub界面，grub下有Ubuntu 18.04以及Windows Boot Manager两个选项。什么，切换系统不方便？？往下看！！！</p>
</blockquote>
<h3 id="安装refind，实现自动引导"><a href="#安装refind，实现自动引导" class="headerlink" title="安装refind，实现自动引导"></a>安装refind，实现自动引导</h3><ul>
<li>下载refind并解压<br><a href="https://sourceforge.net/projects/refind/">https://sourceforge.net/projects/refind/</a></li>
<li>打开文件夹，执行refind-install脚本即可成功安装refind，如图。<br><img src= "/images/loading.gif" data-lazy-src="/images/8632cec3cc44f7485e92c8727ba9e3a17a7fb808.jpg"></li>
<li>进入Windows 10，安装bootice软件。</li>
<li>使用bootice将refind设置为第一启动项。</li>
<li>重启即可看到refind引导界面。</li>
<li>按delete键隐藏不需要的启动项，保留macOS、Windows、Ubuntu即可。</li>
<li>什么？refind默认界面不好看？emmmm，那就换个主题吧！！Google大把教程！！！</li>
</ul>
<blockquote>
<p>至此，MacBook Pro 2017安装macOS+Windows+Ubuntu成功！！！</p>
</blockquote>
]]></content>
      <categories>
        <category>Macintosh</category>
      </categories>
      <tags>
        <tag>Macintosh</tag>
        <tag>Linux</tag>
        <tag>MacBook Pro</tag>
      </tags>
  </entry>
  <entry>
    <title>最简单的挂载EFI分区方案</title>
    <url>/2019/12/03/mountEFI.html</url>
    <content><![CDATA[<blockquote>
<p>博主使用OC已经有一段时间，最近发现一个不爽点。OC配置本身不需要各种GUI工具，但是，每次挂载EFI都要打开类似Clover Configurator的工具挂载EFI，比较麻烦，所以博主分享一种点击即挂载并打开EFI分区的方案。<a id="more"></a></p>
</blockquote>
<h1 id="获取EFI分区的UUID"><a href="#获取EFI分区的UUID" class="headerlink" title="获取EFI分区的UUID"></a>获取EFI分区的UUID</h1><ul>
<li>用Clover Configurator看一下负责引导的EFI分区的分区号，比如博主的是<font color=#A52A2A >disk0s1</font>。(详细过程略，相信大家都懂)</li>
<li>输入以下命令获取UUID。<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> diskutil <span class="literal">info</span> disk0s1 | grep <span class="string">&#x27;Partition UUID&#x27;</span></span><br></pre></td></tr></table></figure>
  <img src= "/images/loading.gif" data-lazy-src="/images/mountEFI.png"></li>
</ul>
<h1 id="准备应用程序"><a href="#准备应用程序" class="headerlink" title="准备应用程序"></a>准备应用程序</h1><ul>
<li><p>打开系统自带的自动操作程序，依次点击应用程序-&gt;选取-&gt;运行shell脚本。<br><img src= "/images/loading.gif" data-lazy-src="/images/unlock-1.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/unlock-2.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/unlock-3.png"></p>
</li>
<li><p>将以下脚本粘贴进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mountEFI=$(<span class="built_in">echo</span> <span class="string">&#x27;你的密码&#x27;</span> | sudo -S diskutil info 你的UUID | grep <span class="string">&#x27;Device Node&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;你的密码&#x27;</span> | sudo -S diskutil mount <span class="string">&#x27;/&#x27;</span><span class="variable">$&#123;mountEFI#*/&#125;</span></span><br><span class="line">open /Volumes/EFI/EFI/OC</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/mountEFI-1.png"></p>
</li>
<li><p>保存成app<br><img src= "/images/loading.gif" data-lazy-src="/images/mountEFI-2.png"></p>
</li>
</ul>
<blockquote>
<p>至此，您已经成功制作EFI挂载工具，以后只要点击就可以直接挂载并打开！</p>
</blockquote>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP+Nginx+MySQL搭建网站简易教程(以Centos7为例)</title>
    <url>/2018/05/19/phpnginxmysql.html</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>一台vps</li>
<li>一个域名并做好域名解析(本人在godaddy 购买的),解析之后ping域名，如果返回的是vps的ip，则域名解析成功。如图：<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raflgpljj30nu03emyp.jpg"></li>
<li>一个SSL证书，个人网站免费的Let’s Encrypt即可(申请过程后面讲)。<a id="more"></a></li>
</ul>
<h3 id="安装PHP7-0及其扩展"><a href="#安装PHP7-0及其扩展" class="headerlink" title="安装PHP7.0及其扩展"></a>安装PHP7.0及其扩展</h3><ul>
<li>更新yum源<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https:<span class="regexp">//</span>dl.fedoraproject.org<span class="regexp">/pub/</span>epel<span class="regexp">/epel-release-latest-7.noarch.rpm rpm -Uvh https:/</span><span class="regexp">/mirror.webtatic.com/yum</span><span class="regexp">/el7/</span>webtatic-release.rpm</span><br></pre></td></tr></table></figure></li>
<li>安装PHP7.0(php70w-common,php70w-fpm,php70w-mysqlnd必须必须安装)<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum</span> install php<span class="number">70</span>w-common php<span class="number">70</span>w-fpm php<span class="number">70</span>w-opcache php<span class="number">70</span>w-gd php<span class="number">70</span>w-mysqlnd php<span class="number">70</span>w-mbstring php<span class="number">70</span>w-pecl-redis php<span class="number">70</span>w-pecl-memcached php<span class="number">70</span>w-devel</span><br></pre></td></tr></table></figure></li>
<li>版本验证<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">php -v</span></span><br></pre></td></tr></table></figure></li>
<li>查看显示，如图则成功。<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rafz02acj30vc04ujtk.jpg"></li>
</ul>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><ul>
<li><p>安装wget(顺便吐槽CentOS)</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> wget</span><br></pre></td></tr></table></figure></li>
<li><p>下载MySQL源包</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>dev.mysql.com<span class="regexp">/get/my</span>sql57-community-release-el7-<span class="number">8</span>.noarch.rpm</span><br></pre></td></tr></table></figure></li>
<li><p>安装MySQL源包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum</span> localinstall mysql<span class="number">57</span>-community-release-el<span class="number">7</span>-<span class="number">8</span>.noarch.rpm</span><br></pre></td></tr></table></figure></li>
<li><p>yum安装MySQL</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动MySQL服务(如不报错则为成功)</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> mysqld</span><br></pre></td></tr></table></figure>
<h3 id="修改Mysql-root密码"><a href="#修改Mysql-root密码" class="headerlink" title="修改Mysql root密码"></a>修改Mysql root密码</h3><blockquote>
<p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改。</p>
</blockquote>
</li>
<li><p>输入如下命令</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grep</span> <span class="string">&#x27;temporary password&#x27;</span> <span class="regexp">/var/</span>log/mysqld.log</span><br></pre></td></tr></table></figure>
<p>  返回的字符串就是默认生成的密码。如图：<br>  <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ragcl5pkj315801st9j.jpg"></p>
</li>
<li><p>输入以下命令并输入默认密码进入MySQL</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -uroot -p</span></span><br></pre></td></tr></table></figure></li>
<li><p>输入以下命令修改密码</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="comment">for root@localhost = password(</span><span class="comment">&#x27;新密码&#x27;</span><span class="comment">)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>刷新权限</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">flush</span> privileges；</span><br></pre></td></tr></table></figure>
<h3 id="编译安装Nginx"><a href="#编译安装Nginx" class="headerlink" title="编译安装Nginx"></a>编译安装Nginx</h3></li>
</ul>
<h4 id="选择编译安装Nginx的理由"><a href="#选择编译安装Nginx的理由" class="headerlink" title="选择编译安装Nginx的理由"></a>选择编译安装Nginx的理由</h4><blockquote>
<p>因为nginx功能强大，模块众多，所以自己需要了解究竟需要什么模块，实现那些功能，这就需要我们自己定制Nginx，编译安装满足高自定义性，故采用编译安装。</p>
</blockquote>
<h4 id="编译教程"><a href="#编译教程" class="headerlink" title="编译教程"></a>编译教程</h4><ul>
<li><p>下载Nginx源码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>nginx.org<span class="regexp">/download/</span>nginx-<span class="number">1.14</span>.<span class="number">0</span>.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>解压并进入nginx目录，如图则正确</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf nginx-<span class="number">1</span>.<span class="number">14</span>.<span class="number">0</span>.tar.gz &amp;&amp; cd nginx-<span class="number">1</span>.<span class="number">14</span>.<span class="number">0</span> &amp;&amp; ls</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ragsj5m4j30xk01u3z2.jpg"></p>
</li>
<li><p>安装所需环境</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre pcre-devel <span class="literal">zlib</span> <span class="literal">zlib</span>-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li>
<li><p>生成MakeFile,如图则成功(–with-http_v2_module为http 2.0模块，–with-http_ssl_module为SSL模块，尤为重要)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">./configure --prefix=<span class="regexp">/usr/</span>local/nginx --<span class="keyword">with</span>-http_stub_status_module --<span class="keyword">with</span>-http_ssl_module --<span class="keyword">with</span>-stream --<span class="keyword">with</span>-stream_ssl_module --<span class="keyword">with</span>-http_v2_module --<span class="keyword">with</span>-threads</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rah8cr7ij30sg0fa43p.jpg"></p>
</li>
<li><p>编译及安装</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></li>
<li><p>启动nginx</p>
<p>  输入如下命令并在浏览器输入ip或域名，如看到nginx主页，恭喜安装成功啦！</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx</span><br></pre></td></tr></table></figure>
<h3 id="Nginx基础使用"><a href="#Nginx基础使用" class="headerlink" title="Nginx基础使用"></a>Nginx基础使用</h3></li>
</ul>
<h4 id="Nginx相关文件路径"><a href="#Nginx相关文件路径" class="headerlink" title="Nginx相关文件路径"></a>Nginx相关文件路径</h4><ul>
<li>主文件：/usr/local/nginx/sbin/nginx</li>
<li>配置文件：/usr/local/nginx/conf/nginx.conf</span></li>
<li>日志文件：<br>/usr/local/nginx/logs/error.log (错误日志)<br />       /usr/local/nginx/logs/access.log (成功文件)</li>
</ul>
<h4 id="Nginx相关操作"><a href="#Nginx相关操作" class="headerlink" title="Nginx相关操作"></a>Nginx相关操作</h4><blockquote>
<p>启动</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重启</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx -s restart</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关闭</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx -s stop</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看配置文件</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看出错日志</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>logs/error.log</span><br></pre></td></tr></table></figure>
<h4 id="nginx-conf简单解读-写法很多"><a href="#nginx-conf简单解读-写法很多" class="headerlink" title="nginx.conf简单解读(写法很多)"></a>nginx.conf简单解读(写法很多)</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment">#监听80端口，接收http请求</span></span><br><span class="line">    <span class="attribute">server_name</span>  bugprogrammer.tk; <span class="comment">#就是网站地址</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/phpmyadmin; <span class="comment"># 准备存放代码工程的路径</span></span><br><span class="line">    <span class="comment">#路由到网站根目录bugprogrammer.me时候的处理</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> index.php; <span class="comment">#跳转到bugprogrammer.tk/index.php</span></span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">#当请求网站下php文件的时候，反向代理到php-fpm</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> /usr/local/etc/nginx/fastcgi.conf; <span class="comment">#加载nginx的fastcgi模块</span></span><br><span class="line">        <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>; <span class="comment">#nginx fastcgi进程监听的IP地址和端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="php-fpm-Nginx整合配置"><a href="#php-fpm-Nginx整合配置" class="headerlink" title="php-fpm+Nginx整合配置"></a>php-fpm+Nginx整合配置</h3><h4 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h4><p>   取消首行user以及php-fpm模块前的注释,并修改网站目录(注意主服务和php-fpm都要修改)，如图：</p>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rai09k5kj30jk03qglp.jpg"></p>
<p> <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raial5exj30ui05swfz.jpg"></p>
<h4 id="在网站目录-上图为phpmyadmin目录-新建一个index-php文件，并粘贴如下代码-伟大的Hello-World！！！"><a href="#在网站目录-上图为phpmyadmin目录-新建一个index-php文件，并粘贴如下代码-伟大的Hello-World！！！" class="headerlink" title="在网站目录(上图为phpmyadmin目录)新建一个index.php文件，并粘贴如下代码(伟大的Hello World！！！)"></a>在网站目录(上图为phpmyadmin目录)新建一个index.php文件，并粘贴如下代码(伟大的Hello World！！！)</h4><figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>PHP 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Hello World&lt;/p&gt;&#x27;</span>; <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="启动php-fpm"><a href="#启动php-fpm" class="headerlink" title="启动php-fpm"></a>启动php-fpm</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service php-fpm <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>启动Nginx(见Nginx相关操作)并在浏览器输入域名或ip测试，如下及成功。</p>
</blockquote>
<p><img src= "/images/loading.gif" data-lazy-src="/images/QQ20180519-0034182x.png"></p>
<h3 id="建立网站-以phpmyadmin为例"><a href="#建立网站-以phpmyadmin为例" class="headerlink" title="建立网站(以phpmyadmin为例)"></a>建立网站(以phpmyadmin为例)</h3><ul>
<li><p>下载phpmyadmin最新版并解压到网站目录下，如图：</p>
<p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rainsehgj31e60noh23.jpg"></p>
</li>
<li><p>重启nginx并测试网站</p>
</li>
</ul>
<h3 id="相关错误以及解决方案"><a href="#相关错误以及解决方案" class="headerlink" title="相关错误以及解决方案"></a>相关错误以及解决方案</h3><h4 id="常见错误1，如图"><a href="#常见错误1，如图" class="headerlink" title="常见错误1，如图"></a>常见错误1，如图</h4><p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raixovo5j328s070wfz.jpg"></p>
<blockquote>
<p>这个错误的原因是phpmyadmin找不到sesson的存放路径，所以在浏览器允许session的情况下需要调整php的配置文件php.ini</p>
</blockquote>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul>
<li>打开php.ini(路径为)，并添加如下参数<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">session.save_path</span> = <span class="string">&quot;/var/lib/php/session&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>创建sesson存储目录，给予读写权限，并调整所属用户即可解决<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/var/</span>lib<span class="regexp">/php/</span>session &amp;&amp; chmod -R <span class="number">777</span> <span class="regexp">/var/</span>lib<span class="regexp">/php/</span>session &amp;&amp; chown -R nobody:nobody <span class="regexp">/var/</span>lib<span class="regexp">/php/</span>session</span><br></pre></td></tr></table></figure>
<h4 id="常见错误2，如图"><a href="#常见错误2，如图" class="headerlink" title="常见错误2，如图"></a>常见错误2，如图</h4><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rajw7itcj30r40xswhw.jpg"></li>
</ul>
<h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><p>进入phpmyadmin目录下将config.sample.inc.php文件改名为config.inc.php并打开，将$cfg[‘Servers’][$i][‘host’] = ‘localhost’改为<br>$cfg[‘Servers’][$i][‘host’] = ‘127.0.0.1’并保存，命令及图解如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cd</span> /<span class="selector-tag">var</span>/<span class="selector-tag">www</span>/<span class="selector-tag">phpmyadmin</span> &amp;&amp; <span class="selector-tag">mv</span> <span class="selector-tag">config</span><span class="selector-class">.sample</span><span class="selector-class">.inc</span><span class="selector-class">.php</span> <span class="selector-tag">config</span><span class="selector-class">.inc</span><span class="selector-class">.php</span> &amp;&amp; <span class="selector-tag">nano</span> <span class="selector-tag">config</span><span class="selector-class">.inc</span><span class="selector-class">.php</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rakbiwkaj30jg05wta5.jpg"></p>
<h4 id="常见错误3，如图"><a href="#常见错误3，如图" class="headerlink" title="常见错误3，如图"></a>常见错误3，如图</h4><p> <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rakk9axdj31vu02wwer.jpg"></p>
<h5 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h5><p>同(2)打开config.inc.php，找到$cfg[‘blowfish_secret’] = ‘’,在引号中填写短语密码，推荐填写UUID，如图：<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ralsvm28j30p20163yt.jpg"></p>
<h4 id="常见错误4，如图"><a href="#常见错误4，如图" class="headerlink" title="常见错误4，如图"></a>常见错误4，如图</h4><p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ram4443kj31vs02ggmb.jpg"></p>
<h5 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h5><p>创建tmp文件夹并给予读写权限即可</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> tmp &amp;&amp; <span class="keyword">chmod</span> <span class="number">777</span> tmp</span><br></pre></td></tr></table></figure>
<h3 id="阶段成果"><a href="#阶段成果" class="headerlink" title="阶段成果"></a>阶段成果</h3><p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rame2gaaj30p00oggnx.jpg"> <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ramml3d3j329m1ke7n3.jpg"></p>
<h3 id="后续优化-前提是按照我的教程编译安装的Nginx-注意SSL和HTTP-2-0模块"><a href="#后续优化-前提是按照我的教程编译安装的Nginx-注意SSL和HTTP-2-0模块" class="headerlink" title="后续优化(前提是按照我的教程编译安装的Nginx,注意SSL和HTTP 2.0模块)"></a>后续优化(前提是按照我的教程编译安装的Nginx,注意SSL和HTTP 2.0模块)</h3><h4 id="升级https"><a href="#升级https" class="headerlink" title="升级https"></a>升级https</h4><ul>
<li><p>关闭Nginx</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx -s stop</span><br></pre></td></tr></table></figure></li>
<li><p>获得Let’s Encrypt官方客户端并进入相应目录(如果没有安装git请先yum install git)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/letsencrypt/</span>letsencrypt &amp;&amp; cd letsencrypt</span><br></pre></td></tr></table></figure></li>
<li><p>申请SSL证书,请按要求填写域名，邮箱，最后一张图代表成功，申请后路径在/etc/letsencrypt/live/域名/,一共4个文件</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">./certbot-<span class="built_in">auto</span> certonly</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ramzrwdsj312w0leaft.jpg"><br>  <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0randesxaj30v40ay41x.jpg"><br>  <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rano5p6uj314s05kq51.jpg"></p>
</li>
<li><p>修改Nginx.conf，添加SSL支持。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    …</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/</span>域名/fullchain.pem;</span><br><span class="line">    ssl_certificate_key <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/</span>域名/privkey.pem;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers ‘EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH’;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动Nginx，分别用http://域名和https://域名测试网站，如果https可以进入，http不能进入，你就成功一半了。</p>
</li>
<li><p>实现http自动跳转到https</p>
<p>  新建如下server即可</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> 域名;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>用http://域名测试网站，如果能自动跳转https则成功。</p>
<p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raofxm8bj30ea01omx6.jpg"></p>
</li>
</ul>
</li>
</ul>
<h4 id="更新-SSL通配符版本申请"><a href="#更新-SSL通配符版本申请" class="headerlink" title="(更新)SSL通配符版本申请"></a>(更新)SSL通配符版本申请</h4><blockquote>
<p>一个天大的好消息，Let’s Encrypt已经发布了通配符版本SSL证书。顾名思义，通配符SSL证书不再需要为每一个二级域名重复申请SSL证书，以域名bugprogrammer.tk为例，只需要申请*.bugprogrammer.tk以及bugprogrammer.tk即可用于根域名以及所有二级域名，非常方便。申请教程如下。</p>
</blockquote>
<ul>
<li><p>获取最新版Let’s Encrypt客户端</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//<span class="built_in">get</span>.acme.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></li>
<li><p>申请通配符SSL证书，按要求输入邮箱，同意条款等操作，如图。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">./<span class="selector-tag">certbot-auto</span> <span class="selector-tag">certonly</span>  <span class="selector-tag">-d</span> *<span class="selector-class">.bugprogrammer</span><span class="selector-class">.tk</span> <span class="selector-tag">-d</span> <span class="selector-tag">bugprogrammer</span><span class="selector-class">.tk</span> <span class="selector-tag">--manual</span> <span class="selector-tag">--preferred-challenges</span> <span class="selector-tag">dns</span> <span class="selector-tag">--server</span> <span class="selector-tag">https</span>://<span class="selector-tag">acme-v02</span><span class="selector-class">.api</span><span class="selector-class">.letsencrypt</span><span class="selector-class">.org</span>/<span class="selector-tag">directory</span></span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raor0tq6j31nm0wqqbh.jpg"></p>
</li>
<li><p><strong><em>至关重要的步骤，</em></strong>按如下图操作，在域名DNS设置处添加*<strong>TXT**<em>类型解析，如下图即为：</em></strong>name:_acmechallenge<br>value:UYgQnnncMwZ9Z_Ja1mtkbTmayZP_5IDQcXgWIWlyY8w。***<br>添加解析后回车继续。因为我们同时申请了*.bugprogrammer.tk以及bugprogrammer.tk，所以会出现两个解析要求。<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raoz7dk9j314o0fg0ud.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rap7mas5j327k076q4a.jpg"></p>
</li>
<li><p>如下图即为成功<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rapgxju2j31320eqdhv.jpg"></p>
</li>
</ul>
<h4 id="升级http2"><a href="#升级http2" class="headerlink" title="升级http2"></a>升级http2</h4><ul>
<li><p>打开nginx.conf，在listen 443 ssl后面加上http2并重启nginx</p>
<p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rapq9gdnj30dg0360st.jpg"></p>
</li>
<li><p>打开<a href="https://myssl.com/http2_check.html%EF%BC%8C">https://myssl.com/http2_check.html，</a> 输入域名检测是否成功，成功如图：</p>
</li>
</ul>
<p><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raq4onyqj313q0letb4.jpg"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>MySQL</tag>
        <tag>Nginx</tag>
        <tag>PHP</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>小米6第三方Project Treble实现</title>
    <url>/2018/05/08/project-treble-for-xiaomi-mi6-unofficial.html</url>
    <content><![CDATA[<h3 id="关于Project-Treble"><a href="#关于Project-Treble" class="headerlink" title="关于Project Treble"></a>关于Project Treble</h3><blockquote>
<p>为了解决Android碎片化问题，减少技术支持层面的拖累，Google终于开窍了，在推广最新Android 8.x（又称Android O）时提出了“Project Treble”计划<a id="more"></a>。</p>
</blockquote>
<blockquote>
<p>在Project Treble计划出现以前，Android手机的更新都是这种节奏：Android新版本发布，处理器厂商会拿到第一手资源，进行底层的适配和修改后发送给采购该处理器的手机厂商，而后者会根据自己的需要继续修改系统。</p>
</blockquote>
<blockquote>
<p>而Project Treble计划则改变了这个流程，谷歌将原本由芯片厂商负责的代码修改工作纳入到Android项目中，绕过芯片厂而直接将打包好处理器适配性的系统发送给手机厂商，从而大大节省时间和研发难度，让手机厂商升级系统的门槛变得更低。同时也使第三方Rom(如Lineage)的适配变得容易。</p>
</blockquote>
<blockquote>
<p>对谷歌来说，让所有的Android手机都能像其亲儿子“Pixel”系列一样，可以直接接收自己的推送更新才是终极目标(为Google打Call)。</p>
</blockquote>
<h3 id="国内Project-Treble支持现状"><a href="#国内Project-Treble支持现状" class="headerlink" title="国内Project Treble支持现状"></a>国内Project Treble支持现状</h3><blockquote>
<p>由于众所周知的原因，国内的山寨”安卓”和国际上正版的”Android”根本不是一个世界，广大国产手机还有好多机型尚未吃上Android 8.x，无从谈起Project Treble，少数预装8.x的机型并没有跟进Project Treble这个Android史上最大的底层变化，所以非官方Project Treble应运而生。</p>
</blockquote>
<h3 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h3><ul>
<li><p>Recovery</p>
<blockquote>
<p>Android设备的还原模式，类似于Windows上臭名远扬的Ghost。。。可以执行刷写，清除等操作。建议使用twrp。recovery实际是一个精简的Linux系统加上Google开发的GUI，和Android OS同级。</p>
</blockquote>
</li>
<li><p>Bootloader</p>
<blockquote>
<p>BootLoader是在操作系统内核运行之前运行。可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。在嵌入式系统中，通常并没有像BIOS那样的固件程序（注，有的嵌入式CPU也会内嵌一段短小的启动程序），因此整个系统的加载启动任务就完全由BootLoader来完成。在一个基于ARM7TDMI core的嵌入式系统中，系统在上电或复位时通常都从地址0x00000000处开始执行，而在这个地址处安排的通常就是系统的BootLoader程序。为了安全起见，Android的BootLoader通常是锁定的，因此想要刷写rom必须解锁，不同手机解锁方式不同，也有的手机无法解锁。</p>
</blockquote>
</li>
<li><p>Adb</p>
<blockquote>
<p>全称Android Debug Bridge，起到连接桥的作用。</p>
</blockquote>
</li>
<li><p>GSI</p>
<blockquote>
<p>Project Treble的通用镜像。</p>
</blockquote>
</li>
</ul>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul>
<li><p><a href="http://bigota.d.miui.com/tools/MiFlash2017-12-12-0-ex.zip">下载并安装Android必备驱动(可以用小米线刷工具)</a></p>
</li>
<li><p><a href="http://adbshell.com/upload/adb.zip">下载adb工具包并且把路径粘贴到path中方便调用。</a></p>
</li>
<li><p><a href="https://tx5.androidfilehost.com/dl/IZNJy7Ho94g2VDXuXEqsKQ/1525938076/818070582850499029/twrp-3.2.1-0-sagit-blankaf-3.img">下载支持Project Treble的Recovery</a></p>
</li>
<li><p><a href="https://tx5.androidfilehost.com/dl/aXZKVCDmTMQjF14uBMfdOQ/1525938364/890129502657591482/ProjectTrouble-MI6-sagit-treble-v2-BETA.zip">下载Project Treble卡刷包</a></p>
</li>
<li><p><a href="https://tx5.androidfilehost.com/dl/T0mVmfhLtO7_CtV2jWwS3A/1525938498/673956719939836698/system-arm64-aonly-gapps-su.img">下载GSI镜像</a></p>
</li>
<li><p>刷入Recovery:将Recovery文件拷贝到磁盘根目录,假设在D盘，并改一个简单的名字，假设改成recovery.img。手机进入Fastboot模式(电源+音量-)，打开cmd或powershell，输入如下命令即可:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">fastboot</span> <span class="selector-tag">flash</span> <span class="selector-tag">recovery</span> <span class="selector-tag">d</span>:\<span class="selector-tag">recovery</span><span class="selector-class">.img</span></span><br></pre></td></tr></table></figure></li>
<li><p>刷入Project Treble卡刷包：卡刷包拷入手机根目录，手机进入Recovery模式(电源+音量+)清除Dalvik/Cache/System/Data/Vendor 等分区，点击安装，找到卡刷包刷入。</p>
</li>
<li><p>刷入GSI镜像：手机进入Fastboot模式(电源+音量-)，将GSI拷贝到D盘并重命名为system.img，打开cmd或powershell，输入如下命令即可，完成后重启手机即可。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">fastboot flash <span class="keyword">system</span> d:\<span class="keyword">system</span>.img</span><br></pre></td></tr></table></figure></li>
<li><p>检测是否成功：查看手机型号为Phh-Treble with GApps则为成功。酷安下载Treble Check，第一项打钩表示成功。如图即为成功：<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ratgqs3lj304p08c3yu.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ratnz3fjj304p08cjs4.jpg"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android Rom</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Project Treble</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 10.14.6 beta下填充PCI列表的简要教程</title>
    <url>/2019/05/21/pci-list-for-hackintosh.html</url>
    <content><![CDATA[<blockquote>
<p>不知各位爱好者是否发现了一些朋友的黑苹果系统中,关于本机里的pci列表下有详细的设备信息。以前实现这个比较麻烦，需要ssdt。现在已经有简便方案。<a id="more"></a></p>
</blockquote>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>目前白苹果上并没有显示PCI列表，所以，各位是否实现全靠自愿。</p>
<h3 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h3><ul>
<li><a href='http://headsoft.com.au/download/mac/Hackintool.zip'>Hackintool</a></li>
<li>Clover Configurator</li>
</ul>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul>
<li>打开Clover Configurator，依次点击<font color=#A52A2A ><strong><em>Boot.log-&gt;Generate log-&gt;Save boot.log to desktop</em></strong></font>，如图。生成在桌面的文件名称为bootlog.txt。<br><img src= "/images/loading.gif" data-lazy-src="/images/pcilist-1.png"></li>
</ul>
<h4 id="下面以NVME-SSD-SM961为例进行讲解"><a href="#下面以NVME-SSD-SM961为例进行讲解" class="headerlink" title="下面以NVME SSD SM961为例进行讲解"></a>下面以NVME SSD SM961为例进行讲解</h4><ul>
<li>打开Hackintool，记住SM961的设备id，如图即为0xA804。<br><img src= "/images/loading.gif" data-lazy-src="/images/pcilist-2.png"></li>
<li>打开之前保存的bootlog.txt文件，搜索A804，我们会发现这一行数据中有一个形如xx:xx.xx的字符串，这个就是pciaddr,记下它，稍后会用到。如图：pciaddr为<font color=#A52A2A ><strong><em>04:00.00</em></strong></font><br><img src= "/images/loading.gif" data-lazy-src="/images/pcilist-3.png"></li>
<li>使用Clover Configurator打开config.plist,依次点击Devices-&gt;Arbitrary,按图示填写数据即可显示PCI列表。<font color=#A52A2A ><strong><em>注意：PciAddr一栏填写刚才查询出来的pciaddr，即</em></strong>04:00.00*<strong>,Comment一栏随便填。右侧属性栏中的Key值至少有两个参数**<em>AAPL,slot-name</em></strong>以及*<strong>model**<em>，Value随便填，Value Type选STRING</em></strong>。</font><br><img src= "/images/loading.gif" data-lazy-src="/images/pcilist-4.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/pcilist-5.png"></li>
</ul>
<h3 id="一个特殊情况-声卡"><a href="#一个特殊情况-声卡" class="headerlink" title="一个特殊情况(声卡)"></a>一个特殊情况(声卡)</h3><p>由于我们在注入声卡属性时会覆盖layout-id，导致声卡无声。所以如果要注入声卡属性，要在clover下做如下设置。</p>
<ul>
<li><font color=#A52A2A ><strong><em>Devices-&gt;Audio-&gt;inject-&gt;No</em></strong><font></li>
<li><font color=#A52A2A ><strong><em>Boot-&gt;alcid=layout-id</em></strong><font><br><img src= "/images/loading.gif" data-lazy-src="/images/pcilist-6.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/pcilist-7.png"></li>
</ul>
<h3 id="至此，您已经成功显示PCI列表"><a href="#至此，您已经成功显示PCI列表" class="headerlink" title="至此，您已经成功显示PCI列表"></a>至此，您已经成功显示PCI列表</h3>]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10下忘记密码的解决方案(本地账户，微软账户通杀)</title>
    <url>/2018/05/27/reset-password-for-windows-10.html</url>
    <content><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>我们知道Windows下连按5次shift会弹出粘滞键，他的程序名称是sethc.exe。经测试在Windows登录界面处输入密码之前按5次shift键也可以启动sethc.exe。所以只要把cmd.exe重命名为sethc.exe就可以在登录之前打开cmd以便我们为所欲为。<a id="more"></a></p>
</blockquote>
<h3 id="PE破解密码的缺陷"><a href="#PE破解密码的缺陷" class="headerlink" title="PE破解密码的缺陷"></a>PE破解密码的缺陷</h3><p>如果电脑安装了双Windows系统，如win7+win10，pe破解可能失效。</p>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul>
<li>准备好windows 10安装U盘。</li>
<li>U盘启动，点击下一步-&gt;修复计算机-&gt;疑难解答-&gt;命令提示符(一定要在安装盘下进入，系统下直接进入高级模式会要求输入密码)，如图<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0raufjiqgj30sg0lcq30.jpg"><br>如出现下图则说明你不是通过安装盘进入的高级模式。<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rauu65rxj30sg0lcwes.jpg"></li>
<li>导航进入系统盘符，注意不一定是C盘，用dir命令查看盘符下的文件已确定是不是系统盘。如</span><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">C</span>:</span><br><span class="line"><span class="attribute">cd</span> Windows/System<span class="number">32</span></span><br></pre></td></tr></table></figure></li>
<li>输入以下命令将cmd重命名，3、4步骤如图</span><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ren</span> <span class="selector-tag">sethc</span><span class="selector-class">.exe</span> <span class="selector-tag">AAA</span><span class="selector-class">.exe</span></span><br><span class="line"><span class="selector-tag">ren</span> <span class="selector-tag">cmd</span><span class="selector-class">.exe</span> <span class="selector-tag">sethc</span><span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure>
<img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0rav9bi0fj30sg0lcjrp.jpg"></li>
<li>重启到登录界面按5次shift进入命令提示符(此时窗口名称为sethc.exe)</li>
<li>输入如下命令启用Windows内置的Administrator用户，并重置Administrator的密码。如果之前用的是微软账户就可以不重置密码，默认无密码。<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">net <span class="keyword">user</span> <span class="title">Administrator</span> /active:yes </span><br><span class="line">net <span class="keyword">user</span> <span class="title">Administrator</span> 新密码</span><br></pre></td></tr></table></figure>
<img src= "/images/loading.gif" data-lazy-src="/images/Snipaste_2018-05-27_21-41-45.png"></li>
<li>用Administrator登录系统，将之前忘记密码的用户修改密码，如果是微软账户就上官网重置密码。<br><img src= "/images/loading.gif" data-lazy-src="/images/005YMNDBly1g0ravn4bmhj30ia0h613m.jpg"></li>
<li>进入原用户测试。</li>
<li>进入文件资源管理器，将Windows/System32下的sethc.exe重命名为cmd.exe，AAA.exe重命名为sethc.exe。</li>
<li>如果想禁用Administrator请执行以下命令。<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">net <span class="keyword">user</span> <span class="title">Administrator</span> /active:no</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Windows Desktop</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>sethc</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>一加7 Pro Android Q root教程</title>
    <url>/2019/08/18/root-for-oneplus7pro-androidQ.html</url>
    <content><![CDATA[<blockquote>
<p>博主近日把自己的一加7 Pro升级到了Android Q beta，发现暂时无法刷入twrp-recovery，也就意味着root有一点点的麻烦，今天博主发布个人测试可行的root方案。博主是在Mac下操作，Windows以及Linux同理。<a id="more"></a></p>
</blockquote>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><ul>
<li>Mac App Store安装Xcode。</li>
<li>终端下输入如下命令并按提示安装。<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>
<h2 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h2>终端下执行如下命令即可。<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster/install)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h2>终端下执行如下命令即可<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/Download</span></span><br><span class="line">wget https:<span class="string">//dl.google.com/android/repository/platform-tools-latest-darwin.zip</span></span><br><span class="line">unzip platform-tools-latest-darwin.zip</span><br><span class="line"><span class="keyword">echo</span> &#x27;export PATH=<span class="string">/Users/wbx/Downloads/platform-tools</span>:$PATH&#x27; &gt;&gt; ~<span class="string">/.zshrc</span></span><br><span class="line">source ~<span class="string">/.zshrc</span></span><br></pre></td></tr></table></figure>
<img src= "/images/loading.gif" data-lazy-src="/images/root-1.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/root-2.png"></li>
</ul>
<h2 id="Python3以及pip3"><a href="#Python3以及pip3" class="headerlink" title="Python3以及pip3"></a>Python3以及pip3</h2><p>终端执行如下命令安装Python3</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>python3</span><br></pre></td></tr></table></figure>
<p>终端输入如下命令安装pip3</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">https</span>://<span class="string">bootstrap</span>.<span class="string">pypa</span>.<span class="string">io</span>/<span class="built_in">get-pip.py</span> | <span class="string">python3</span></span><br></pre></td></tr></table></figure>
<h2 id="protobuf模块"><a href="#protobuf模块" class="headerlink" title="protobuf模块"></a>protobuf模块</h2><p>终端执行如下命令安装protobuf模块</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>protobuf</span><br><span class="line">pip3 <span class="keyword">install </span>protobuf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>至此，环境搭建已经全部完成。</p>
</blockquote>
<h1 id="检测环境搭建正确性"><a href="#检测环境搭建正确性" class="headerlink" title="检测环境搭建正确性"></a>检测环境搭建正确性</h1><p>终端输入以下命令，结果如图则正确</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> -V</span><br><span class="line">pip3 -V</span><br><span class="line">adb <span class="keyword">version</span></span><br><span class="line">protoc --<span class="keyword">version</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/root-3.png"></p>
<h1 id="root权限获取教程"><a href="#root权限获取教程" class="headerlink" title="root权限获取教程"></a>root权限获取教程</h1><ul>
<li><p>下载并解压手机当前使用的系统镜像，比如博主的是Android Q Developer Preview 4 for OnePlus 7 Pro。链接如下。<br><a href="https://oxygenos.oneplus.net/OnePlus7ProOxygen_13.X.04_OTA_004_all_1908020003_726196c3b79b4f85.zip">https://oxygenos.oneplus.net/OnePlus7ProOxygen_13.X.04_OTA_004_all_1908020003_726196c3b79b4f85.zip</a></p>
</li>
<li><p>下载并解压镜像解包工具。<br><a href="https://gist.github.com/ius/42bd02a5df2226633a342ab7a9c60f15/archive/48ffe1eee59af9a7da883d9ec7902d1507428dc4.zip">https://gist.github.com/ius/42bd02a5df2226633a342ab7a9c60f15/archive/48ffe1eee59af9a7da883d9ec7902d1507428dc4.zip</a></p>
</li>
<li><p>将解包工具中的两个.py文件放到我们解压的镜像目录。<br><img src= "/images/loading.gif" data-lazy-src="/images/root-4.png"></p>
</li>
<li><p>执行如下命令解包，当看到boot.img解包完成后按Ctrl+C终止命令。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> /Users/wbx/Downloads/OnePlus<span class="number">7</span>ProOxygen_<span class="number">13</span>.X.<span class="number">04</span>_OTA_<span class="number">004</span>_all_<span class="number">1908020003</span>_<span class="number">726196</span>c<span class="number">3</span>b<span class="number">79</span>b<span class="number">4</span>f<span class="number">85</span></span><br><span class="line"><span class="attribute">python3</span> payload_dumper.py payload.bin</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/root-5.png"><br>  <img src= "/images/loading.gif" data-lazy-src="/images/root-6.png"></p>
</li>
<li><p>数据线连接手机，手机开启USB调试模式，将解包生成的boot.img文件拷贝到手机根目录(由于macOS下无法直接将文件拷贝到Android，所以采用adb命令方案)</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">adb</span> <span class="keyword">push</span> boot.img /sdcard </span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/root-7.png"></p>
</li>
<li><p>手机端安装Magisk Manager App，可以在酷安下载。</p>
</li>
<li><p>按照图示，给boot.img打补丁<br><img src= "/images/loading.gif" data-lazy-src="/images/root-8.png"></p>
</li>
<li><p>将打好补丁的magisk_patched.img传回电脑桌面</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">adb pull <span class="regexp">/sdcard/</span>Download<span class="regexp">/magisk_patched.img ~/</span>Desktop</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/root-9.png"></p>
</li>
<li><p>将桌面上的magisk_patched.img文件刷入到手机的boot分区，Root完成。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">adb reboot-bootloader</span><br><span class="line">fastboot flash boot ~<span class="regexp">/Desktop/m</span>agisk_patched.img</span><br></pre></td></tr></table></figure>
<p>  <img src= "/images/loading.gif" data-lazy-src="/images/root-10.png"></p>
</li>
</ul>
<h1 id="至此您已经Root成功"><a href="#至此您已经Root成功" class="headerlink" title="至此您已经Root成功"></a>至此您已经Root成功</h1><p><img src= "/images/loading.gif" data-lazy-src="/images/root-11.png"></p>
<h1 id="OTA更新后如何保留Root权限"><a href="#OTA更新后如何保留Root权限" class="headerlink" title="OTA更新后如何保留Root权限"></a>OTA更新后如何保留Root权限</h1><p>OTA更新安装完成后，不要重启。按照图示操作后再重启即可保留Root权限<br><img src= "/images/loading.gif" data-lazy-src="/images/root-12.png"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android Q</tag>
        <tag>OnePlus 7 Pro</tag>
      </tags>
  </entry>
  <entry>
    <title>使用macserial获取iMac 2019机型信息</title>
    <url>/2019/04/03/smbios-for-imac2019.html</url>
    <content><![CDATA[<blockquote>
<p>Apple在近期发布了iMac 2019版本，最高可配i9+vega48，无T2芯片(美滋滋)，目前Clover Configurator尚未更新关于iMac 2019的smbios信息，本教程教大家如何使用macserial获取iMac 2019机型信息。</p>
</blockquote>
<a id="more"></a>

<h3 id="获取macserial软件"><a href="#获取macserial软件" class="headerlink" title="获取macserial软件"></a>获取macserial软件</h3><blockquote>
<p>macserial是github上的<font color=#A52A2A ><strong>acidanthera</strong></font>大佬开发，其release版本尚未添加iMac 2019信息，故需要编译安装。经过博主测试，需要修改build.tool脚本才能成功编译，故博主已将原项目<font color=#A52A2A ><strong>fork</strong></font>，并修改build.tool脚本，使其能正常编译。</p>
</blockquote>
<blockquote>
<p>原项目地址:<a href="https://github.com/acidanthera/macserial">https://github.com/acidanthera/macserial</a></p>
</blockquote>
<blockquote>
<p>博主fork地址:<a href="https://github.com/bugprogrammer/macserial">https://github.com/bugprogrammer/macserial</a></p>
</blockquote>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><h5 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h5><ul>
<li>App Store下载Xcode</li>
<li>终端输入如下命令并按提示安装<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>
<h4 id="获取macserial源码"><a href="#获取macserial源码" class="headerlink" title="获取macserial源码"></a>获取macserial源码</h4></li>
</ul>
<p>终端下输入如下命令即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/bugprogrammer/m</span>acserial.git</span><br><span class="line">cd macserial</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/ce1c2f16f103e8ba764ec2c731370177bc99aab1.jpg"></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>终端下输入如下命令即可，成功后会打开生成文件目录。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">./<span class="selector-tag">build</span><span class="selector-class">.tool</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/f2f100fad5fc616b32ea4c7a596379b3dbbcae9d.jpg"></p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bin</span>/macserial<span class="number">64</span> -h</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/4ee5818801c68268aa98ad5c21dd7b808124c2e7.jpg"></p>
<h4 id="查看支持的所有机型"><a href="#查看支持的所有机型" class="headerlink" title="查看支持的所有机型"></a>查看支持的所有机型</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">bin/macserial64 <span class="comment">--list</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/2485bc9325d68c7209721bff27f35e0283549b27.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/dc354eafcda927a3095934b78989dd4128f04b1c.jpg"></p>
<h3 id="获取iMac-2019机型信息-以iMac-19-1为例"><a href="#获取iMac-2019机型信息-以iMac-19-1为例" class="headerlink" title="获取iMac 2019机型信息(以iMac 19,1为例)"></a>获取iMac 2019机型信息(以iMac 19,1为例)</h3><h4 id="获取Serial-Number以及Board-Serial-Number"><a href="#获取Serial-Number以及Board-Serial-Number" class="headerlink" title="获取Serial Number以及Board Serial Number"></a>获取Serial Number以及Board Serial Number</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bin</span>/macserial<span class="number">64</span> --model iMac<span class="number">19</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/ace46b89621b91d46e0236ca9547315eaae38e7b.jpg"></p>
<h4 id="通过源码获取其他信息"><a href="#通过源码获取其他信息" class="headerlink" title="通过源码获取其他信息"></a>通过源码获取其他信息</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sed</span> -n &#x27;<span class="number">424</span>,<span class="number">429</span>p&#x27; src/modelinfo.h</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/5c207d8538d1a6a7ee6f5000500dbf718b845aab.jpg"></p>
<h3 id="最终成品"><a href="#最终成品" class="headerlink" title="最终成品"></a>最终成品</h3><p><img src= "/images/loading.gif" data-lazy-src="/images/ce8b62d1cf5cc748a11a21b86cd234e48e5d5aa3.png"></p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>解锁macOS10.15的系统分区</title>
    <url>/2019/07/13/unlockSystem.html</url>
    <content><![CDATA[<blockquote>
<p>macOS 10.15的一个显著变化就是Apple锁定了系统分区，导致L/E以及S/L/E无法拷贝文件。Kext Utility无法重建缓存。也间接影响了HomeBrew的使用，下面教大家如何解锁系统分区。<a id="more"></a></p>
</blockquote>
<h1 id="准备应用程序"><a href="#准备应用程序" class="headerlink" title="准备应用程序"></a>准备应用程序</h1><ul>
<li><p>打开系统自带的自动操作程序，依次点击应用程序-&gt;选取-&gt;运行shell脚本。<br><img src= "/images/loading.gif" data-lazy-src="/images/unlock-1.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/unlock-2.png"><br><img src= "/images/loading.gif" data-lazy-src="/images/unlock-3.png"></p>
</li>
<li><p>将以下脚本粘贴进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;你的电脑密码&#x27;</span>|sudo -S mount -uw / &amp;&amp; killall Finder</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/unlock-4.png"></p>
</li>
<li><p>保存成app<br><img src= "/images/loading.gif" data-lazy-src="/images/unlock-5.png"></p>
</li>
</ul>
<h1 id="添加开机自启"><a href="#添加开机自启" class="headerlink" title="添加开机自启"></a>添加开机自启</h1><p>打开偏好设置-&gt;用户与群组-&gt;登录项，将unlockSystem.app添加到启动项，并点击隐藏。<br><img src= "/images/loading.gif" data-lazy-src="/images/unlock-6.png"></p>
<blockquote>
<p>至此，您已经成功解锁系统分区，可以尝试SLE/LE写入以及重建缓存操作了，博主亲测成功哦！</p>
</blockquote>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>为个人网站升级TLS 1.3以及HSTS</title>
    <url>/2019/01/14/update-website-tls1.3-and-HSTS.html</url>
    <content><![CDATA[<h1 id="理论相关"><a href="#理论相关" class="headerlink" title="理论相关"></a>理论相关</h1><h2 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h2><h3 id="TLS简介"><a href="#TLS简介" class="headerlink" title="TLS简介"></a>TLS简介</h3><p>SSL(Secure Sockets Layer) 安全套接层，是一种安全协议，经历了 SSL 1.0、2.0、3.0 版本后发展成了标准安全协议——TLS (Transport Layer Security) 传输层安全性协议。TLS 有 1.0 (RFC 2246)、1.1(RFC 4346)、1.2(RFC 5246)、1.3(RFC 8446) 版本。</p>
<a id="more"></a>

<p>TLS 在实现上分为 记录层 和 握手层 两层，其中握手层又含四个子协议: 握手协议 (handshake protocol)、更改加密规范协议 (change cipher spec protocol)、应用数据协议 (application data protocol) 和警告协议 (alert protocol)。TLS模型图如下。<br><img src= "/images/loading.gif" data-lazy-src="/images/e3226956001fc65b220becb4f07e6d5896d5576c.jpg"></p>
<h3 id="TLS-1-3与TLS-1-2对比"><a href="#TLS-1-3与TLS-1-2对比" class="headerlink" title="TLS 1.3与TLS 1.2对比"></a>TLS 1.3与TLS 1.2对比</h3><p>互联网工程任务组（IETF）是负责定义TLS协议的组，该协议经历了多次迭代。先前版本的TLS，TLS 1.2，在RFC 5246中定义， 并且在过去八年中已被大多数Web浏览器使用。在2018年3月21日，经过28次草案后，TLS 1.3已经完成。截至2018年8月，TLS 1.3的最终版本现已发布（RFC 8446）。</p>
<p>Cloudflare等公司已经向其客户提供TLS 1.3。Filippo Valsorda就TLS 1.2和TLS 1.3之间的差异进行了很好的讨论。简而言之，TLS 1.3与TLS 1.2的主要优点是速度更快，安全性更高。</p>
<h3 id="TLS-1-3速度优势"><a href="#TLS-1-3速度优势" class="headerlink" title="TLS 1.3速度优势"></a>TLS 1.3速度优势</h3><p>在Web性能方面，TLS和加密连接总是增加了一些开销。HTTP / 2肯定有助于解决这个问题，但TLS 1.3通过TLS错误启动和零往返时间（0-RTT）等功能帮助加速加密连接。</p>
<p>简单地说，使用TLS 1.2，需要两次往返才能完成TLS handshake。使用1.3时，它只需要一次往返， 从而将加密延迟减少一半。这会使这些加密连接感觉比以前更快一点。TLS1.3与TLS1.2握手示意图如下。<br><img src= "/images/loading.gif" data-lazy-src="/images/5292977ab3e0d37b5d6151eaea384f9ed1a9cbfb.jpg"></p>
<h3 id="TLS-1-3浏览器支持"><a href="#TLS-1-3浏览器支持" class="headerlink" title="TLS 1.3浏览器支持"></a>TLS 1.3浏览器支持</h3><p>最新版本的Chrome以及FireFox都已经默认支持TLS 1.3，Safari在macOS High Sierra中已经默认支持TLS 1.3。</p>
<h2 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h2><h3 id="什么是HSTS"><a href="#什么是HSTS" class="headerlink" title="什么是HSTS"></a>什么是HSTS</h3><p>HSTS的全称是HTTP Strict-Transport-Security，它是一个Web安全策略机制（web security policy mechanism）。<br>HSTS最早于2015年被纳入到ThoughtWorks技术雷达，并且在2016年的最新一期技术雷达里，它直接从“评估（Trial）”阶段进入到了“采用（Adopt）”阶段，这意味着ThoughtWorks强烈主张业界积极采用这项安全防御措施，并且ThoughtWorks已经将其应用于自己的项目。</p>
<h3 id="HSTS核心思想"><a href="#HSTS核心思想" class="headerlink" title="HSTS核心思想"></a>HSTS核心思想</h3><p>HSTS最为核心的是一个HTTP响应头（HTTP Response Header）。正是它可以让浏览器得知，在接下来的一段时间内，当前域名只能通过HTTPS进行访问，并且在浏览器发现当前连接不安全的情况下，强制拒绝用户的后续访问要求。<br>HSTS Header的语法如下：<br><font color=#A52A2A ><strong>Strict-Transport-Security: &lt;max-age=&gt;[; includeSubDomains][; preload]</strong></font></p>
<ul>
<li>max-age是必选参数，是一个以秒为单位的数值，它代表着HSTS Header的过期时间，通常设置为1年，即31536000秒。</li>
<li>includeSubDomains是可选参数，如果包含它，则意味着当前域名及其子域名均开启HSTS保护。</li>
<li>preload是可选参数，只有当你申请将自己的域名加入到浏览器内置列表的时候才需要使用到它。</li>
</ul>
<h1 id="升级TLS-1-3以及HSTS教程-服务器操作系统为Debian-4-9-51-1"><a href="#升级TLS-1-3以及HSTS教程-服务器操作系统为Debian-4-9-51-1" class="headerlink" title="升级TLS 1.3以及HSTS教程(服务器操作系统为Debian 4.9.51-1)"></a>升级TLS 1.3以及HSTS教程(服务器操作系统为Debian 4.9.51-1)</h1><h2 id="TLS-1-3"><a href="#TLS-1-3" class="headerlink" title="TLS 1.3"></a>TLS 1.3</h2><h3 id="关闭以及备份现有Nginx"><a href="#关闭以及备份现有Nginx" class="headerlink" title="关闭以及备份现有Nginx"></a>关闭以及备份现有Nginx</h3><p>输入如下命令即可<font color=#A52A2A ><strong>(提前将nginx加入path路径)：</strong></font></p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">nginx -s <span class="meta">stop</span> <span class="variable">&amp;&amp;</span> cd /usr/local <span class="variable">&amp;&amp;</span> mv nginx nginx-bak</span><br></pre></td></tr></table></figure>
<h3 id="下载相关源码以及安装依赖环境"><a href="#下载相关源码以及安装依赖环境" class="headerlink" title="下载相关源码以及安装依赖环境"></a>下载相关源码以及安装依赖环境</h3><h4 id="下载以及解压Nginx"><a href="#下载以及解压Nginx" class="headerlink" title="下载以及解压Nginx"></a>下载以及解压Nginx</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> http://nginx.org/download/nginx-<span class="number">1</span>.<span class="number">15</span>.<span class="number">8</span>.tar.gz &amp;&amp; tar -zxvf nginx-<span class="number">1</span>.<span class="number">15</span>.<span class="number">8</span>.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="下载以及解压OpenSSL"><a href="#下载以及解压OpenSSL" class="headerlink" title="下载以及解压OpenSSL"></a>下载以及解压OpenSSL</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://www.openssl.org/source/openssl-<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>a.tar.gz &amp;&amp; tar -zxvf openssl-<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>a.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apt</span> install -y build-essential libpcre<span class="number">3</span> libpcre<span class="number">3</span>-dev zlib<span class="number">1</span>g-dev liblua<span class="number">5</span>.<span class="number">1</span>-dev libluajit-<span class="number">5</span>.<span class="number">1</span>-dev libgeoip-dev google-perftools libgoogle-perftools-dev</span><br></pre></td></tr></table></figure>
<h3 id="为Nginx以及OpenSSL打补丁"><a href="#为Nginx以及OpenSSL打补丁" class="headerlink" title="为Nginx以及OpenSSL打补丁"></a>为Nginx以及OpenSSL打补丁</h3><h4 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">pushd openssl-<span class="number">1.1</span>.<span class="number">1</span>a</span><br><span class="line">curl https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/hakasenyang/</span>openssl-patch<span class="regexp">/master/</span>openssl-equal-<span class="number">1.1</span>.<span class="number">1</span>a_ciphers.patch | patch -p1</span><br><span class="line">curl https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/hakasenyang/</span>openssl-patch<span class="regexp">/master/</span>openssl-<span class="number">1.1</span>.<span class="number">1</span>a-chacha_draft.patch | patch -p1</span><br><span class="line">popd</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/7861cbd6d2e658e3fb1628798923a98d84efb734.jpg"></p>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pushd</span> nginx-<span class="number">1</span>.<span class="number">15</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">curl</span> https://raw.githubusercontent.com/kn<span class="number">007</span>/patch/d<span class="number">6</span>bd<span class="number">9</span>f<span class="number">7</span>e<span class="number">345</span>a<span class="number">0</span>afc<span class="number">88</span>e<span class="number">050</span>a<span class="number">4</span>dd<span class="number">991</span>a<span class="number">57</span>b<span class="number">7</span>fb<span class="number">39</span>be/nginx.patch | patch -p<span class="number">1</span></span><br><span class="line"><span class="attribute">curl</span> https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/nginx_strict-sni.patch | patch -p<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/4127f890f459ac54b5800d261ff63189bad02935.jpg"></p>
<h3 id="编译安装Nginx"><a href="#编译安装Nginx" class="headerlink" title="编译安装Nginx"></a>编译安装Nginx</h3><h4 id="使用以下命令生成MakeFile，注意–with-openssl-openssl路径"><a href="#使用以下命令生成MakeFile，注意–with-openssl-openssl路径" class="headerlink" title="使用以下命令生成MakeFile，注意–with-openssl=openssl路径"></a>使用以下命令生成MakeFile，注意<font color=#A52A2A ><strong>–with-openssl=openssl路径</strong></font></h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/usr/local/nginx</span> <span class="params">--with-http_stub_status_module</span> <span class="params">--with-http_ssl_module</span> <span class="params">--with-stream</span> <span class="params">--with-stream_ssl_module</span> <span class="params">--with-http_v2_module</span> <span class="params">--with-threads</span> <span class="params">--with-http_v2_hpack_enc</span> <span class="params">--with-http_spdy_module</span> <span class="params">--with-openssl=</span>~<span class="string">/openssl-1.1.1a</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/c5818c8b270c7024d304550a890b82ddc8ba6b47.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/6612e5162967ca8cff51c9dd073908fef0679ee4.jpg"></p>
<h4 id="编译以及安装Nginx"><a href="#编译以及安装Nginx" class="headerlink" title="编译以及安装Nginx"></a>编译以及安装Nginx</h4><p>输入如下命令即可，如下图即安装成功。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/6e84eea0f6826046fac6a01c3b5124f62767a48e.jpg"><br><img src= "/images/loading.gif" data-lazy-src="/images/56d6c1e98542e50be4d53ffd22fdc534d3fcbd42.jpg"></p>
<h3 id="配置Nginx以启用TLS-1-3"><a href="#配置Nginx以启用TLS-1-3" class="headerlink" title="配置Nginx以启用TLS 1.3"></a>配置Nginx以启用TLS 1.3</h3><h4 id="输入以下命令，拷贝之前备份的nginx-conf。"><a href="#输入以下命令，拷贝之前备份的nginx-conf。" class="headerlink" title="输入以下命令，拷贝之前备份的nginx.conf。"></a>输入以下命令，拷贝之前备份的nginx.conf。</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp -f <span class="regexp">/usr/</span>local<span class="regexp">/nginx-bak/</span>conf<span class="regexp">/nginx.conf /u</span>sr<span class="regexp">/local/</span>nginx/conf</span><br></pre></td></tr></table></figure>
<h4 id="输入以下命令打开nginx-conf并按照图示修改即可启用TLS-1-3-注意：去掉所有的ssl-on字段，否则会报警告"><a href="#输入以下命令打开nginx-conf并按照图示修改即可启用TLS-1-3-注意：去掉所有的ssl-on字段，否则会报警告" class="headerlink" title="输入以下命令打开nginx.conf并按照图示修改即可启用TLS 1.3(注意：去掉所有的ssl on字段，否则会报警告)"></a>输入以下命令打开nginx.conf并按照图示修改即可启用TLS 1.3<font color=#A52A2A ><strong>(注意：去掉所有的ssl on字段，否则会报警告)</strong></font></h4><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">nano <span class="keyword">conf</span>/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/0cfd3fc3550ab131aba2b99804e661543bb6f0dd.jpg"></p>
<h2 id="HSTS-1"><a href="#HSTS-1" class="headerlink" title="HSTS"></a>HSTS</h2><h3 id="打开nginx-conf并按照图示修改即可启用HSTS"><a href="#打开nginx-conf并按照图示修改即可启用HSTS" class="headerlink" title="打开nginx.conf并按照图示修改即可启用HSTS"></a>打开nginx.conf并按照图示修改即可启用HSTS</h3><p><img src= "/images/loading.gif" data-lazy-src="/images/026bfbbbf9a0845751844171c64f0e7c4de7e25d.jpg"></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h3 id="输入以下命令，输出如图即可确定nginx-conf文件没有错误"><a href="#输入以下命令，输出如图即可确定nginx-conf文件没有错误" class="headerlink" title="输入以下命令，输出如图即可确定nginx.conf文件没有错误"></a>输入以下命令，输出如图即可确定nginx.conf文件没有错误</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -t</span></span><br></pre></td></tr></table></figure>
<p><img src= "/images/loading.gif" data-lazy-src="/images/43e2e95073a651a5fd9c08f3a25758bed67f94c8.jpg"></p>
<h3 id="启动Nginx，无输出即正常"><a href="#启动Nginx，无输出即正常" class="headerlink" title="启动Nginx，无输出即正常"></a>启动Nginx，无输出即正常</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx</span></span><br></pre></td></tr></table></figure>
<h3 id="登录https-www-ssllabs-com，-输入域名，如下图即支持，说明TLS-1-3以及HSTS升级成功！！！"><a href="#登录https-www-ssllabs-com，-输入域名，如下图即支持，说明TLS-1-3以及HSTS升级成功！！！" class="headerlink" title="登录https://www.ssllabs.com， 输入域名，如下图即支持，说明TLS 1.3以及HSTS升级成功！！！"></a>登录<a href="https://www.ssllabs.com,/">https://www.ssllabs.com，</a> 输入域名，如下图即支持，说明TLS 1.3以及HSTS升级成功！！！</h3><p><img src= "/images/loading.gif" data-lazy-src="/images/29aeab3e42aab95a3207b974fe0d44af8e693d1b.jpg"></p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Debian</tag>
        <tag>OpenSSL</tag>
        <tag>TLS 1.3</tag>
        <tag>HSTS</tag>
      </tags>
  </entry>
</search>
